@article{10059237,
  title = {Generative Pre-Trained Transformer-Based Reinforcement Learning for Testing Web Application Firewalls},
  author = {Liang, Hongliang and Li, Xiangyu and Xiao, Da and Liu, Jie and Zhou, Yanjie and Wang, Aibo and Li, Jin},
  year = {2024},
  journal = {IEEE Transactions on Dependable and Secure Computing},
  volume = {21},
  number = {1},
  pages = {309--324},
  doi = {10.1109/TDSC.2023.3252523},
  keywords = {Adaptation models,Black-box testing,Data models,Grammar,Payloads,reinforcement learning,Reinforcement learning,Security,Testing,transformer,web application firewall},
  annotation = {2 citations (Crossref) [2024-03-31]\\
TLDR: GPTFuzzer is proposed, a practical and effective generation-based approach to test WAFs by generating attack payloads token-by-token and significantly outperforms state-of-the-art approaches, i.e., ML-Driven and RAT.},
  file = {D:\data\Zotero\storage\5QCQK3SY\Liang et al_2024_Generative pre-trained transformer-based reinforcement learning for testing web.pdf}
}

@article{10264129,
  title = {An Automatic {{XSS}} Attack Vector Generation Method Based on the Improved Dueling {{DDQN}} Algorithm},
  author = {Yao, Yuan and He, Junjiang and Li, Tao and Wang, Yunpeng and Lan, Xiaolong and Li, Yuan},
  year = {2023},
  journal = {IEEE Transactions on Dependable and Secure Computing},
  pages = {1--17},
  doi = {10.1109/TDSC.2023.3319352},
  keywords = {Adaptation models,Attack Vector Generation,Convergence,Cross Site Scripting,Databases,Dueling DDQN,Genetic algorithms,Payloads,Reinforcement Learning,Security,Semantics},
  annotation = {0 citations (Crossref) [2024-03-31]},
  file = {D:\data\Zotero\storage\AMNN5GR9\Yao et al_2023_An automatic XSS attack vector generation method based on the improved dueling.pdf}
}

@article{10388400,
  title = {Towards Enhancing Sequence-Optimized Malware Representation with Context-Separated Bi-Directional Long Short-Term Memory and Proximal Policy Optimization},
  author = {Xie, Yuhao and Luo, Xiong and Sun, Jiankun},
  year = {2024},
  journal = {IEEE Transactions on Dependable and Secure Computing},
  pages = {1--12},
  doi = {10.1109/TDSC.2024.3352604},
  keywords = {bi-directional structure,Codes,Feature extraction,Libraries,Malware,malware classification,Optimization,proximal policy optimization,reinforcement learning,Semantics,Task analysis,vector representation,Word embedding},
  annotation = {0 citations (Crossref) [2024-03-31]},
  file = {D:\data\Zotero\storage\7YP2PQFQ\Xie et al_2024_Towards enhancing sequence-optimized malware representation with.pdf}
}

@article{9275317,
  title = {Generating Effective Software Obfuscation Sequences with Reinforcement Learning},
  author = {Wang, Huaijin and Wang, Shuai and Xu, Dongpeng and Zhang, Xiangyu and Liu, Xiao},
  year = {2022},
  journal = {IEEE Transactions on Dependable and Secure Computing},
  volume = {19},
  number = {3},
  pages = {1900--1917},
  doi = {10.1109/TDSC.2020.3041655},
  keywords = {Control systems,reinforcement learning,Reinforcement learning,reverse engineering,Reverse engineering,Software,Software obfuscation,software similarity,Switches,Tools,Transforms},
  annotation = {4 citations (Crossref) [2024-03-31]},
  file = {D:\data\Zotero\storage\8XQ68DTX\Wang et al_2022_Generating effective software obfuscation sequences with reinforcement learning.pdf}
}

@inproceedings{9609176,
  title = {Test Case Reduction: {{A}} Framework, Benchmark, and Comparative Study},
  booktitle = {2021 {{IEEE}} International Conference on Software Maintenance and Evolution ({{ICSME}})},
  author = {Kreutzer, Patrick and Kunze, Tom and Philippsen, Michael},
  year = {2021},
  pages = {58--69},
  doi = {10.1109/ICSME52107.2021.00012},
  file = {D:\data\Zotero\storage\E937VXKP\Kreutzer et al. - 2021 - Test case reduction A framework, benchmark, and c.pdf}
}

@article{9894692,
  title = {{{MARNet}}: {{Backdoor}} Attacks against Cooperative Multi-Agent Reinforcement Learning},
  author = {Chen, Yanjiao and Zheng, Zhicong and Gong, Xueluan},
  year = {2023},
  journal = {IEEE Transactions on Dependable and Secure Computing},
  volume = {20},
  number = {5},
  pages = {4188--4198},
  doi = {10.1109/TDSC.2022.3207429},
  keywords = {Backdoor attacks,Computer crime,Convergence,Games,multi-agent reinforcement learning,Predator prey systems,Q-learning,Task analysis,Training},
  annotation = {5 citations (Crossref) [2024-03-31]},
  file = {D:\data\Zotero\storage\FI96XGE7\Chen et al_2023_MARNet.pdf}
}

@article{abo-eleneenRoleReinforcementLearning2023,
  title = {The Role of {{Reinforcement Learning}} in Software Testing},
  author = {{Abo-eleneen}, Amr and Palliyali, Ahammed and Catal, Cagatay},
  year = {2023},
  volume = {164},
  pages = {107325},
  doi = {10.1016/J.INFSOF.2023.107325},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  annotation = {0 citations (Crossref) [2024-03-31]},
  timestamp = {Wed, 01 Nov 2023 08:59:24 +0100},
  file = {D:\data\Zotero\storage\I5WYYHM2\Abo-eleneen et al_2023_The role of Reinforcement Learning in software testing.pdf}
}

@misc{AFLplusplusAflcov2025,
  title = {{{AFLplusplus}}/Afl-Cov},
  year = {2025},
  month = apr,
  urldate = {2025-05-22},
  abstract = {Produce code coverage results with gcov from afl-fuzz test cases},
  copyright = {GPL-2.0},
  howpublished = {Advanced Fuzzing League ++},
  keywords = {/unread}
}

@misc{AmericanFuzzyLop,
  title = {American Fuzzy Lop},
  urldate = {2025-09-15},
  howpublished = {https://lcamtuf.coredump.cx/afl/},
  langid = {english},
  keywords = {/unread},
  file = {D\:\\data\\Zotero\\storage\\JURMLIWQ\\afl.html;D\:\\data\\Zotero\\storage\\RH2QMRGK\\afl.html}
}

@article{amoueiRATReinforcementlearningdrivenAdaptive2022,
  title = {{{RAT}}: {{Reinforcement-learning-driven}} and Adaptive Testing for Vulnerability Discovery in Web Application Firewalls},
  author = {Amouei, Mohammadhossein and Rezvani, Mohsen and Fateh, Mansoor},
  year = {2022},
  journal = {IEEE Transactions on Dependable and Secure Computing},
  volume = {19},
  number = {5},
  pages = {3371--3386},
  doi = {10.1109/TDSC.2021.3095417},
  langid = {american},
  annotation = {7 citations (Crossref) [2024-03-31]\\
TLDR: Reinforcement-Learning-Driven and Adaptive Testing (RAT), an automated black-box testing strategy to discover injection vulnerabilities in WAFs, is presented, which focuses on SQL injection and Cross-site Scripting, which have been among the top ten vulnerabilities over the past decade.},
  file = {D:\data\Zotero\storage\AP3L8FPZ\Amouei et al_2022_RAT.pdf}
}

@article{aroraSurveyInverseReinforcement2021,
  title = {A Survey of Inverse Reinforcement Learning: {{Challenges}}, Methods and Progress},
  author = {Arora, Saurabh and Doshi, Prashant},
  year = {2021},
  journal = {Artificial Intelligence},
  volume = {297},
  pages = {103500},
  doi = {10.1016/J.ARTINT.2021.103500},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  annotation = {TLDR: The survey formally introduces the IRL problem along with its central challenges which include accurate inference, generalizability, correctness of prior knowledge, and growth in solution complexity with problem size and elaborates how the current methods mitigate these challenges.},
  timestamp = {Thu, 10 Jun 2021 09:34:37 +0200}
}

@article{arulkumaranDeepReinforcementLearning2017,
  title = {Deep Reinforcement Learning: {{A}} Brief Survey},
  author = {Arulkumaran, Kai and Deisenroth, Marc Peter and Brundage, Miles and Bharath, Anil Anthony},
  year = {2017},
  journal = {IEEE Signal Processing Magazine},
  volume = {34},
  number = {6},
  pages = {26--38},
  doi = {10.1109/MSP.2017.2743240},
  keywords = {Artificial intelligence,Learning (artificial intelligence),Machine learning,Neural networks,Signal processing algorithms,Visualization},
  annotation = {TLDR: This survey will cover central algorithms in deep RL, including the deep Q-network (DQN), trust region policy optimization (TRPO), and asynchronous advantage actor critic, and highlight the unique advantages of deep neural networks, focusing on visual understanding via RL.},
  file = {D:\data\Zotero\storage\DTJVTBPG\Arulkumaran et al. - 2017 - Deep reinforcement learning A brief survey.pdf}
}

@misc{aryaOSSfuzz2025,
  title = {{{OSS-fuzz}}},
  author = {Arya, Abhishek and Chang, Oliver and Metzman, Jonathan and Serebryany, Kostya and Liu, Dongge},
  year = {2025},
  month = sep,
  urldate = {2025-09-04},
  abstract = {OSS-Fuzz - continuous fuzzing for open source software.},
  copyright = {Apache-2.0},
  keywords = {/unread}
}

@inproceedings{aschermannREDQUEENFuzzingInputtostate2019,
  title = {{{REDQUEEN}}: Fuzzing with Input-to-State Correspondence},
  booktitle = {Ndss},
  author = {Aschermann, Cornelius and Schumilo, Sergej and Blazytko, Tim and Gawlik, Robert and Holz, Thorsten},
  year = {2019},
  volume = {19},
  pages = {1--15},
  langid = {english},
  keywords = {readed,thesis (related work)},
  annotation = {GSCC: 0000411 \\
CCF: A\\
Read\_Status: Read\\
Read\_Status\_Date: 2025-02-18T01:55:33.181Z\\
remark: 基于输入状态对应的模糊测试方法},
  file = {D:\data\Zotero\storage\FQ3QE6R5\Aschermann et al_2019_REDQUEEN.pdf}
}

@article{baiTestingErrorHandling2023,
  title = {Testing Error Handling Code with Software Fault Injection and Error-Coverage-Guided Fuzzing},
  author = {Bai, Jia-Ju and Fu, Zi-Xuan and Xie, Kai-Tao and Jiang, Zu-Ming},
  year = {2023},
  journal = {IEEE Transactions on Dependable and Secure Computing},
  pages = {1--16},
  doi = {10.1109/TDSC.2023.3288876},
  annotation = {1 citations (Crossref/DOI) [2025-02-27]\\
0 citations (Crossref) [2024-03-31]},
  file = {D:\data\Zotero\storage\HXJR3AI8\Bai et al_2023_Testing error handling code with software fault injection and.pdf}
}

@article{bartoNeuronlikeAdaptiveElements1983,
  title = {Neuronlike Adaptive Elements That Can Solve Difficult Learning Control Problems},
  author = {Barto, Andrew G. and Sutton, Richard S. and Anderson, Charles W.},
  year = {1983},
  journal = {IEEE Transactions on Systems, Man, and Cybernetics},
  volume = {SMC-13},
  number = {5},
  pages = {834--846},
  doi = {10.1109/TSMC.1983.6313077},
  keywords = {/unread,Adaptive systems,Biological neural networks,Neurons,Pattern recognition,Problem-solving,Supervised learning,Training},
  annotation = {TLDR: It is shown how a system consisting of two neuronlike adaptive elements can solve a difficult learning control problem and the relation of this work to classical and instrumental conditioning in animal learning studies and its possible implications for research in the neurosciences.},
  file = {D:\data\Zotero\storage\SUHTAKBN\Barto et al. - 1983 - Neuronlike adaptive elements that can solve difficult learning control problems.pdf}
}

@inproceedings{baStatefulGreyboxFuzzing2022,
  title = {Stateful Greybox Fuzzing},
  booktitle = {31st {{USENIX}} Security Symposium, {{USENIX}} Security 2022, Boston, {{MA}}, {{USA}}, August 10-12, 2022},
  author = {Ba, Jinsheng and B{\"o}hme, Marcel and Mirzamomen, Zahra and Roychoudhury, Abhik},
  editor = {Butler, Kevin R. B. and Thomas, Kurt},
  year = {2022},
  pages = {3255--3272},
  publisher = {USENIX Association},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/conf/uss/BaBMR22.bib},
  langid = {american},
  timestamp = {Tue, 18 Oct 2022 17:10:36 +0200},
  file = {D:\data\Zotero\storage\3A7H9PY3\Ba et al. - 2022 - Stateful greybox fuzzing.pdf}
}

@inproceedings{binosiRainfuzzReinforcementlearningDriven2023,
  title = {Rainfuzz: {{Reinforcement-learning}} Driven Heat-Maps for Boosting Coverage-Guided Fuzzing},
  booktitle = {Proceedings of the 12th International Conference on Pattern Recognition Applications and Methods, {{ICPRAM}} 2023, Lisbon, Portugal, February 22-24, 2023},
  author = {Binosi, Lorenzo and Rullo, Luca and Polino, Mario and Carminati, Michele and Zanero, Stefano},
  editor = {Marsico, Maria De and {di Baja}, Gabriella Sanniti and Fred, Ana L. N.},
  year = {2023},
  pages = {39--50},
  publisher = {SCITEPRESS},
  doi = {10.5220/0011625300003411},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  keywords = {thesis (related work)},
  annotation = {GSCC: 0000006 2025-03-02T11:04:54.211Z \\
3 citations (Crossref/DOI) [2025-02-27]\\
1 citations (Crossref) [2024-03-31]\\
TLDR: The first approach in the literature that uses reinforcement learning for building heat-maps by formalizing the problem of choosing the position to be mutated within the input as a reinforcement-learning problem is proposed and implemented in Rainfuzz.},
  timestamp = {Mon, 26 Jun 2023 20:42:43 +0200},
  file = {D:\data\Zotero\storage\6RZWIZ44\Binosi et al_2023_Rainfuzz.pdf}
}

@article{boehmeFuzzingChallengesReflections2021,
  title = {Fuzzing: Challenges and Reflections},
  author = {Boehme, Marcel and Cadar, Cristian and Roychoudhury, Abhik},
  year = {2021},
  journal = {IEEE Software},
  volume = {38},
  number = {3},
  pages = {79--86},
  doi = {10.1109/MS.2020.3016773},
  langid = {english},
  annotation = {83 citations (Crossref/DOI) [2025-02-27]\\
GSCC: 0000187 \\
TLDR: The open challenges and opportunities for fuzzing and symbolic execution as they emerged in discussions among researchers and practitioners in a Shonan Meeting and that were validated in a subsequent survey are summarized.\\
remark: 模糊测试挑战与展望},
  file = {D:\data\Zotero\storage\LC4FBBC2\Boehme et al. - 2021 - Fuzzing Challenges and reflections.pdf}
}

@inproceedings{bohmeBoostingFuzzerEfficiency2020,
  title = {Boosting Fuzzer Efficiency: {{An}} Information Theoretic Perspective},
  booktitle = {Proceedings of the 28th {{ACM}} Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
  author = {B{\"o}hme, Marcel and Man{\`e}s, Valentin J. M. and Cha, Sang Kil},
  year = {2020},
  series = {{{ESEC}}/{{FSE}} 2020},
  pages = {678--689},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/3368089.3409748},
  abstract = {In this paper, we take the fundamental perspective of fuzzing as a learning process. Suppose before fuzzing, we know nothing about the behaviors of a program P: What does it do? Executing the first test input, we learn how P behaves for this input. Executing the next input, we either observe the same or discover a new behavior. As such, each execution reveals ''some amount'' of information about P's behaviors. A classic measure of information is Shannon's entropy. Measuring entropy allows us to quantify how much is learned from each generated test input about the behaviors of the program. Within a probabilistic model of fuzzing, we show how entropy also measures fuzzer efficiency. Specifically, it measures the general rate at which the fuzzer discovers new behaviors. Intuitively, efficient fuzzers maximize information. From this information theoretic perspective, we develop Entropic, an entropy-based power schedule for greybox fuzzing which assigns more energy to seeds that maximize information. We implemented Entropic into the popular greybox fuzzer LibFuzzer. Our experiments with more than 250 open-source programs (60 million LoC) demonstrate a substantially improved efficiency and confirm our hypothesis that an efficient fuzzer maximizes information. Entropic has been independently evaluated and invited for integration into main-line LibFuzzer. Entropic now runs on more than 25,000 machines fuzzing hundreds of security-critical software systems simultaneously and continuously.},
  isbn = {978-1-4503-7043-1},
  langid = {american},
  keywords = {efficiency,Entropic,entropy,fuzzing,information,information theory,scheduling,software testing,thesis (related work)},
  annotation = {GSCC: 0000142 2025-06-04T05:51:24.412Z \\
TLDR: Entropic is developed, an entropy-based power schedule for greybox fuzzing which assigns more energy to seeds that maximize information and confirms the hypothesis that an efficient fuzzer maximizes information.\\
remark: 基于信息熵提升模糊测试效率},
  file = {D:\data\Zotero\storage\9WTWWDNL\Böhme et al. - 2020 - Boosting fuzzer efficiency An information theoret.pdf}
}

@article{bohmeCoveragebasedGreyboxFuzzing2019,
  title = {Coverage-Based Greybox Fuzzing as Markov Chain},
  author = {B{\"o}hme, Marcel and Pham, Van-Thuan and Roychoudhury, Abhik},
  year = {2019},
  journal = {IEEE Transactions on Software Engineering},
  volume = {45},
  number = {5},
  pages = {489--506},
  doi = {10.1109/TSE.2017.2785841},
  langid = {english},
  keywords = {AFLFast,thesis (related work)},
  annotation = {GSCC: 0001169 2025-06-04T05:51:26.740Z \\
225 citations (Crossref/DOI) [2025-02-27]\\
GSCC: 0001115 2025-02-27T04:08:35.469Z \\
remark: 将覆盖引导模糊测试建模为马尔可夫链。},
  file = {D:\data\Zotero\storage\I42SV2A2\Böhme et al_2019_Coverage-based greybox fuzzing as markov chain2.pdf}
}

@inproceedings{bohmeDirectedGreyboxFuzzing2017,
  title = {Directed Greybox Fuzzing},
  booktitle = {Proceedings of the 2017 {{ACM Sigsac Conference}} on {{Computer}} and {{Communications Security}}},
  author = {B{\"o}hme, Marcel and Pham, Van-Thuan and Nguyen, Manh-Dung and Roychoudhury, Abhik},
  year = {2017},
  series = {{{CCS}} '17},
  pages = {2329--2344},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/3133956.3134020},
  abstract = {Existing Greybox Fuzzers (GF) cannot be effectively directed, for instance, towards problematic changes or patches, towards critical system calls or dangerous locations, or towards functions in the stack-trace of a reported vulnerability that we wish to reproduce. In this paper, we introduce Directed Greybox Fuzzing (DGF) which generates inputs with the objective of reaching a given set of target program locations efficiently. We develop and evaluate a simulated annealing-based power schedule that gradually assigns more energy to seeds that are closer to the target locations while reducing energy for seeds that are further away. Experiments with our implementation AFLGo demonstrate that DGF outperforms both directed symbolic-execution-based whitebox fuzzing and undirected greybox fuzzing. We show applications of DGF to patch testing and crash reproduction, and discuss the integration of AFLGo into Google's continuous fuzzing platform OSS-Fuzz. Due to its directedness, AFLGo could find 39 bugs in several well-fuzzed, security-critical projects like LibXML2. 17 CVEs were assigned.},
  isbn = {978-1-4503-4946-8},
  langid = {english},
  keywords = {coverage-based greybox fuzzing,crash reproduction,directed testing,patch testing,reachability,readed,thesis (related work),verifying true positives},
  annotation = {GSCC: 0000896 2025-03-02T06:55:30.144Z \\
463 citations (Crossref/DOI) [2025-02-27]\\
GSCC: 0000896 2025-03-02T06:55:30.144Z \\
TLDR: This paper introduces Directed Greybox Fuzzing (DGF) which generates inputs with the objective of reaching a given set of target program locations efficiently, and develops and evaluates a simulated annealing-based power schedule that gradually assigns more energy to seeds that are closer to the target locations while reducing energy for Seeds that are further away.\\
Read\_Status: Read\\
Read\_Status\_Date: 2025-01-25T07:26:41.975Z\\
remark: 提出定向灰盒模糊测试方法},
  file = {D:\data\Zotero\storage\V9UUYBXQ\Böhme et al. - 2017 - Directed greybox fuzzing.pdf}
}

@inproceedings{bohmeFuzzingExponentialCost2020,
  title = {Fuzzing: On the Exponential Cost of Vulnerability Discovery},
  booktitle = {Proceedings of the 28th {{ACM Joint Meeting}} on {{European Software Engineering Conference}} and {{Symposium}} on the {{Foundations}} of {{Software Engineering}}},
  author = {B{\"o}hme, Marcel and Falk, Brandon},
  year = {2020},
  series = {{{ESEC}}/{{FSE}} 2020},
  pages = {713--724},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/3368089.3409729},
  abstract = {We present counterintuitive results for the scalability of fuzzing. Given the same non-deterministic fuzzer, finding the same bugs linearly faster requires linearly more machines. For instance, with twice the machines, we can find all known bugs in half the time. Yet, finding linearly more bugs in the same time requires exponentially more machines. For instance, for every new bug we want to find in 24 hours, we might need twice more machines. Similarly for coverage. With exponentially more machines, we can cover the same code exponentially faster, but uncovered code only linearly faster. In other words, re-discovering the same vulnerabilities is cheap but finding new vulnerabilities is expensive. This holds even under the simplifying assumption of no parallelization overhead. We derive these observations from over four CPU years worth of fuzzing campaigns involving almost three hundred open source programs, two state-of-the-art greybox fuzzers, four measures of code coverage, and two measures of vulnerability discovery. We provide a probabilistic analysis and conduct simulation experiments to explain this phenomenon.},
  isbn = {978-1-4503-7043-1},
  langid = {english},
  keywords = {efficiency,fuzzing,scalability,software testing},
  annotation = {41 citations (Crossref/DOI) [2025-02-27]\\
GSCC: 0000076 \\
TLDR: These observations are derived from over four CPU years worth of fuzzing campaigns involving almost three hundred open source programs, two state-of-the-art greybox fuzzers, four measures of code coverage, and two measures of vulnerability discovery.\\
remark: 模糊测试发现新漏洞成本高},
  file = {D:\data\Zotero\storage\RVVMSFL9\Böhme and Falk - 2020 - Fuzzing On the exponential cost of vulnerability .pdf}
}

@inproceedings{bohmeReliabilityCoveragebasedFuzzer2022,
  title = {On the Reliability of Coverage-Based Fuzzer Benchmarking},
  booktitle = {Proceedings of the 44th International Conference on Software Engineering},
  author = {B{\"o}hme, Marcel and Szekeres, L{\'a}szl{\'o} and Metzman, Jonathan},
  year = {2022},
  series = {{{ICSE}} '22},
  pages = {1621--1633},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/3510003.3510230},
  abstract = {Given a program where none of our fuzzers finds any bugs, how do we know which fuzzer is better? In practice, we often look to code coverage as a proxy measure of fuzzer effectiveness and consider the fuzzer which achieves more coverage as the better one.Indeed, evaluating 10 fuzzers for 23 hours on 24 programs, we find that a fuzzer that covers more code also finds more bugs. There is a very strong correlation between the coverage achieved and the number of bugs found by a fuzzer. Hence, it might seem reasonable to compare fuzzers in terms of coverage achieved, and from that derive empirical claims about a fuzzer's superiority at finding bugs.Curiously enough, however, we find no strong agreement on which fuzzer is superior if we compared multiple fuzzers in terms of coverage achieved instead of the number of bugs found. The fuzzer best at achieving coverage, may not be best at finding bugs.},
  isbn = {978-1-4503-9221-1},
  langid = {american},
  annotation = {TLDR: It is found that a fuzzer that covers more code also finds more bugs, and there is no strong agreement on which fuzzer is superior if the authors compared multiple fuzzers in terms of coverage achieved instead of the number of bugs found.},
  file = {D:\data\Zotero\storage\Q2BYGPBI\Böhme et al. - 2022 - On the reliability of coverage-based fuzzer benchm.pdf}
}

@inproceedings{bottingerDeepReinforcementFuzzing2018,
  title = {Deep Reinforcement Fuzzing},
  booktitle = {2018 {{IEEE Security}} and {{Privacy Workshops}} (Spw)},
  author = {B{\"o}ttinger, Konstantin and Godefroid, Patrice and Singh, Rishabh},
  year = {2018},
  pages = {116--122},
  doi = {10.1109/SPW.2018.00026},
  langid = {english},
  keywords = {thesis (related work)},
  annotation = {GSCC: 0000147 2025-03-02T11:04:57.499Z \\
69 citations (Crossref/DOI) [2025-02-27]\\
GSCC: 0000147 \\
TLDR: This paper formalizes fuzzing as a reinforcement learning problem using the concept of Markov decision processes, which allows for state-of-the-art deep Q-learning algorithms that optimize rewards, which are defined from runtime properties of the program under test.\\
remark: 深度强化学习优化模糊测试},
  file = {D:\data\Zotero\storage\IGR47VVW\Böttinger et al. - 2018 - Deep reinforcement fuzzing.pdf}
}

@article{chafjiriVulnerabilityDetectionMachine2024,
  title = {Vulnerability Detection through Machine Learning-Based Fuzzing: {{A}} Systematic Review},
  author = {Chafjiri, Sadegh Bamohabbat and Legg, Phil and Hong, Jun and Tsompanas, Michail-Antisthenis I.},
  year = {2024},
  journal = {Computers \& Security},
  volume = {143},
  pages = {103903},
  doi = {10.1016/J.COSE.2024.103903},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  annotation = {GSCC: 0000004 2025-03-02T09:07:34.794Z \\
0 citations (Crossref/DOI) [2025-02-27]},
  timestamp = {Thu, 22 Aug 2024 20:25:15 +0200},
  file = {D:\data\Zotero\storage\C39NHETF\Chafjiri et al. - 2024 - Vulnerability detection through machine learning-based fuzzing A systematic review.pdf}
}

@inproceedings{chaProgramadaptiveMutationalFuzzing2015,
  title = {Program-Adaptive Mutational Fuzzing},
  booktitle = {2015 {{IEEE}} Symposium on Security and Privacy},
  author = {Cha, Sang Kil and Woo, Maverick and Brumley, David},
  year = {2015},
  pages = {725--741},
  doi = {10.1109/SP.2015.50},
  langid = {english},
  annotation = {GSCC: 0000340 2025-02-27T04:16:09.716Z \\
135 citations (Crossref/DOI) [2025-02-27]\\
127 citations (Crossref) [2024-03-31]\\
GSCC: 0000350 \\
TLDR: The design of an algorithm to maximize the number of bugs found for black-box mutational fuzzing given a program and a seed input is presented, and the result is promising: it finds an average of 38.6\% more bugs than three previous fuzzers over 8 applications using the same amount of fuzzing time.\\
Read\_Status: Read\\
Read\_Status\_Date: 2025-02-12T12:12:17.337Z\\
CCF: A},
  file = {D:\data\Zotero\storage\PXCG9SP5\Cha et al. - 2015 - Program-adaptive mutational fuzzing.pdf}
}

@inproceedings{chenAngoraEfficientFuzzing2018,
  title = {Angora: Efficient Fuzzing by Principled Search},
  booktitle = {2018 {{IEEE Symposium}} on {{Security}} and {{Privacy}} (Sp)},
  author = {Chen, Peng and Chen, Hao},
  year = {2018},
  pages = {711--725},
  doi = {10.1109/SP.2018.00046},
  langid = {english},
  keywords = {/UR,thesis (related work)},
  annotation = {GSCC: 0000696 2025-02-27T04:16:49.151Z \\
315 citations (Crossref/DOI) [2025-02-27]\\
GSCC: 0000696 \\
TLDR: This work proposes Angora, a new mutation-based fuzzer that outperforms the state-of-the-art fuzzers by a wide margin, and introduces several key techniques: scalable byte-level taint tracking, context-sensitive branch count, search based on gradient descent, and input length exploration.\\
remark: Angora提升模糊测试效率。\\
Read\_Status: Read\\
Read\_Status\_Date: 2025-02-17T03:03:31.129Z\\
CCF: A},
  file = {D:\data\Zotero\storage\DLLHREBI\Chen and Chen - 2018 - Angora Efficient fuzzing by principled search.pdf}
}

@inproceedings{chenMUZZThreadawareGreybox2020,
  title = {{{MUZZ}}: {{Thread-aware}} Grey-Box Fuzzing for Effective Bug Hunting in Multithreaded Programs},
  booktitle = {29th {{USENIX}} Security Symposium ({{USENIX}} Security 20)},
  author = {Chen, Hongxu and Guo, Shengjian and Xue, Yinxing and Sui, Yulei and Zhang, Cen and Li, Yuekang and Wang, Haijun and Liu, Yang},
  year = {2020},
  month = aug,
  pages = {2325--2342},
  publisher = {USENIX Association},
  isbn = {978-1-939133-17-5},
  file = {D:\data\Zotero\storage\5HXJ74NM\Chen et al_2020_MUZZ.pdf}
}

@inproceedings{chenNovelCoverageguidedGreybox2023,
  title = {A Novel Coverage-Guided Greybox Fuzzing Based on Power Schedule Optimization with Time Complexity},
  booktitle = {Proceedings of the 37th {{IEEE}}/{{ACM}} International Conference on Automated Software Engineering},
  author = {Chen, Jinfu and Wang, Shengran and Cai, Saihua and Zhang, Chi and Chen, Haibo and Chen, Jingyi and Zhang, Jianming},
  year = {2023},
  series = {{{ASE}} '22},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/3551349.3559550},
  abstract = {Coverage-guided Greybox fuzzing is regarded as a practical approach to detect software vulnerabilities, which targets to expand code coverage as much as possible. A common implementation is to assign more energy to such seeds which find new edges with less execution time. However, solely considering new edges may be less effective because some hard-to-find branches often exist in the complex code of program. Code complexity is one of the key indicators to measure the code security. Compared to the code with simple structure, the program with higher code complexity is more likely to find more branches and cause security problems. In this paper, we propose a novel fuzzing method which further uses code complexity to optimize power schedule process in AFL (American Fuzzy Lop) and AFLFAST (American Fuzzy Lop Fast). The goal of our method is to generate inputs which are more biased toward the code with higher complexity of the program under test. In addition, we conduct a preliminary empirical study under three widely used real-world programs, and the experimental results show that the proposed approach can trigger more crashes as well as improve the coverage discovery.},
  articleno = {172},
  isbn = {978-1-4503-9475-8},
  langid = {american},
  keywords = {fuzzing,information,power schedule,scheduling,software vulnerability,time complexity},
  annotation = {GSCC: 0000002 2025-06-04T05:50:49.802Z \\
1 citations (Crossref/DOI) [2025-02-27]\\
0 citations (Crossref) [2024-03-31]\\
GSCC: 0000002 \\
TLDR: A novel fuzzing method which further uses code complexity to optimize power schedule process in AFL and AFLFAST (American Fuzzy Lop Fast) and the experimental results show that the proposed approach can trigger more crashes as well as improve the coverage discovery.\\
remark: 基于代码复杂度的模糊测试优化},
  file = {D:\data\Zotero\storage\YSFKMUP8\Chen et al_2023_A novel coverage-guided greybox fuzzing based on power schedule optimization.pdf}
}

@inproceedings{chenSYMSANTimeSpace2022,
  title = {{{SYMSAN}}: {{Time}} and Space Efficient Concolic Execution via Dynamic Data-Flow Analysis},
  booktitle = {31st {{USENIX}} Security Symposium, {{USENIX}} Security 2022, Boston, {{MA}}, {{USA}}, August 10-12, 2022},
  author = {Chen, Ju and Han, Wookhyun and Yin, Mingjun and Zeng, Haochen and Song, Chengyu and Lee, Byoungyoung and Yin, Heng and Shin, Insik},
  editor = {Butler, Kevin R. B. and Thomas, Kurt},
  year = {2022},
  pages = {2531--2548},
  publisher = {USENIX Association},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  annotation = {GSCC: 0000033 2025-03-02T08:14:42.777Z \\
Read\_Status: In Progress\\
Read\_Status\_Date: 2025-02-09T07:22:22.072Z},
  timestamp = {Sat, 17 Dec 2022 01:15:30 +0100},
  file = {D:\data\Zotero\storage\YJGPTJHF\Chen et al_2022_SYMSAN.pdf}
}

@inproceedings{chenTopKOffpolicyCorrection2019,
  title = {Top-{{K}} off-Policy Correction for a {{REINFORCE}} Recommender System},
  booktitle = {Proceedings of the Twelfth {{ACM}} International Conference on Web Search and Data Mining, {{WSDM}} 2019, Melbourne, {{VIC}}, Australia, February 11-15, 2019},
  author = {Chen, Minmin and Beutel, Alex and Covington, Paul and Jain, Sagar and Belletti, Francois and Chi, Ed H.},
  editor = {Culpepper, J. Shane and Moffat, Alistair and Bennett, Paul N. and Lerman, Kristina},
  year = {2019},
  pages = {456--464},
  publisher = {ACM},
  doi = {10.1145/3289600.3290999},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/conf/wsdm/ChenBCJBC19.bib},
  timestamp = {Sat, 30 May 2020 20:02:29 +0200},
  file = {D:\data\Zotero\storage\CXLEU596\Chen et al. - 2019 - Top-K off-policy correction for a REINFORCE recomm.pdf}
}

@inproceedings{christianoDeepReinforcementLearning2017,
  title = {Deep Reinforcement Learning from Human Preferences},
  booktitle = {Advances in Neural Information Processing Systems},
  author = {Christiano, Paul F and Leike, Jan and Brown, Tom and Martic, Miljan and Legg, Shane and Amodei, Dario},
  editor = {Guyon, I. and Luxburg, U. Von and Bengio, S. and Wallach, H. and Fergus, R. and Vishwanathan, S. and Garnett, R.},
  year = {2017},
  volume = {30},
  publisher = {Curran Associates, Inc.}
}

@misc{ClusterFuzz,
  title = {{{ClusterFuzz}}},
  journal = {ClusterFuzz},
  urldate = {2024-12-25},
  abstract = {Documentation for ClusterFuzz},
  howpublished = {https://google.github.io/clusterfuzz/},
  langid = {american},
  file = {D:\data\Zotero\storage\4D9GL86F\clusterfuzz.html}
}

@misc{Codeforces,
  title = {Codeforces},
  journal = {Codeforces},
  urldate = {2024-03-12},
  abstract = {Codeforces. Programming competitions and contests, programming community},
  howpublished = {https://codeforces.com/},
  langid = {english},
  file = {D:\data\Zotero\storage\LGNSX34V\codeforces.com.html}
}

@misc{cumminsProGraMLGraphbasedDeep2020,
  title = {{{ProGraML}}: {{Graph-based}} Deep Learning for Program Optimization and Analysis},
  author = {Cummins, Chris and Fisches, Zacharias V. and {Ben-Nun}, Tal and Hoefler, Torsten and Leather, Hugh},
  year = {2020},
  eprint = {2003.10536},
  primaryclass = {cs.LG},
  archiveprefix = {arXiv},
  file = {D:\data\Zotero\storage\BKJ5MTKJ\Cummins et al_2020_ProGraML.pdf}
}

@inproceedings{cumminsProGraMLGraphbasedProgram2021a,
  title = {{{ProGraML}}: {{A}} Graph-Based Program Representation for Data Flow Analysis and Compiler Optimizations},
  booktitle = {Proceedings of the 38th International Conference on Machine Learning},
  author = {Cummins, Chris and Fisches, Zacharias V. and {Ben-Nun}, Tal and Hoefler, Torsten and O'Boyle, Michael F P and Leather, Hugh},
  editor = {Meila, Marina and Zhang, Tong},
  year = {2021},
  month = jul,
  series = {Proceedings of Machine Learning Research},
  volume = {139},
  pages = {2244--2253},
  publisher = {PMLR},
  abstract = {Machine learning (ML) is increasingly seen as a viable approach for building compiler optimization heuristics, but many ML methods cannot replicate even the simplest of the data flow analyses that are critical to making good optimization decisions. We posit that if ML cannot do that, then it is insufficiently able to reason about programs. We formulate data flow analyses as supervised learning tasks and introduce a large open dataset of programs and their corresponding labels from several analyses. We use this dataset to benchmark ML methods and show that they struggle on these fundamental program reasoning tasks. We propose ProGraML - Program Graphs for Machine Learning - a language-independent, portable representation of program semantics. ProGraML overcomes the limitations of prior works and yields improved performance on downstream optimization tasks.},
  file = {D:\data\Zotero\storage\D6X5J9WV\Cummins et al_2021_ProGraML.pdf}
}

@inproceedings{cutkoskyDynamicBalancingModel2021,
  title = {Dynamic Balancing for Model Selection in Bandits and {{RL}}},
  booktitle = {Proceedings of the 38th {{International Conference}} on {{Machine Learning}}},
  author = {Cutkosky, Ashok and Dann, Christoph and Das, Abhimanyu and Gentile, Claudio and Pacchiano, Aldo and Purohit, Manish},
  editor = {Meila, Marina and Zhang, Tong},
  year = {2021},
  month = jul,
  series = {Proceedings of Machine Learning Research},
  volume = {139},
  pages = {2276--2285},
  publisher = {PMLR},
  abstract = {We propose a framework for model selection by combining base algorithms in stochastic bandits and reinforcement learning. We require a candidate regret bound for each base algorithm that may or may not hold. We select base algorithms to play in each round using a ``balancing condition'' on the candidate regret bounds. Our approach simultaneously recovers previous worst-case regret bounds, while also obtaining much smaller regret in natural scenarios when some base learners significantly exceed their candidate bounds. Our framework is relevant in many settings, including linear bandits and MDPs with nested function classes, linear bandits with unknown misspecification, and tuning confidence parameters of algorithms such as LinUCB. Moreover, unlike recent efforts in model selection for linear stochastic bandits, our approach can be extended to consider adversarial rather than stochastic contexts.},
  langid = {english},
  keywords = {/unread}
}

@inproceedings{DBLP:conf/acl/ZhaoRGHC23,
  title = {Understanding Programs by Exploiting (Fuzzing) Test Cases},
  booktitle = {Findings of the {{Association}} for {{Computational Linguistics}}: {{Acl}} 2023, {{Toronto}}, {{Canada}}, {{July}} 9-14, 2023},
  author = {Zhao, Jianyu and Rong, Yuyang and Guo, Yiwen and He, Yifeng and Chen, Hao},
  editor = {Rogers, Anna and {Boyd-Graber}, Jordan L. and Okazaki, Naoaki},
  year = {2023},
  pages = {10667--10679},
  publisher = {Association for Computational Linguistics},
  doi = {10.18653/V1/2023.FINDINGS-ACL.678},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  langid = {english},
  annotation = {2 citations (Crossref/DOI) [2025-02-27]\\
1 citations (Crossref) [2024-03-31]\\
GSCC: 0000018 \\
remark: 基于模糊测试的程序理解方法},
  timestamp = {Fri, 22 Sep 2023 12:43:46 +0200},
  file = {D:\data\Zotero\storage\4Q2YWGP7\Zhao et al_2023_Understanding programs by exploiting (fuzzing) test cases.pdf}
}

@inproceedings{DBLP:conf/ndss/BulekovDHE23,
  title = {No Grammar, No Problem: {{Towards}} Fuzzing the Linux Kernel without System-Call Descriptions},
  booktitle = {30th Annual Network and Distributed System Security Symposium, {{NDSS}} 2023, San Diego, California, {{USA}}, February 27 - March 3, 2023},
  author = {Bulekov, Alexander and Das, Bandan and Hajnoczi, Stefan and Egele, Manuel},
  year = {2023},
  publisher = {The Internet Society},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/conf/ndss/BulekovDHE23.bib},
  timestamp = {Thu, 16 Mar 2023 14:57:04 +0100},
  file = {D:\data\Zotero\storage\IRN3X76D\Bulekov et al. - 2023 - No grammar, no problem Towards fuzzing the linux .pdf}
}

@inproceedings{DBLP:conf/uss/JiangBL020,
  title = {Fuzzing Error Handling Code Using Context-Sensitive Software Fault Injection},
  booktitle = {29th {{Usenix Security Symposium}}, {{Usenix Security}} 2020, {{August}} 12-14, 2020},
  author = {Jiang, Zu-Ming and Bai, Jia-Ju and Lu, Kangjie and Hu, Shi-Min},
  editor = {Capkun, Srdjan and Roesner, Franziska},
  year = {2020},
  pages = {2595--2612},
  publisher = {USENIX Association},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/conf/uss/JiangBL020.bib},
  langid = {english},
  annotation = {GSCC: 0000050 \\
remark: 模糊测试错误处理代码},
  timestamp = {Fri, 29 Jan 2021 22:08:56 +0100},
  file = {D:\data\Zotero\storage\2EV9EJ4A\Jiang et al. - 2020 - Fuzzing error handling code using context-sensitiv.pdf}
}

@inproceedings{DBLP:conf/uss/KandeCPJSTR22,
  title = {{{TheHuzz}}: {{Instruction}} Fuzzing of Processors Using Golden-Reference Models for Finding Software-Exploitable Vulnerabilities},
  booktitle = {31st {{USENIX}} Security Symposium, {{USENIX}} Security 2022, Boston, {{MA}}, {{USA}}, August 10-12, 2022},
  author = {Kande, Rahul and Crump, Addison and Persyn, Garrett and Jauernig, Patrick and Sadeghi, Ahmad-Reza and Tyagi, Aakash and Rajendran, Jeyavijayan},
  editor = {Butler, Kevin R. B. and Thomas, Kurt},
  year = {2022},
  pages = {3219--3236},
  publisher = {USENIX Association},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/conf/uss/KandeCPJSTR22.bib},
  timestamp = {Tue, 18 Oct 2022 17:10:36 +0200},
  file = {D:\data\Zotero\storage\ZH8TQUHF\Kande et al. - 2022 - TheHuzz Instruction fuzzing of processors using g.pdf}
}

@inproceedings{dengLargeLanguageModels2023,
  title = {Large Language Models Are Zero-Shot Fuzzers: {{Fuzzing}} Deep-Learning Libraries via Large Language Models},
  booktitle = {Proceedings of the 32nd {{ACM SIGSOFT}} International Symposium on Software Testing and Analysis},
  author = {Deng, Yinlin and Xia, Chunqiu Steven and Peng, Haoran and Yang, Chenyuan and Zhang, Lingming},
  year = {2023},
  series = {{{ISSTA}} 2023},
  pages = {423--435},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/3597926.3598067},
  abstract = {Deep Learning (DL) systems have received exponential growth in popularity and have become ubiquitous in our everyday life. Such systems are built on top of popular DL libraries, e.g., TensorFlow and PyTorch which provide APIs as building blocks for DL systems. Detecting bugs in these DL libraries is critical for almost all downstream DL systems in ensuring effectiveness/safety for end users. Meanwhile, traditional fuzzing techniques can be hardly effective for such a challenging domain since the input DL programs need to satisfy both the input language (e.g., Python) syntax/semantics and the DL API input/shape constraints for tensor computations. To address these limitations, we propose TitanFuzz -- the first approach to directly leveraging Large Language Models (LLMs) to generate input programs for fuzzing DL libraries. LLMs are titanic models trained on billions of code snippets and can autoregressively generate human-like code snippets. Our key insight is that modern LLMs can also include numerous code snippets invoking DL library APIs in their training corpora, and thus can implicitly learn both language syntax/semantics and intricate DL API constraints for valid DL program generation. More specifically, we use both generative and infilling LLMs (e.g., Codex/InCoder) to generate and mutate valid/diverse input DL programs for fuzzing. Our experimental results demonstrate that TitanFuzz can achieve 30.38\%/50.84\% higher code coverage than state-of-the-art fuzzers on TensorFlow/PyTorch. Furthermore, TitanFuzz is able to detect 65 bugs, with 44 already confirmed as previously unknown bugs. This paper demonstrates that modern titanic LLMs can be leveraged to directly perform both generation-based and mutation-based fuzzing studied for decades, while being fully automated, generalizable, and applicable to domains challenging for traditional approaches (such as DL systems). We hope TitanFuzz can stimulate more work in this promising direction of LLMs for fuzzing.},
  isbn = {979-8-4007-0221-1},
  keywords = {Fuzz Testing,Large Language Model,Test Generation},
  annotation = {83 citations (Crossref/DOI) [2025-02-27]\\
9 citations (Crossref) [2024-03-31]},
  file = {D:\data\Zotero\storage\2RU3SPFY\Deng et al. - 2023 - Large language models are zero-shot fuzzers Fuzzi.pdf}
}

@inproceedings{dengNestFuzzEnhancingFuzzing2023,
  title = {{{NestFuzz}}: {{Enhancing}} Fuzzing with Comprehensive Understanding of Input Processing Logic},
  booktitle = {Proceedings of the 2023 {{ACM SIGSAC}} Conference on Computer and Communications Security},
  author = {Deng, Peng and Yang, Zhemin and Zhang, Lei and Yang, Guangliang and Hong, Wenzheng and Zhang, Yuan and Yang, Min},
  year = {2023},
  series = {{{CCS}} '23},
  pages = {1272--1286},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/3576915.3623103},
  abstract = {Fuzzing is one of the most popular and practical techniques for security analysis. In this work, we aim to address the critical problem of high-quality input generation with a novel input-aware fuzzing approach called NestFuzz. NestFuzz can universally and automatically model input format specifications and generate valid input.The key observation behind NestFuzz is that the code semantics of the target program always highly imply the required input formats. Hence, NestFuzz applies fine-grained program analysis to understand the input processing logic, especially the dependencies across different input fields and substructures. To this end, we design a novel data structure, namely Input Processing Tree, and a new cascading dependency-aware mutation strategy to drive the fuzzing. Our evaluation of 20 intensively-tested popular programs shows that NestFuzz is effective and practical. In comparison with the state-of-the-art fuzzers (AFL, AFLFast, AFL++, MOpt, AFLSmart, WEIZZ, ProFuzzer, and TIFF), NestFuzz achieves outperformance in terms of both code coverage and security vulnerability detection. NestFuzz finds 46 vulnerabilities that are both unique and serious. Until the moment this paper is written, 39 have been confirmed and 37 have been assigned with CVE-ids.},
  isbn = {979-8-4007-0050-7},
  keywords = {code coverage,fuzzing,structure-aware,vulnerability},
  annotation = {2 citations (Crossref/DOI) [2025-02-27]\\
0 citations (Crossref) [2024-03-31]\\
TLDR: This work designs a novel data structure, namely Input Processing Tree, and a new cascading dependency-aware mutation strategy to drive the fuzzing of NestFuzz, which can universally and automatically model input format specifications and generate valid input.},
  file = {D:\data\Zotero\storage\BNRUX5GY\Deng et al_2023_NestFuzz.pdf}
}

@inproceedings{devlinBERTPretrainingDeep2019,
  title = {{{BERT}}: {{Pre-training}} of Deep Bidirectional Transformers for Language Understanding},
  booktitle = {Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: {{Human}} Language Technologies, {{NAACL-HLT}} 2019, Minneapolis, {{MN}}, {{USA}}, June 2-7, 2019, Volume 1 (Long and Short Papers)},
  author = {Devlin, Jacob and Chang, Ming-Wei and Lee, Kenton and Toutanova, Kristina},
  editor = {Burstein, Jill and Doran, Christy and Solorio, Thamar},
  year = {2019},
  pages = {4171--4186},
  publisher = {Association for Computational Linguistics},
  doi = {10.18653/v1/n19-1423},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/conf/naacl/DevlinCLT19.bib},
  langid = {american},
  keywords = {Computation and Language (cs.CL),FOS: Computer and information sciences},
  annotation = {2037 citations (Crossref) [2024-03-31]\\
TLDR: A new language representation model, BERT, designed to pre-train deep bidirectional representations from unlabeled text by jointly conditioning on both left and right context in all layers, which can be fine-tuned with just one additional output layer to create state-of-the-art models for a wide range of tasks.},
  timestamp = {Mon, 26 Sep 2022 12:21:55 +0200},
  file = {D:\data\Zotero\storage\WZPSKFW3\BERT Pre-training of Deep Bidirectional Transformers for Language Understanding.pdf}
}

@inproceedings{dolan-gavittLAVALargescaleAutomated2016,
  title = {{{LAVA}}: {{Large-scale}} Automated Vulnerability Addition},
  booktitle = {2016 {{IEEE}} Symposium on Security and Privacy ({{SP}})},
  author = {{Dolan-Gavitt}, Brendan and Hulin, Patrick and Kirda, Engin and Leek, Tim and Mambretti, Andrea and Robertson, Wil and Ulrich, Frederick and Whelan, Ryan},
  year = {2016},
  pages = {110--121},
  doi = {10.1109/SP.2016.15},
  annotation = {TLDR: LAVA, a novel dynamic taint analysis-based technique for producing ground-truth corpora by quickly and automatically injecting large numbers of realistic bugs into program source code, forms the basis of an approach for generating large ground- Truth vulnerability corpora on demand, enabling rigorous tool evaluation and providing a high-quality target for tool developers.},
  file = {D:\data\Zotero\storage\U8ELMQX3\Dolan-Gavitt et al. - 2016 - LAVA Large-scale automated vulnerability addition.pdf}
}

@misc{drozdFuzzerGymCompetitiveFramework2018,
  title = {{{FuzzerGym}}: A Competitive Framework for Fuzzing and Learning},
  author = {Drozd, William and Wagner, Michael D.},
  year = {2018},
  publisher = {arXiv},
  doi = {10.48550/ARXIV.1807.07490},
  copyright = {arXiv.org perpetual, non-exclusive license},
  langid = {english},
  keywords = {Artificial Intelligence (cs.AI),FOS: Computer and information sciences,Machine Learning (cs.LG),Software Engineering (cs.SE)},
  annotation = {GSCC: 0000042 \\
remark: 强化学习优化模糊测试},
  file = {D:\data\Zotero\storage\RCH8ZYRY\Drozd and Wagner - 2018 - FuzzerGym A competitive framework for fuzzing and.pdf}
}

@inproceedings{duWindRangerDirectedGreybox2022,
  title = {{{WindRanger}}: {{A}} Directed Greybox Fuzzer Driven by Deviation Basic Blocks},
  booktitle = {Proceedings of the 44th International Conference on Software Engineering},
  author = {Du, Zhengjie and Li, Yuekang and Liu, Yang and Mao, Bing},
  year = {2022},
  series = {{{ICSE}} '22},
  pages = {2440--2451},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/3510003.3510197},
  abstract = {Directed grey-box fuzzing (DGF) is a security testing technique that aims to steer the fuzzer towards predefined target sites in the program. To gain directedness, DGF prioritizes the seeds whose execution traces are closer to the target sites. Therefore, evaluating the distance between the execution trace of a seed and the target sites (aka, the seed distance) is important for DGF. The first directed grey-box fuzzer, AFLGo, uses an approach of calculating the basic block level distances during static analysis and accumulating the distances of the executed basic blocks to compute the seed distance. Following AFLGo, most of the existing state-of-the-art DGF techniques use all the basic blocks on the execution trace and only the control flow information for seed distance calculation. However, not every basic block is equally important and there are certain basic blocks where the execution trace starts to deviate from the target sites (aka, deviation basic blocks).In this paper, we propose a technique called WindRanger which leverages deviation basic blocks to facilitate DGF. To identify the deviation basic blocks, WindRanger applies both static reachability analysis and dynamic filtering. To conduct directed fuzzing, WindRanger uses the deviation basic blocks and their related data flow information for seed distance calculation, mutation, seed prioritization as well as explore-exploit scheduling. We evaluated WindRanger on 3 datasets consisting of 29 programs. The experiment results show that WindRanger outperforms AFLGo, AFL, and FairFuzz by reaching the target sites 21\%, 34\%, and 37\% faster and detecting the target crashes 44\%, 66\%, and 77\% faster respectively. Moreover, we found a 0-day vulnerability with a CVE ID assigned in ffmpeg (a popular multimedia library extensively fuzzed by OSS-fuzz) with WindRanger by supplying manually identified suspect locations as the target sites.},
  isbn = {978-1-4503-9221-1},
  langid = {american},
  keywords = {directed testing,fuzz testing,fuzzing},
  annotation = {GSCC: 0000066 2025-03-02T06:55:22.255Z \\
14 citations (Crossref) [2024-03-31]\\
TLDR: Windranger is a directed fuzzing technique which leverages deviation basic blocks and their related data flow information for seed distance calculation, mutation, seed prioritization as well as explore-exploit scheduling.\\
remark: WindRanger利用偏差基本块优化灰盒模糊测试\\
Read\_Status: Only AI-summary\\
Read\_Status\_Date: 2025-04-05T02:46:15.592Z},
  file = {D:\data\Zotero\storage\UEEX94XI\Du et al_2022_WindRanger.pdf}
}

@book{efronJackknifeBootstrapOther1982,
  title = {The Jackknife, the Bootstrap and Other Resampling Plans},
  author = {Efron, Bradley},
  year = {1982},
  publisher = {SIAM}
}

@inproceedings{eomFuzzingJavaScriptInterpreters2024,
  title = {Fuzzing {{JavaScript}} Interpreters with Coverage-Guided Reinforcement Learning for {{LLM-based}} Mutation},
  booktitle = {Proceedings of the 33rd {{ACM SIGSOFT}} International Symposium on Software Testing and Analysis},
  author = {Eom, Jueon and Jeong, Seyeon and Kwon, Taekyoung},
  year = {2024},
  series = {Issta 2024},
  pages = {1656--1668},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/3650212.3680389},
  abstract = {JavaScript interpreters, crucial for modern web browsers, require an effective fuzzing method to identify security-related bugs. However, the strict grammatical requirements for input present significant challenges. Recent efforts to integrate language models for context- aware mutation in fuzzing are promising but lack the necessary coverage guidance to be fully effective. This paper presents a novel technique called CovRL (Coverage-guided Reinforcement Learning) that combines Large Language Models (LLMs) with Reinforcement Learning (RL) from coverage feedback. Our fuzzer, CovRL-Fuzz, integrates coverage feedback directly into the LLM by leveraging the Term Frequency-Inverse Document Frequency (TF-IDF) method to construct a weighted coverage map. This map is key in calculating the fuzzing reward, which is then applied to the LLM-based mutator through reinforcement learning. CovRL-Fuzz, through this approach, enables the generation of test cases that are more likely to discover new coverage areas, thus improving bug detection while minimizing syntax and semantic errors, all without needing extra post-processing. Our evaluation results show that CovRL-Fuzz outperforms the state-of-the-art fuzzers in enhancing code coverage and identifying bugs in JavaScript interpreters: CovRL-Fuzz identified 58 real-world security-related bugs in the latest JavaScript interpreters, including 50 previously unknown bugs and 15 CVEs.},
  isbn = {979-8-4007-0612-7},
  langid = {american},
  keywords = {coverage,fuzzing,large language model,reinforcement learning},
  annotation = {0 citations (Crossref/DOI) [2025-02-27]\\
GSCC: 0000003 2025-03-02T09:07:38.509Z \\
TLDR: The evaluation results show that CovRL-Fuzz outperforms the state-of-the-art fuzzers in enhancing code coverage and identifying bugs in JavaScript interpreters: CovRL-Fuzz identified 58 real-world security-related bugs in the latest JavaScript interpreters, including 50 previously unknown bugs and 15 CVEs.},
  file = {D:\data\Zotero\storage\5JV8E6ZJ\Eom et al. - 2024 - Fuzzing JavaScript interpreters with coverage-guided reinforcement learning for LLM-based mutation.pdf}
}

@inproceedings{fangDDGFDynamicDirected2024,
  title = {{{DDGF}}: {{Dynamic}} Directed Greybox Fuzzing with Path Profiling},
  booktitle = {Proceedings of the 33rd {{ACM SIGSOFT}} International Symposium on Software Testing and Analysis},
  author = {Fang, Haoran and Zhang, Kaikai and Yu, Donghui and Zhang, Yuanyuan},
  year = {2024},
  series = {Issta 2024},
  pages = {832--843},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/3650212.3680324},
  abstract = {Coverage-Guided Fuzzing (CGF) has become the most popular and effective method for vulnerability detection. It is usually designed as an automated ``black-box'' tool. Security auditors start it and then just wait for the results. However, after a period of testing, CGF struggles to find new coverage gradually, thus making it inefficient. It is difficult for users to explain reasons that prevent fuzzing from making further progress and to determine whether the existing coverage is sufficient. In addition, there is no way to interact and direct the fuzzing process. In this paper, we design the dynamic directed greybox fuzzing (DDGF) to facilitate collaboration between the user and fuzzer. By leveraging Ball-Larus path profiling algorithm, we propose two new techniques: dynamic introspection and dynamic direction. Dynamic introspection reveals the significant imbalance in the distribution of path frequency through encoding and decoding. Based on the insight from introspection, users can dynamically direct the fuzzer to focus testing on the selected paths in real time. We implement DDGF based on AFL++. Experiments on Magma show that DDGF is effective in helping the fuzzer to reproduce vulnerabilities faster, with up to 100x speedup and only 13\% performance overhead. DDGF shows the great potential of human-in-the-loop for fuzzing.},
  isbn = {979-8-4007-0612-7},
  langid = {american},
  keywords = {Directed Fuzzing,Human-in-the-Loop,Introspection,Profiling},
  annotation = {GSCC: 0000000 2025-04-05T01:47:44.833Z \\
0 citations (Crossref/DOI) [2025-02-27]\\
GSCC: 0000000 2025-04-05T01:47:44.833Z \\
TLDR: The dynamic directed greybox fuzzing (DDGF) is designed to facilitate collaboration between the user and fuzzer to facilitate collaboration between the user and fuzzer and shows the great potential of human-in-the-loop for fuzzing.\\
Read\_Status: Only AI-summary\\
Read\_Status\_Date: 2025-04-06T07:53:33.787Z},
  file = {D:\data\Zotero\storage\4T85RPS7\Fang et al. - 2024 - DDGF Dynamic directed greybox fuzzing with path profiling.pdf}
}

@misc{FaramafoundationGymnasiumAPI,
  title = {Farama-Foundation/Gymnasium: An {{API}} Standard for Single-Agent Reinforcement Learning Environments, with Popular Reference Environments and Related Utilities (Formerly Gym)},
  urldate = {2025-05-29},
  howpublished = {https://github.com/Farama-Foundation/Gymnasium},
  langid = {english},
  keywords = {/unread},
  file = {D:\data\Zotero\storage\QTSJNQ7I\Gymnasium.html}
}

@inproceedings{fengCodeBERTPretrainedModel2020,
  title = {{{CodeBERT}}: A Pre-Trained Model for Programming and Natural Languages},
  booktitle = {Findings of the Association for Computational Linguistics: {{EMNLP}} 2020, Online Event, 16-20 November 2020},
  author = {Feng, Zhangyin and Guo, Daya and Tang, Duyu and Duan, Nan and Feng, Xiaocheng and Gong, Ming and Shou, Linjun and Qin, Bing and Liu, Ting and Jiang, Daxin and Zhou, Ming},
  editor = {Cohn, Trevor and He, Yulan and Liu, Yang},
  year = {2020},
  series = {Findings of {{ACL}}},
  volume = {EMNLP 2020},
  pages = {1536--1547},
  publisher = {Association for Computational Linguistics},
  doi = {10.18653/v1/2020.findings-emnlp.139},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/conf/emnlp/FengGTDFGS0LJZ20.bib},
  langid = {english},
  annotation = {TLDR: This work develops CodeBERT with Transformer-based neural architecture, and trains it with a hybrid objective function that incorporates the pre-training task of replaced token detection, which is to detect plausible alternatives sampled from generators.},
  timestamp = {Wed, 23 Mar 2022 10:11:55 +0100},
  file = {D:\data\Zotero\storage\F9QCY2MN\Feng et al_2020_CodeBERT.pdf}
}

@article{fengSizzlerSequentialFuzzing2024,
  title = {Sizzler: {{Sequential}} Fuzzing in Ladder Diagrams for Vulnerability Detection and Discovery in Programmable Logic Controllers},
  author = {Feng, Kai and Cook, Marco M. and Marnerides, Angelos K.},
  year = {2024},
  journal = {IEEE Transactions on Information Forensics and Security},
  volume = {19},
  pages = {1660--1671},
  doi = {10.1109/TIFS.2023.3340615},
  keywords = {Codes,Emulation,fuzzing,Fuzzing,Hardware,Industrial control systems,Integrated circuits,Microprogramming,programmable logic controllers,Protocols,vulnerability discovery},
  annotation = {2 citations (Crossref/DOI) [2025-02-27]\\
0 citations (Crossref) [2024-03-31]},
  file = {D:\data\Zotero\storage\78MXAI4Q\Feng et al_2024_Sizzler.pdf}
}

@inproceedings{fioraldiAFLCombiningIncremental2020,
  title = {{{AFL}}++ : Combining Incremental Steps of Fuzzing Research},
  booktitle = {14th {{Usenix Workshop}} on {{Offensive Technologies}} (Woot 20)},
  author = {Fioraldi, Andrea and Maier, Dominik and Ei{\ss}feldt, Heiko and Heuse, Marc},
  year = {2020},
  month = aug,
  publisher = {USENIX Association},
  langid = {english},
  annotation = {GSCC: 0000726 \\
remark: AFL++整合并优化了最新模糊测试技术。},
  file = {D:\data\Zotero\storage\Q9VFINVP\Fioraldi et al_2020_AFL++.pdf}
}

@inproceedings{fioraldiUseLikelyInvariants2021,
  title = {The Use of Likely Invariants as Feedback for Fuzzers},
  booktitle = {30th {{USENIX}} Security Symposium, {{USENIX}} Security 2021, August 11-13, 2021},
  author = {Fioraldi, Andrea and D'Elia, Daniele Cono and Balzarotti, Davide},
  editor = {Bailey, Michael and Greenstadt, Rachel},
  year = {2021},
  pages = {2829--2846},
  publisher = {USENIX Association},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/conf/uss/FioraldiDB21.bib},
  langid = {english},
  annotation = {GSCC: 0000053 \\
remark: "论文探讨了可能的不变量作为模糊器反馈的使用方法。''\\
Read\_Status: Not Reading\\
Read\_Status\_Date: 2025-02-11T13:13:28.521Z},
  timestamp = {Thu, 16 Sep 2021 17:32:10 +0200},
  file = {D:\data\Zotero\storage\G3KR4SHY\Fioraldi et al. - 2021 - The use of likely invariants as feedback for fuzze.pdf}
}

@article{fontesIntegrationMachineLearning2023,
  title = {The Integration of Machine Learning into Automated Test Generation: {{A}} Systematic Mapping Study},
  shorttitle = {The Integration of Machine Learning into Automated Test Generation},
  author = {Fontes, Afonso and Gay, Gregory},
  year = {2023},
  journal = {Software Testing, Verification and Reliability},
  volume = {33},
  number = {4},
  pages = {e1845},
  issn = {1099-1689},
  doi = {10.1002/stvr.1845},
  urldate = {2024-09-25},
  abstract = {Machine learning (ML) may enable effective automated test generation. We characterize emerging research, examining testing practices, researcher goals, ML techniques applied, evaluation, and challenges in this intersection by performing. We perform a systematic mapping study on a sample of 124 publications. ML generates input for system, GUI, unit, performance, and combinatorial testing or improves the performance of existing generation methods. ML is also used to generate test verdicts, property-based, and expected output oracles. Supervised learning---often based on neural networks---and reinforcement learning---often based on Q-learning---are common, and some publications also employ unsupervised or semi-supervised learning. (Semi-/Un-)Supervised approaches are evaluated using both traditional testing metrics and ML-related metrics (e.g., accuracy), while reinforcement learning is often evaluated using testing metrics tied to the reward function. The work-to-date shows great promise, but there are open challenges regarding training data, retraining, scalability, evaluation complexity, ML algorithms employed---and how they are applied---benchmarks, and replicability. Our findings can serve as a roadmap and inspiration for researchers in this field.},
  copyright = {{\copyright} 2023 The Authors. Software Testing, Verification \& Reliability published by John Wiley \& Sons Ltd.},
  langid = {english},
  keywords = {automated test generation,machine learning,test case generation,test input generation,test oracle generation},
  file = {D\:\\data\\Zotero\\storage\\JZSSBJR2\\Fontes and Gay - 2023 - The integration of machine learning into automated test generation A systematic mapping study.pdf;D\:\\data\\Zotero\\storage\\JGN22TDQ\\stvr.html}
}

@article{fuFrameworkHighspeedNetwork2023,
  title = {A Framework of High-Speed Network Protocol Fuzzing Based on Shared Memory},
  author = {Fu, Junsong and Xiong, Shuai and Wang, Na and Ren, Ruiping and Zhou, Ang and Bhargava, Bharat K.},
  year = {2023},
  journal = {IEEE Transactions on Dependable and Secure Computing},
  pages = {1--18},
  doi = {10.1109/TDSC.2023.3318571},
  langid = {english},
  keywords = {Fuzzing,High-speed,network protocol fuzzing,Protocols,Security,Servers,shared memory,Sockets,Software,Synchronization},
  annotation = {0 citations (Crossref/DOI) [2025-02-27]\\
0 citations (Crossref) [2024-03-31]\\
GSCC: 0000004 \\
TLDR: A more thorough analysis about the time consumption in a fuzzing iteration for 13 network protocols and then a High-speed Network Protocol Fuzzer named HNPFuzzer, which can improve the fuzzing throughput by about 39.66 times in average and triggers a large number of crashes including 2 new vulnerabilities which cannot discovered by existing fuzzers.},
  file = {D:\data\Zotero\storage\WW6QER3E\Fu et al_2023_A framework of high-speed network protocol fuzzing based on shared memory.pdf}
}

@inproceedings{fujimotoAddressingFunctionApproximation2018,
  title = {Addressing Function Approximation Error in Actor-Critic Methods},
  booktitle = {Proceedings of the 35th International Conference on Machine Learning, {{ICML}} 2018, Stockholmsm{\"a}ssan, Stockholm, Sweden, July 10-15, 2018},
  author = {Fujimoto, Scott and {van Hoof}, Herke and Meger, David},
  editor = {Dy, Jennifer G. and Krause, Andreas},
  year = {2018},
  series = {Proceedings of Machine Learning Research},
  volume = {80},
  pages = {1582--1591},
  publisher = {PMLR},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/conf/icml/FujimotoHM18.bib},
  timestamp = {Wed, 03 Apr 2019 18:17:30 +0200},
  file = {D:\data\Zotero\storage\Q6H6BZ35\Fujimoto et al. - 2018 - Addressing function approximation error in actor-c.pdf}
}

@article{gageNewAlgorithmData1994,
  title = {A New Algorithm for Data Compression},
  author = {Gage, Philip},
  year = {1994},
  month = feb,
  journal = {C Users J.},
  volume = {12},
  number = {2},
  pages = {23--38},
  publisher = {R \& D Publications, Inc.},
  address = {USA},
  issn = {0898-9788},
  issue_date = {Feb. 1994}
}

@inproceedings{ganCollAFLPathSensitive2018,
  title = {{{CollAFL}}: Path Sensitive Fuzzing},
  booktitle = {2018 {{IEEE Symposium}} on {{Security}} and {{Privacy}} (Sp)},
  author = {Gan, Shuitao and Zhang, Chao and Qin, Xiaojun and Tu, Xuwen and Li, Kang and Pei, Zhongyu and Chen, Zuoning},
  year = {2018},
  pages = {679--696},
  doi = {10.1109/SP.2018.00040},
  langid = {english},
  keywords = {fuzzing,information,scheduling},
  annotation = {GSCC: 0000534 2025-06-04T05:51:31.397Z \\
234 citations (Crossref/DOI) [2025-02-27]\\
GSCC: 0000525 2025-02-27T04:08:37.582Z \\
CCF: A\\
TLDR: A coverage sensitive fuzzing solution that mitigates path collisions by providing more accurate coverage information, while still preserving low instrumentation overhead and armed with the three fuzzing strategies, CollAFL outperforms AFL in terms of both code coverage and vulnerability discovery.\\
remark: {$<$}think{$>$}好的，现在需要帮用户用中文概括论文《CollAFL: Path Sensitive Fuzzing》的主要内容，且不超过15个字。首先，我先快速看一下用户提供的摘要内容。摘要提到，现有的覆盖引导模糊测试工具（如AFL）由于使用粗粒度的覆盖率信息（比如边缘命中计数），存在路径碰撞的问题，导致无法有效发现新路径和漏洞。CollAFL通过提供更准确的覆盖率信息来缓解路径碰撞，同时保持低开销，并采用了三种新的模糊测试策略，显著提高了代码覆盖率和漏洞发现速度。实验结果显示，CollAFL在覆盖率和漏洞发现方面都优于AFL，发现了更多的安全漏洞和CVE。接下来，我需要抓住核心点：CollAFL的主要贡献是解决路径碰撞，提高测试的路径敏感度，从而提升效率和效果。所以，关键点在于``路径敏感''和``模糊测试优化''。需要简洁地表达出这一点，同时不超过15个字。可能的选项包括``路径敏感的模糊测试优化''、``精准路径覆盖的模糊测试''等。但用户给出的例子是``基于马尔可夫链的灰盒模糊测试优化''，这里应该保持结构一致，即方法+效果。所以，可能需要类似``路径敏感的模糊测试优化''或者``精准路径覆盖的模糊测试方法''。再检查一下字数：``路径敏感模糊测试优化''是11个字，符合要求。或者``路径敏感模糊测试提升''，但``提升''可能不够明确。可能更准确的是``路径敏感的模糊测试优化''共13字，符合。或者``精准路径覆盖提升模糊测试''也是15字。不过原论文标题是``Path Sensitive Fuzzing''，所以``路径敏感''更贴切。因此，最终确定用``路径敏感的模糊测试优化''或者类似的表达},
  file = {D:\data\Zotero\storage\GECPC64B\Gan et al. - 2018 - CollAFL Path sensitive fuzzing.pdf}
}

@inproceedings{ganGREYONEDataFlow2020,
  title = {{{GREYONE}}: Data Flow Sensitive Fuzzing},
  booktitle = {29th {{Usenix Security Symposium}}, {{Usenix Security}} 2020, {{August}} 12-14, 2020},
  author = {Gan, Shuitao and Zhang, Chao and Chen, Peng and Zhao, Bodong and Qin, Xiaojun and Wu, Dong and Chen, Zuoning},
  editor = {Capkun, Srdjan and Roesner, Franziska},
  year = {2020},
  pages = {2577--2594},
  publisher = {USENIX Association},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/conf/uss/Gan0CZQWC20.bib},
  langid = {english},
  keywords = {thesis (related work)},
  annotation = {GSCC: 0000210 \\
Read\_Status: Read\\
Read\_Status\_Date: 2025-02-19T08:08:13.593Z\\
CCF: A\\
remark: 数据流敏感模糊测试方法},
  timestamp = {Wed, 08 Jun 2022 12:58:22 +0200},
  file = {D:\data\Zotero\storage\Z69E2NYJ\Gan et al. - 2020 - GREYONE Data flow sensitive fuzzing.pdf}
}

@article{ganPathSensitiveFuzzing2022,
  title = {Path Sensitive Fuzzing for Native Applications},
  author = {Gan, Shuitao and Zhang, Chao and Qin, Xiaojun and Tu, Xuwen and Li, Kang and Pei, Zhongyu and Chen, Zuoning},
  year = {2022},
  journal = {IEEE Transactions on Dependable and Secure Computing},
  volume = {19},
  number = {3},
  pages = {1544--1561},
  doi = {10.1109/TDSC.2020.3027690},
  langid = {american},
  annotation = {5 citations (Crossref/DOI) [2025-02-27]\\
2 citations (Crossref) [2024-03-31]\\
TLDR: This article proposes a coverage sensitive fuzzing solution CollAFL, which mitigates path collisions by providing more accurate coverage information, while still preserving low instrumentation overhead and outperforms its counterparts in terms of both code coverage and vulnerability discovery.\\
remark: 路径敏感模糊测试提高漏洞发现},
  file = {D:\data\Zotero\storage\Z3NJKHSA\Gan et al_2022_Path sensitive fuzzing for native applications.pdf}
}

@article{gaoFAFuzzNovelScheduling2024,
  title = {{{FA-fuzz}}: A Novel Scheduling Scheme Using Firefly Algorithm for Mutation-Based Fuzzing},
  author = {Gao, Zicong and Xiong, Hao and Dong, Weiyu and Chang, Rui and Yang, Rui and Zhou, Yajin and Jiang, Liehui},
  year = {2024},
  journal = {IEEE Transactions on Software Engineering},
  volume = {50},
  number = {1},
  pages = {1--15},
  doi = {10.1109/TSE.2023.3326144},
  langid = {english},
  annotation = {GSCC: 0000003 2025-02-27T04:15:15.379Z \\
2 citations (Crossref/DOI) [2025-02-27]\\
GSCC: 0000003 \\
0 citations (Crossref) [2024-03-31]\\
GSCC: 0000003 \\
TLDR: This paper proposes a novel general scheduling scheme, named FA-fuzz, to find the optimal selecting probability distribution of mutation operators, which is based on the observations that the effective mutation operators are different for different seeds.\\
Read\_Status: Not Reading\\
Read\_Status\_Date: 2025-02-11T13:13:28.517Z\\
remark: "FA-Fuzz：使用萤火虫算法优化基于变异的模糊测试调度方案。"},
  file = {D:\data\Zotero\storage\2NDLNEEX\Gao et al_2024_FA-Fuzz.pdf}
}

@article{garbeliniGreyhoundDirectedGreybox2022,
  title = {Greyhound: Directed Greybox Wi-Fi Fuzzing},
  author = {Garbelini, Matheus E. and Wang, Chundong and Chattopadhyay, Sudipta},
  year = {2022},
  journal = {IEEE Transactions on Dependable and Secure Computing},
  volume = {19},
  number = {2},
  pages = {817--834},
  doi = {10.1109/TDSC.2020.3014624},
  langid = {english},
  keywords = {Authentication,Communication system security,Fuzzing,Greybox fuzzing,Protocols,software security,Tools,Wi-Fi client,Wireless communication,Wireless fidelity},
  annotation = {GSCC: 0000020 2025-02-27T04:20:04.059Z \\
7 citations (Crossref/DOI) [2025-02-27]\\
2 citations (Crossref) [2024-03-31]\\
GSCC: 0000020 \\
TLDR: A directed fuzzing methodology named Greyhound that automatically tests the Wi-Fi client implementations against vulnerabilities such as crashes or non-compliant behaviors, which indicates that Greyhound not only automatically discovers known vulnerabilities (including KRACK and Dragonslayer) that would require specialized verification otherwise, but, more importantly, it also has uncovered four new vulnerabilities in popular Wi-fi client devices.\\
remark: GREYHOUND实现Wi-Fi协议灰盒模糊测试},
  file = {D:\data\Zotero\storage\TNNBKTSN\Garbelini et al_2022_Greyhound.pdf}
}

@inproceedings{gerettoTrieremeSpeedingHybrid2023,
  title = {Triereme: Speeding up Hybrid Fuzzing through Efficient Query Scheduling},
  booktitle = {Proceedings of the 39th Annual Computer Security Applications Conference},
  author = {Geretto, Elia and Hohnerlein, Julius and Giuffrida, Cristiano and Bos, Herbert and {van der Kouwe}, Erik and {v. Gleissenthall}, Klaus},
  year = {2023},
  series = {Acsac '23},
  pages = {56--70},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/3627106.3627173},
  abstract = {Hybrid fuzzing, the combination between fuzzing and concolic execution, holds great promise in theory, but has so far failed to deliver all the expected advantages in practice due to its high overhead. The cause is the large amount of time spent in the SMT solver. As a result, hybrid fuzzers often lose out to simpler, yet faster techniques. This issue remains despite novel query pruning techniques that reduce the number and complexity of solver queries as they preclude other crucial optimizations like incremental solving. We introduce Triereme, a method to speed up the hybrid fuzzer's concolic engine by reducing the time spent in the SMT solver. Triereme uses a trie (or prefix tree) data structure to schedule and cache solver queries, exploiting common prefixes. This design is made possible by decoupling concolic tracing from concolic solving. As a result, Triereme manages to reconcile pruning with incremental solving, reaping their combined benefits. In our tests, Triereme speeds up concolic executions by 6.1x on average in FuzzBench\&nbsp;[22] and improves coverage progress in 79\% of the benchmarks.},
  isbn = {979-8-4007-0886-2},
  langid = {english},
  keywords = {concolic execution,fuzzing,hybrid fuzzing,program analysis},
  annotation = {GSCC: 0000001 2025-03-02T08:15:04.505Z \\
0 citations (Crossref/DOI) [2025-02-27]\\
GSCC: 0000001 \\
TLDR: Triereme is introduced, a method to speed up the hybrid fuzzer's concolic engine by reducing the time spent in the SMT solver, made possible by decoupling concolic tracing from concolic solving.\\
Read\_Status: In Progress\\
Read\_Status\_Date: 2025-02-09T07:22:29.595Z},
  file = {D:\data\Zotero\storage\6Q2RAILU\Geretto et al. - 2023 - Triereme Speeding up hybrid fuzzing through efficient query scheduling.pdf}
}

@inproceedings{godefroidLearnFuzzMachineLearning2017,
  title = {Learn\&{{Fuzz}}: {{Machine}} Learning for Input Fuzzing},
  booktitle = {2017 32nd {{IEEE}}/{{ACM}} International Conference on Automated Software Engineering ({{ASE}})},
  author = {Godefroid, Patrice and Peleg, Hila and Singh, Rishabh},
  year = {2017},
  pages = {50--59},
  doi = {10.1109/ASE.2017.8115618},
  keywords = {thesis (related work)},
  annotation = {GSCC: 0012117 2025-03-02T09:07:13.934Z \\
194 citations (Crossref/DOI) [2025-02-27]\\
TLDR: This paper shows how to automate the generation of an input grammar suitable for input fuzzing using sample inputs and neural-network-based statistical machine-learning techniques and presents a new algorithm for this learn\&fuzz challenge which uses a learnt input probability distribution to intelligently guide where to fuzz inputs.},
  file = {D:\data\Zotero\storage\RYIHKTKK\Godefroid et al. - 2017 - Learn&Fuzz Machine learning for input fuzzing.pdf}
}

@inproceedings{gongDRLFCfuzzerFuzzingDeepReinforcementLearning2022,
  title = {{{DRLFCfuzzer}}: Fuzzing with Deep-Reinforcement-Learning under Format Constraints},
  booktitle = {Proc. - {{Int}}. {{Conf}}. {{Electron}}. {{Inf}}. {{Eng}}. {{Comput}}. {{Technol}}., {{Eiect}}},
  author = {Gong, K. and Yang, W. and Cui, B. and Chen, C.},
  year = {2022},
  pages = {374--380},
  publisher = {{Institute of Electrical and Electronics Engineers Inc.}},
  doi = {10.1109/EIECT58010.2022.00080},
  abstract = {With the development of information technology, program vulnerabilities have become more complex and diversified, posing a great threat to the security of computer systems. Among many vulnerability detection methods, fuzzing is an popular method of automatic vulnerability mining which efficiency depends on the quality of generated samples. Some work has introduced reinforcement learning into fuzzing to provide an intelligent scheme for vulnerability mining, but there is still the problem of exploring invalid sample space. In order to solve this problem, this paper proposes a new fuzzer called DRLFCfuzzer, which is based on data boundary segmentation technology and guided by multi-dimensional deep reinforcement learning. We model the fuzzing process as a Markov decision process, add the segmentation of data boundaries and the selection of data blocks on the basis of multi-dimensional mutation, and improve the efficiency of the fuzzing by pruning unnecessary exploration of sample spaces. The experimental results show that DRLFCfuzzer achieves code coverage of 128\% to 800\% of AFL and 112\% to 160\% of general deep reinforcement learning fuzzer and more crashes in some programs of the Fuzzer-Test-Suite dataset and three real world programs.  {\copyright} 2022 IEEE.},
  isbn = {979-835039956-1 (ISBN)},
  langid = {english},
  keywords = {Deep learning,deep reinforcement learning,Deep reinforcement learning,Efficiency,Format constraint,format constraints,fuzzing,Fuzzing,Information technology projects,Learning systems,Markov processes,Multi dimensional,Network security,Program Vulnerability,Reinforcement learning,Reinforcement learnings,Sample space,software security,Software security,Software testing,Statistical tests,Vulnerabilities minings},
  annotation = {0 citations (Crossref/DOI) [2025-02-27]\\
0 citations (Crossref) [2024-03-31]\\
GSCC: 0000003 \\
TLDR: This paper proposes a new fuzzer called DRLFCfuzzer, which is based on data boundary segmentation technology and guided by multi-dimensional deep reinforcement learning, and improves the efficiency of the fuzzing by pruning unnecessary exploration of sample spaces.},
  file = {D:\data\Zotero\storage\EGB4G4EZ\Gong et al_2022_DRLFCfuzzer.pdf}
}

@misc{gongEffectiveEvasiveFuzz2024,
  title = {Effective and Evasive Fuzz Testing-Driven Jailbreaking Attacks against Llms},
  author = {Gong, Xueluan and Li, Mingzhe and Zhang, Yilin and Ran, Fengyuan and Chen, Chen and Chen, Yanjiao and Wang, Qian and Lam, Kwok-Yan},
  year = {2024},
  eprint = {2409.14866},
  primaryclass = {cs.CR},
  archiveprefix = {arXiv},
  file = {D:\data\Zotero\storage\CQQEWMC7\Gong et al. - 2024 - Effective and evasive fuzz testing-driven jailbreaking attacks against llms.pdf}
}

@misc{GoogleAFL2024,
  title = {Google/{{AFL}}},
  year = {2024},
  month = dec,
  urldate = {2024-12-31},
  abstract = {american fuzzy lop - a security-oriented fuzzer},
  copyright = {Apache-2.0},
  howpublished = {Google}
}

@misc{haarnojaSoftActorcriticAlgorithms2019,
  title = {Soft Actor-Critic Algorithms and Applications},
  author = {Haarnoja, Tuomas and Zhou, Aurick and Hartikainen, Kristian and Tucker, George and Ha, Sehoon and Tan, Jie and Kumar, Vikash and Zhu, Henry and Gupta, Abhishek and Abbeel, Pieter and Levine, Sergey},
  year = {2019},
  eprint = {1812.05905},
  primaryclass = {cs.LG},
  archiveprefix = {arXiv},
  file = {D:\data\Zotero\storage\MUG3P393\Haarnoja et al. - 2019 - Soft actor-critic algorithms and applications.pdf}
}

@inproceedings{haarnojaSoftActorcriticOffpolicy2018,
  title = {Soft Actor-Critic: {{Off-policy}} Maximum Entropy Deep Reinforcement Learning with a Stochastic Actor},
  booktitle = {Proceedings of the 35th International Conference on Machine Learning, {{ICML}} 2018, Stockholmsm{\"a}ssan, Stockholm, Sweden, July 10-15, 2018},
  author = {Haarnoja, Tuomas and Zhou, Aurick and Abbeel, Pieter and Levine, Sergey},
  editor = {Dy, Jennifer G. and Krause, Andreas},
  year = {2018},
  series = {Proceedings of Machine Learning Research},
  volume = {80},
  pages = {1856--1865},
  publisher = {PMLR},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/conf/icml/HaarnojaZAL18.bib},
  timestamp = {Wed, 03 Apr 2019 18:17:30 +0200},
  file = {D:\data\Zotero\storage\U9DFKD2A\Haarnoja et al. - 2018 - Soft actor-critic Off-policy maximum entropy deep.pdf}
}

@article{hartFormalBasisHeuristic1968,
  title = {A Formal Basis for the Heuristic Determination of Minimum Cost Paths},
  author = {Hart, Peter E. and Nilsson, Nils J. and Raphael, Bertram},
  year = {1968},
  journal = {IEEE Transactions on Systems Science and Cybernetics},
  volume = {4},
  number = {2},
  pages = {100--107},
  doi = {10.1109/TSSC.1968.300136},
  langid = {english},
  keywords = {/unread,Automatic control,Automatic programming,Chemical technology,Costs,Functional programming,Gradient methods,Instruction sets,Mathematical programming,Minimax techniques,Minimization methods},
  annotation = {TLDR: How heuristic information from the problem domain can be incorporated into a formal mathematical theory of graph searching is described and an optimality property of a class of search strategies is demonstrated.},
  file = {D:\data\Zotero\storage\9K4YP3QR\Hart et al. - 1968 - A formal basis for the heuristic determination of minimum cost paths.pdf}
}

@article{hazimehMagmaGroundtruthFuzzing2021,
  title = {Magma: {{A}} Ground-Truth Fuzzing Benchmark},
  author = {Hazimeh, Ahmad and Herrera, Adrian and Payer, Mathias},
  year = {2021},
  month = jun,
  journal = {Proc. ACM Meas. Anal. Comput. Syst.},
  volume = {4},
  number = {3},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/3428334},
  abstract = {High scalability and low running costs have made fuzz testing the de facto standard for discovering software bugs. Fuzzing techniques are constantly being improved in a race to build the ultimate bug-finding tool. However, while fuzzing excels at finding bugs in the wild, evaluating and comparing fuzzer performance is challenging due to the lack of metrics and benchmarks. For example, crash count---perhaps the most commonly-used performance metric---is inaccurate due to imperfections in deduplication techniques. Additionally, the lack of a unified set of targets results in ad hoc evaluations that hinder fair comparison. We tackle these problems by developing Magma, a ground-truth fuzzing benchmark that enables uniform fuzzer evaluation and comparison. By introducing real bugs into real software, Magma allows for the realistic evaluation of fuzzers against a broad set of targets. By instrumenting these bugs, Magma also enables the collection of bug-centric performance metrics independent of the fuzzer. Magma is an open benchmark consisting of seven targets that perform a variety of input manipulations and complex computations, presenting a challenge to state-of-the-art fuzzers. We evaluate seven widely-used mutation-based fuzzers (AFL, AFLFast, AFL++, FairFuzz, MOpt-AFL, honggfuzz, and SymCC-AFL) against Magma over 200,000 CPU-hours. Based on the number of bugs reached, triggered, and detected, we draw conclusions about the fuzzers' exploration and detection capabilities. This provides insight into fuzzer performance evaluation, highlighting the importance of ground truth in performing more accurate and meaningful evaluations.},
  articleno = {49},
  issue_date = {December 2020},
  keywords = {benchmark,fuzzing,performance evaluation,software security},
  annotation = {88 citations (Crossref/DOI) [2025-02-27]\\
TLDR: Magma is an open benchmark consisting of seven targets that perform a variety of input manipulations and complex computations, presenting a challenge to state-of-the-art fuzzers, and provides insight into fuzzer performance evaluation.},
  file = {D:\data\Zotero\storage\FEDSE7ZU\Hazimeh et al_2021_Magma.pdf}
}

@inproceedings{heDeepResidualLearning2016,
  title = {Deep Residual Learning for Image Recognition},
  booktitle = {2016 {{IEEE}} Conference on Computer Vision and Pattern Recognition ({{CVPR}})},
  author = {He, Kaiming and Zhang, Xiangyu and Ren, Shaoqing and Sun, Jian},
  year = {2016},
  pages = {770--778},
  doi = {10.1109/CVPR.2016.90},
  annotation = {TLDR: This work presents a residual learning framework to ease the training of networks that are substantially deeper than those used previously, and provides comprehensive empirical evidence showing that these residual networks are easier to optimize, and can gain accuracy from considerably increased depth.},
  file = {D:\data\Zotero\storage\GLEGHRDS\He et al. - 2016 - Deep residual learning for image recognition.pdf}
}

@article{herreraDatAFLowDataFlowGuidedFuzzer2023,
  title = {{{{\textsc{DatAFLow}}}} : {{Toward}} a {{Data-Flow-Guided Fuzzer}}},
  author = {Herrera, Adrian and Payer, Mathias and Hosking, Antony L.},
  year = {2023},
  month = sep,
  journal = {ACM Transactions on Software Engineering and Methodology},
  volume = {32},
  number = {5},
  pages = {1--31},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  issn = {1049-331X, 1557-7392},
  doi = {10.1145/3587156},
  abstract = {Coverage-guided greybox fuzzers rely on               control-flow               coverage feedback to explore a target program and uncover bugs. Compared to control-flow coverage,               data-flow               coverage offers a more fine-grained approximation of program behavior. Data-flow coverage captures behaviors not visible as control flow and should intuitively discover more (or different) bugs. Despite this advantage, fuzzers guided by data-flow coverage have received relatively little attention, appearing mainly in combination with heavyweight program analyses (e.g., taint analysis, symbolic execution). Unfortunately, these more accurate analyses incur a high run-time penalty, impeding fuzzer throughput. Lightweight data-flow alternatives to control-flow fuzzing remain unexplored.                                         We present               datAFLow               , a greybox fuzzer guided by lightweight data-flow profiling. We also establish a framework for reasoning about data-flow coverage, allowing the computational cost of exploration to be balanced with precision. Using this framework, we extensively evaluate               datAFLow               across different precisions, comparing it against state-of-the-art fuzzers guided by control flow, taint analysis, and data flow.                                         Our results suggest that the ubiquity of control-flow-guided fuzzers is well-founded. The high run-time costs of data-flow-guided fuzzing ({\textasciitilde}10 {\texttimes} higher than control-flow-guided fuzzing) significantly reduces fuzzer iteration rates, adversely affecting bug discovery and coverage expansion. Despite this,               datAFLow               uncovered bugs that state-of-the-art control-flow-guided fuzzers (notably, AFL++) failed to find. This was because data-flow coverage revealed states in the target not visible under control-flow coverage. Thus, we encourage the community to continue exploring lightweight data-flow profiling; specifically, to lower run-time costs and to combine this profiling with control-flow coverage to maximize bug-finding potential.},
  articleno = {132},
  issue_date = {September 2023},
  keywords = {coverage,data flow,fuzzing,Fuzzing},
  annotation = {1 citations (Crossref) [2024-03-31]\\
JCR分区: Q1\\
中科院分区升级版: 计算机科学2区\\
影响因子: 6.6\\
CCF: A},
  file = {D\:\\data\\Zotero\\storage\\QT9QR7DF\\Herrera et al. - 2023 - DatAFLow Toward a data-flow-guided fuzzer.pdf;D\:\\data\\Zotero\\storage\\VPAP5YZ7\\Herrera et al. - 2023 - DatAFLow Toward a data-flow-guided fuzzer.pdf}
}

@inproceedings{herreraSeedSelectionSuccessful2021,
  title = {Seed Selection for Successful Fuzzing},
  booktitle = {Proceedings of the 30th {{ACM SIGSOFT}} International Symposium on Software Testing and Analysis},
  author = {Herrera, Adrian and Gunadi, Hendra and Magrath, Shane and Norrish, Michael and Payer, Mathias and Hosking, Antony L.},
  year = {2021},
  series = {{{ISSTA}} 2021},
  pages = {230--243},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/3460319.3464795},
  abstract = {Mutation-based greybox fuzzing---unquestionably the most widely-used fuzzing technique---relies on a set of non-crashing seed inputs (a corpus) to bootstrap the bug-finding process. When evaluating a fuzzer, common approaches for constructing this corpus include: (i) using an empty file; (ii) using a single seed representative of the target's input format; or (iii) collecting a large number of seeds (e.g., by crawling the Internet). Little thought is given to how this seed choice affects the fuzzing process, and there is no consensus on which approach is best (or even if a best approach exists). To address this gap in knowledge, we systematically investigate and evaluate how seed selection affects a fuzzer's ability to find bugs in real-world software. This includes a systematic review of seed selection practices used in both evaluation and deployment contexts, and a large-scale empirical evaluation (over 33 CPU-years) of six seed selection approaches. These six seed selection approaches include three corpus minimization techniques (which select the smallest subset of seeds that trigger the same range of instrumentation data points as a full corpus). Our results demonstrate that fuzzing outcomes vary significantly depending on the initial seeds used to bootstrap the fuzzer, with minimized corpora outperforming singleton, empty, and large (in the order of thousands of files) seed sets. Consequently, we encourage seed selection to be foremost in mind when evaluating/deploying fuzzers, and recommend that (a) seed choice be carefully considered and explicitly documented, and (b) never to evaluate fuzzers with only a single seed.},
  isbn = {978-1-4503-8459-9},
  keywords = {corpus minimization,fuzzing,software testing},
  annotation = {57 citations (Crossref/DOI) [2025-02-27]},
  file = {D:\data\Zotero\storage\PD6UZS44\Herrera et al. - 2021 - Seed selection for successful fuzzing.pdf}
}

@article{huangBalanceSeedScheduling2023,
  title = {Balance Seed Scheduling via Monte Carlo Planning},
  author = {Huang, Heqing and Chiu, Hung-Chun and Shi, Qingkai and Yao, Peisen and Zhang, Charles},
  year = {2023},
  journal = {IEEE Transactions on Dependable and Secure Computing},
  pages = {1--15},
  doi = {10.1109/TDSC.2023.3285293},
  keywords = {BeliefFuzz,fuzzing,optimization,scheduling},
  annotation = {GSCC: 0000008 2025-06-04T05:50:47.120Z \\
0 citations (Crossref) [2024-03-31]\\
GSCC: 0000008 \\
TLDR: BeliefFuzz is presented, which transforms fuzzing into a Monte Carlo planning system with a upper confidence bound, and allows the system to dynamically compute both the benefits and the cost during the fuzzing process.\\
remark: 蒙特卡洛规划的种子调度优化},
  file = {D:\data\Zotero\storage\J2F44YTU\Huang et al_2023_Balance seed scheduling via monte carlo planning.pdf}
}

@inproceedings{huangBEACONDirectedGreybox2022,
  title = {{{BEACON}}: Directed Grey-Box Fuzzing with Provable Path Pruning},
  booktitle = {43rd {{IEEE Symposium}} on {{Security}} and {{Privacy}}, {{SP}} 2022, {{San Francisco}}, {{Ca}}, {{Usa}}, {{May}} 22-26, 2022},
  author = {Huang, Heqing and Guo, Yiyuan and Shi, Qingkai and Yao, Peisen and Wu, Rongxin and Zhang, Charles},
  year = {2022},
  pages = {36--50},
  publisher = {IEEE},
  doi = {10.1109/SP46214.2022.9833751},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/conf/sp/HuangGSYWZ22.bib},
  langid = {english},
  keywords = {Question left: relationship preservation Bounded disjunction,readed,thesis (related work)},
  annotation = {GSCC: 0000111 2025-03-02T06:55:35.335Z \\
61 citations (Crossref/DOI) [2025-02-27]\\
28 citations (Crossref) [2024-03-31]\\
GSCC: 0000111 2025-03-02T06:55:35.335Z \\
TLDR: BEACON, which can effectively direct a grey-box fuzzer in the sea of paths in a provable manner, is presented, assisted by a lightweight static analysis that computes abstracted preconditions for reaching the target, and can prune 82.94\% of the executing paths at runtime with negligible analysis overhead.},
  timestamp = {Fri, 29 Jul 2022 01:00:00 +0200},
  file = {D:\data\Zotero\storage\D8ZZJ9PV\Huang et al_2022_BEACON.pdf}
}

@misc{huangESFUZZImprovingCoverage2024,
  title = {{{ES-FUZZ}}: {{Improving}} the Coverage of Firmware Fuzzing with Stateful and Adaptable {{MMIO}} Models},
  author = {Huang, Wei-Lun and Shin, Kang G.},
  year = {2024},
  eprint = {2403.06281},
  primaryclass = {cs.CR},
  archiveprefix = {arXiv},
  annotation = {GSCC: 0000000},
  file = {D:\data\Zotero\storage\BCPA3D22\Huang and Shin - 2024 - ES-FUZZ Improving the coverage of firmware fuzzing with stateful and adaptable MMIO models.pdf}
}

@inproceedings{huangEverythingGoodSomething2024,
  title = {Everything Is Good for Something: {{Counterexample-guided}} Directed Fuzzing via Likely Invariant Inference},
  booktitle = {2024 {{IEEE}} Symposium on Security and Privacy ({{SP}})},
  author = {Huang, H. and Zhou, A. and Payer, M. and Zhang, C.},
  year = {2024},
  month = may,
  pages = {141--141},
  publisher = {IEEE Computer Society},
  address = {Los Alamitos, CA, USA},
  issn = {2375-1207},
  doi = {10.1109/SP54263.2024.00142},
  abstract = {Directed fuzzing demonstrates the potential to reproduce bug reports, verify patches, and debug vulnerabilities. State-of-the-art directed fuzzers prioritize inputs that are more likely to trigger the target vulnerability or filter irrelevant inputs unrelated to the targets. Despite these efforts, existing approaches struggle to reproduce specific vulnerabilities as most generated inputs are irrelevant. For instance, in the Magma benchmark, more than 94\% of generated inputs miss the target vulnerability. We call this challenge the indirect input generation problem. We propose to increase the yield of inputs that reach the target location by restraining input generation. Our key insight is to infer likely invariants from both reachable and unreachable executed inputs to constrain the search space of the subsequent input generation and produce more reachable inputs. Moreover, we propose two selection strategies to minimize the fraction of unnecessary inputs for efficient invariant inference and deprioritize imprecise invariants for effective input generation. Halo, our prototype implementation, outperforms state-of-the-art directed fuzzers with a 15.3x speedup in reproducing target vulnerabilities by generating 6.2x more reachable inputs. During our evaluation, we also detected ten previously unknown bugs involving seven incomplete fixes in the latest versions of well-fuzzed targets.},
  langid = {american},
  keywords = {Benchmark testing,Computer bugs,directed fuzzing,Directed Fuzzing,Fuzzing,indirected input generation,Indirected Input Generation,invariant inference,Invariant Inference,Magma,Privacy,Prototypes,Security},
  annotation = {GSCC: 0000002 2025-02-27T04:18:12.824Z \\
0 citations (Crossref/DOI) [2025-02-27]\\
GSCC: 0000002 \\
TLDR: Halo, the prototype implementation of directed fuzzing with a 15.3x speedup in reproducing target vulnerabilities by generating 6.2x more reachable inputs, and proposes two selection strategies to minimize the fraction of unnecessary inputs for efficient invariant inference and deprioritize imprecise invariants for effective input generation.\\
Read\_Status: Only AI-summary\\
Read\_Status\_Date: 2025-04-06T07:23:28.597Z},
  file = {D:\data\Zotero\storage\GI6RCRQ4\Huang et al_2024_Everything is good for something.pdf}
}

@inproceedings{huangPangolinIncrementalHybrid2020,
  title = {Pangolin: Incremental Hybrid Fuzzing with Polyhedral Path Abstraction},
  booktitle = {2020 {{IEEE}} Symposium on Security and Privacy, {{SP}} 2020, San Francisco, {{CA}}, {{USA}}, May 18-21, 2020},
  author = {Huang, Heqing and Yao, Peisen and Wu, Rongxin and Shi, Qingkai and Zhang, Charles},
  year = {2020},
  pages = {1613--1627},
  publisher = {IEEE},
  doi = {10.1109/SP40000.2020.00063},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/conf/sp/HuangYWSZ20.bib},
  langid = {english},
  keywords = {/ambiguous,readed},
  annotation = {50 citations (Crossref/DOI) [2025-02-27]\\
63 citations (Semantic Scholar/DOI) [2024-07-15]\\
43 citations (Crossref) [2024-07-15]\\
GSCC: 0000100 2025-03-02T08:14:35.050Z \\
TLDR: This work proposes "polyhedral path abstraction", which preserves the exploration state in the concolic execution stage and allows more effective mutation and constraint solving over existing techniques, and implements it as a tool, namely Pangolin.\\
Read\_Status: In Progress\\
Read\_Status\_Date: 2025-02-09T08:07:30.955Z\\
titleTranslation: 穿山甲：具有多面体路径抽象的增量混合模糊测试},
  timestamp = {Thu, 20 Aug 2020 17:04:50 +0200},
  file = {D:\data\Zotero\storage\KX2R7FDM\Huang et al_2020_Pangolin.pdf}
}

@inproceedings{huangTitanEfficientMultitarget2024,
  title = {Titan: Efficient Multi-Target Directed Greybox Fuzzing},
  booktitle = {2024 {{IEEE Symposium}} on {{Security}} and {{Privacy}} (Sp)},
  author = {Huang, H. and Yao, P. and Chiu, H. and Guo, Y. and Zhang, C.},
  year = {2024},
  month = may,
  pages = {59--59},
  publisher = {IEEE Computer Society},
  address = {Los Alamitos, CA, USA},
  issn = {2375-1207},
  doi = {10.1109/SP54263.2024.00059},
  abstract = {Modern directed fuzzing often faces scalability issues when analyzing multiple targets in a program simultaneously. We observe that the root cause is that directed fuzzers are unaware of the correlations among the targets, thereby could degenerate into a target-undirected method. As a result, directed fuzzing suffers severely from efficiency when reproducing multiple targets. This paper presents Titan, which enables fuzzers to distinguish correlations among various targets in the program and, thus, optimizes the input generation to reproduce multiple tar- gets effectively. Leveraging these correlations, Titan differentiates seeds' potential of reaching each target for the scheduling and identifies bytes that can be changed simultaneously for the mutation. We compare our approach to eight state-of-the-art (directed) fuzzers. The evaluation demonstrates that Titan outperforms existing approaches by efficiently detecting multiple targets, achieving a 21.4x speedup, and requiring 95.0\% fewer number of executions. In addition, Titan detects ten incomplete fixes, which cannot be detected by other directed fuzzers, in the latest versions of the benchmark programs with two CVE IDs assigned.},
  langid = {english},
  annotation = {GSCC: 0000007 2025-02-27T04:16:33.365Z \\
1 citations (Crossref/DOI) [2025-02-27]\\
GSCC: 0000007 \\
TLDR: Titan is presented, which enables fuzzers to distinguish correlations among various targets in the program and, thus, optimizes the input generation to reproduce multiple targets effectively.\\
remark: "Titan：优化输入生成以高效复制多目标的灰盒模糊测试方法。"\\
CCF: A\\
Read\_Status: Read but Ambiguous\\
Read\_Status\_Date: 2025-02-24T11:03:26.719Z},
  file = {D:\data\Zotero\storage\93BFVXD4\Huang et al_2024_Titan.pdf}
}

@inproceedings{hussainRemovingUninterestingBytes2022,
  title = {Removing Uninteresting Bytes in Software Fuzzing},
  booktitle = {2022 {{IEEE}} International Conference on Software Testing, Verification and Validation Workshops ({{ICSTW}})},
  author = {Hussain, Aftab and Alipour, Mohammad Amin},
  year = {2022},
  pages = {301--305},
  doi = {10.1109/ICSTW55395.2022.00058},
  annotation = {1 citations (Crossref/DOI) [2025-02-27]\\
0 citations (Crossref) [2024-03-31]\\
TLDR: This paper proposes and evaluates Diar, a simple approach for mitigating the problem of uninteresting bytes in the seeds, and suggests fuzzing campaigns that start with reduced seeds, find new paths faster, and can produce higher coverage overall.\\
remark: "提出DIAR方法，识别并清除模糊测试中的无趣字节。"},
  file = {D:\data\Zotero\storage\Q63M5BCR\Hussain and Alipour - 2022 - Removing uninteresting bytes in software fuzzing.pdf}
}

@inproceedings{ispoglouFuzzGenAutomaticFuzzer2020,
  title = {{{FuzzGen}}: {{Automatic}} Fuzzer Generation},
  booktitle = {29th {{USENIX}} Security Symposium, {{USENIX}} Security 2020, August 12-14, 2020},
  author = {Ispoglou, Kyriakos K. and Austin, Daniel and Mohan, Vishwath and Payer, Mathias},
  editor = {Capkun, Srdjan and Roesner, Franziska},
  year = {2020},
  pages = {2271--2287},
  publisher = {USENIX Association},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/conf/uss/IspoglouAMP20.bib},
  timestamp = {Fri, 29 Jan 2021 22:08:55 +0100},
  file = {D:\data\Zotero\storage\G6KKDERC\Ispoglou et al. - 2020 - FuzzGen Automatic fuzzer generation.pdf}
}

@inproceedings{jauernigDARWINSurvivalFittest2023,
  title = {{{DARWIN}}: Survival of the Fittest Fuzzing Mutators},
  booktitle = {30th {{Annual Network}} and {{Distributed System Security Symposium}}, {{Ndss}} 2023, {{San Diego}}, {{California}}, {{Usa}}, {{February}} 27 - {{March}} 3, 2023},
  author = {Jauernig, Patrick and Jakobovic, Domagoj and Picek, Stjepan and Stapf, Emmanuel and Sadeghi, Ahmad-Reza},
  year = {2023},
  publisher = {The Internet Society},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/conf/ndss/JauernigJPSS23.bib},
  langid = {english},
  keywords = {thesis (related work)},
  annotation = {GSCC: 0000022 \\
remark: DARWIN优化模糊测试变异调度},
  timestamp = {Thu, 16 Mar 2023 14:57:04 +0100},
  file = {D:\data\Zotero\storage\GGKCH3WT\Jauernig et al. - 2023 - DARWIN Survival of the fittest fuzzing mutators.pdf}
}

@article{jeonDrPathFinderHybrid2022,
  title = {Dr.{{PathFinder}}: Hybrid Fuzzing with Deep Reinforcement Concolic Execution toward Deeper Path-First Search},
  author = {Jeon, Seungho and Moon, Jongsub},
  year = {2022},
  journal = {Neural Computing \& Applications},
  volume = {34},
  number = {13},
  pages = {10731--10750},
  doi = {10.1007/S00521-022-07008-8},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  langid = {american},
  annotation = {4 citations (Crossref/DOI) [2025-02-27]\\
2 citations (Crossref) [2024-03-31]\\
GSCC: 0000006 \\
TLDR: A concolic execution algorithm that combines deep reinforcement learning with a hybrid fuzzing solution, Dr.PathFinder, is proposed, which performed well in finding bugs located in deep paths, but had limitation to find bugs located at shallow paths, which was discussed.},
  timestamp = {Mon, 25 Jul 2022 08:40:07 +0200},
  file = {D:\data\Zotero\storage\9ZGKZPU8\Jeon_Moon_2022_Dr.pdf}
}

@article{jeonStaticMultiFeaturebased2024,
  title = {Static Multi Feature-Based Malware Detection Using Multi {{SPP-net}} in Smart {{IoT}} Environments},
  author = {Jeon, Jueun and Jeong, Byeonghui and Baek, Seungyeon and Jeong, Young-Sik},
  year = {2024},
  journal = {IEEE Trans. Inf. Forensics Secur.},
  volume = {19},
  pages = {2487--2500},
  doi = {10.1109/TIFS.2024.3350379},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  langid = {american},
  annotation = {0 citations (Crossref) [2024-03-31]\\
TLDR: A malware detection for static security service (Mal3S) scheme that provides a secure Smart IoT environment by accurately detecting various types of malware and has demonstrated effective generalization capabilities for various types of malware.},
  timestamp = {Fri, 26 Jan 2024 07:55:46 +0100},
  file = {D:\data\Zotero\storage\PPIJKX6K\Jeon et al_2024_Static multi feature-based malware detection using multi SPP-net in smart IoT.pdf}
}

@misc{jha2023bertrlfuzzer,
  title = {{{BertRLFuzzer}}: {{A BERT}} and Reinforcement Learning Based Fuzzer},
  author = {Jha, Piyush and Scott, Joseph and Ganeshna, Jaya Sriram and Singh, Mudit and Ganesh, Vijay},
  year = {2023},
  eprint = {2305.12534},
  primaryclass = {cs.SE},
  archiveprefix = {arXiv},
  file = {D:\data\Zotero\storage\EBC9LH9F\Jha et al. - 2023 - BertRLFuzzer A BERT and reinforcement learning ba.pdf}
}

@inproceedings{jhaBertRLFuzzerBERTReinforcement2024,
  title = {{{BertRLFuzzer}}: {{A BERT}} and Reinforcement Learning Based Fuzzer (Student Abstract)},
  booktitle = {Thirty-Eighth {{AAAI}} Conference on Artificial Intelligence, {{AAAI}} 2024, Thirty-Sixth Conference on Innovative Applications of Artificial Intelligence, {{IAAI}} 2024, Fourteenth Symposium on Educational Advances in Artificial Intelligence, {{EAAI}} 2014, February 20-27, 2024, Vancouver, Canada},
  author = {Jha, Piyush and Scott, Joseph and Ganeshna, Jaya Sriram and Singh, Mudit and Ganesh, Vijay},
  editor = {Wooldridge, Michael J. and Dy, Jennifer G. and Natarajan, Sriraam},
  year = {2024},
  pages = {23521--23522},
  publisher = {AAAI Press},
  doi = {10.1609/AAAI.V38I21.30455},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  annotation = {TLDR: A novel tool BertRLFuzzer, a BERT and Reinforcement Learning (RL) based fuzzer aimed at finding security vulnerabilities for Web applications shows a significant improvement, relative to the nearest competing tool in terms of time to first attack, new vulnerabilities found, and attack rate.},
  timestamp = {Mon, 01 Jul 2024 10:37:51 +0200},
  file = {D:\data\Zotero\storage\EDD7TN7F\Jha et al. - 2024 - BertRLFuzzer A BERT and reinforcement learning based fuzzer (student abstract).pdf}
}

@misc{jiangFuzzingPHPInterpreter2024,
  title = {Fuzzing the {{PHP}} Interpreter via Dataflow Fusion},
  author = {Jiang, Yuancheng and Zhang, Chuqi and Ruan, Bonan and Liu, Jiahao and Rigger, Manuel and Yap, Roland and Liang, Zhenkai},
  year = {2024},
  eprint = {2410.21713},
  primaryclass = {cs.CR},
  archiveprefix = {arXiv},
  annotation = {GSCC: 0000000},
  file = {D:\data\Zotero\storage\KKCSBAWA\Jiang et al. - 2024 - Fuzzing the PHP interpreter via dataflow fusion.pdf}
}

@article{jinEvolutionaryOptimizationUncertain2005,
  title = {Evolutionary Optimization in Uncertain Environments-a Survey},
  author = {Jin, Yaochu and Branke, J.},
  year = {2005},
  journal = {IEEE Transactions on Evolutionary Computation},
  volume = {9},
  number = {3},
  pages = {303--317},
  doi = {10.1109/TEVC.2005.846356},
  keywords = {Additive noise,Approximation error,Approximation models,Design optimization,dynamic environments,Evolutionary computation,Measurement errors,noise,Noise robustness,Noise shaping,robustness,Scattering,uncertainty,Uncertainty,Working environment noise}
}

@inproceedings{kimDAFLDirectedGreybox2023,
  title = {{{DAFL}}: Directed Grey-Box Fuzzing Guided by Data Dependency},
  booktitle = {32nd {{Usenix Security Symposium}} (Usenix {{Security}} 23)},
  author = {Kim, Tae Eun and Choi, Jaeseung and Heo, Kihong and Cha, Sang Kil},
  year = {2023},
  month = aug,
  pages = {4931--4948},
  publisher = {USENIX Association},
  address = {Anaheim, CA},
  isbn = {978-1-939133-37-3},
  langid = {english},
  annotation = {GSCC: 0000021 2025-03-02T06:55:19.870Z \\
CCF: A\\
remark: 基于数据依赖的定向模糊测试\\
Read\_Status: Read\\
Read\_Status\_Date: 2025-04-05T03:15:06.604Z},
  file = {D:\data\Zotero\storage\BI7AEKM8\Kim et al_2023_DAFL.pdf}
}

@inproceedings{kleesEvaluatingFuzzTesting2018,
  title = {Evaluating Fuzz Testing},
  booktitle = {Proceedings of the 2018 {{ACM SIGSAC}} Conference on Computer and Communications Security},
  author = {Klees, George and Ruef, Andrew and Cooper, Benji and Wei, Shiyi and Hicks, Michael},
  year = {2018},
  series = {Ccs '18},
  pages = {2123--2138},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/3243734.3243804},
  abstract = {Fuzz testing has enjoyed great success at discovering security critical bugs in real software. Recently, researchers have devoted significant effort to devising new fuzzing techniques, strategies, and algorithms. Such new ideas are primarily evaluated experimentally so an important question is: What experimental setup is needed to produce trustworthy results? We surveyed the recent research literature and assessed the experimental evaluations carried out by 32 fuzzing papers. We found problems in every evaluation we considered. We then performed our own extensive experimental evaluation using an existing fuzzer. Our results showed that the general problems we found in existing experimental evaluations can indeed translate to actual wrong or misleading assessments. We conclude with some guidelines that we hope will help improve experimental evaluations of fuzz testing algorithms, making reported results more robust.},
  isbn = {978-1-4503-5693-0},
  langid = {american},
  keywords = {evaluation,fuzzing,security},
  annotation = {TLDR: It is shown that the general problems found in existing experimental evaluations can indeed translate to actual wrong or misleading assessments in reported results, making reported results more robust.},
  file = {D:\data\Zotero\storage\SW228B5P\Klees et al_2018_Evaluating fuzz testing.pdf}
}

@inproceedings{kukuckaCONFETTIAmplifyingConcolic2022,
  title = {{{CONFETTI}}: {{Amplifying}} Concolic Guidance for Fuzzers},
  booktitle = {Proceedings of the 44th International Conference on Software Engineering},
  author = {Kukucka, James and Pina, Lu{\'i}s and Ammann, Paul and Bell, Jonathan},
  year = {2022},
  series = {{{ICSE}} '22},
  pages = {438--450},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/3510003.3510628},
  abstract = {Fuzz testing (fuzzing) allows developers to detect bugs and vulnerabilities in code by automatically generating defect-revealing inputs. Most fuzzers operate by generating inputs for applications and mutating the bytes of those inputs, guiding the fuzzing process with branch coverage feedback via instrumentation. Whitebox guidance (e.g., taint tracking or concolic execution) is sometimes integrated with coverage-guided fuzzing to help cover tricky-to-reach branches that are guarded by complex conditions (so-called "magic values"). This integration typically takes the form of a targeted input mutation, e.g., placing particular byte values at a specific offset of some input in order to cover a branch. However, these dynamic analysis techniques are not perfect in practice, which can result in the loss of important relationships between input bytes and branch predicates, thus reducing the effective power of the technique. We introduce a new, surprisingly simple, but effective technique, global hinting, which allows the fuzzer to insert these interesting bytes not only at a targeted position, but in any position of any input. We implemented this idea in Java, creating Confetti, which uses both targeted and global hints for fuzzing. In an empirical comparison with two baseline approaches, a state-of-the-art greybox Java fuzzer and a version of Confetti without global hinting, we found that Confetti covers more branches and finds 15 previously unreported bugs, including 9 that neither baseline could find. By conducting a post-mortem analysis of Confetti's execution, we determined that global hinting was at least as effective at revealing new coverage as traditional, targeted hinting.},
  isbn = {978-1-4503-9221-1},
  langid = {american},
  keywords = {fuzzing},
  annotation = {8 citations (Crossref) [2024-03-31]\\
TLDR: This work introduces a new, surprisingly simple, but effective technique, global hinting, which allows the fuzzer to insert interesting bytes not only at a targeted position, but in any position of any input.},
  file = {D:\data\Zotero\storage\IHMYQPNN\Kukucka et al_2022_CONFETTI.pdf}
}

@inproceedings{laybournM2UsingMutation2022,
  title = {{$\mu$}2: {{Using}} Mutation Analysis to Guide Mutation-Based Fuzzing},
  booktitle = {Proceedings of the {{ACM}}/{{IEEE}} 44th International Conference on Software Engineering: {{Companion}} Proceedings},
  author = {Laybourn, Isabella},
  year = {2022},
  series = {{{ICSE}} '22},
  pages = {331--333},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/3510454.3522682},
  abstract = {Coverage-guided fuzzing is a popular tool for finding bugs. This paper introduces {$\mu$}2, a strategy for extending coverage-guided fuzzing with mutation analysis, which previous work has found to be better correlated with test effectiveness than code coverage. {$\mu$}2 was implemented in Java using the JQF framework and the default mutations used by PIT. Initial evaluation shows increased performance when using {$\mu$}2 as compared to coverage-guided fuzzing.},
  isbn = {978-1-4503-9223-5},
  keywords = {differential testing,fuzzing,mutation testing,mutation-based fuzzing},
  annotation = {1 citations (Crossref/DOI) [2025-02-27]\\
1 citations (Crossref) [2024-03-31]\\
TLDR: Initial evaluation shows increased performance when using {$\mu$}2, a strategy for extending coverage-guided fuzzing with mutation analysis, which previous work has found to be better correlated with test effectiveness than code coverage.},
  file = {D:\data\Zotero\storage\5JYJP6ZR\Laybourn_2022_μ2.pdf}
}

@article{lecunDeepLearning2015,
  title = {Deep Learning},
  author = {LeCun, Yann and Bengio, Yoshua and Hinton, Geoffrey},
  year = {2015},
  month = may,
  journal = {Nature},
  volume = {521},
  number = {7553},
  pages = {436--444},
  publisher = {Nature Publishing Group},
  issn = {1476-4687},
  doi = {10.1038/nature14539},
  urldate = {2023-05-05},
  abstract = {Deep learning allows computational models that are composed of multiple processing layers to learn representations of data with multiple levels of abstraction. These methods have dramatically improved the state-of-the-art in speech recognition, visual object recognition, object detection and many other domains such as drug discovery and genomics. Deep learning discovers intricate structure in large data sets by using the backpropagation algorithm to indicate how a machine should change its internal parameters that are used to compute the representation in each layer from the representation in the previous layer. Deep convolutional nets have brought about breakthroughs in processing images, video, speech and audio, whereas recurrent nets have shone light on sequential data such as text and speech.},
  copyright = {2015 Nature Publishing Group, a division of Macmillan Publishers Limited. All Rights Reserved.},
  langid = {english},
  keywords = {Computer science,Mathematics and computing},
  file = {D:\data\Zotero\storage\A6E5ADW8\LeCun et al. - 2015 - Deep learning.pdf}
}

@inproceedings{leeConstraintguidedDirectedGreybox2021,
  title = {Constraint-Guided Directed Greybox Fuzzing},
  booktitle = {30th {{Usenix Security Symposium}} (Usenix {{Security}} 21)},
  author = {Lee, Gwangmu and Shim, Woochul and Lee, Byoungyoung},
  year = {2021},
  month = aug,
  pages = {3559--3576},
  publisher = {USENIX Association},
  isbn = {978-1-939133-24-3},
  langid = {english},
  annotation = {GSCC: 0000086 \\
remark: 约束引导的定向灰盒模糊测试\\
Read\_Status: To Read\\
Read\_Status\_Date: 2025-04-05T02:35:51.865Z},
  file = {D:\data\Zotero\storage\ZXEVDFF4\Lee et al. - 2021 - Constraint-guided directed greybox fuzzing.pdf}
}

@inproceedings{leeFuzzleMakingPuzzle2023,
  title = {Fuzzle: {{Making}} a Puzzle for Fuzzers},
  booktitle = {Proceedings of the 37th {{IEEE}}/{{ACM}} International Conference on Automated Software Engineering},
  author = {Lee, Haeun and Kim, Soomin and Cha, Sang Kil},
  year = {2023},
  series = {{{ASE}} '22},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/3551349.3556908},
  abstract = {With rapidly growing fuzzing technology, there has been surging demand for automatically synthesizing buggy programs. Previous approaches have been focused on injecting bugs into existing programs, making them suffer from providing the ground truth as the generated programs may contain unexpected bugs. In this paper, we address this challenge by casting the bug synthesis problem as a maze generation problem. Specifically, we synthesize a whole buggy program by encoding a sequence of moves in a maze as a chain of function calls. By design, our approach provides the exact ground truth of the synthesized benchmark. Furthermore, it allows generation of benchmarks with realistic path constraints extracted from existing vulnerabilities. We implement our idea in a tool, named Fuzzle, and evaluate it with five state-of-the-art fuzzers to empirically prove its value.},
  articleno = {45},
  isbn = {978-1-4503-9475-8},
  langid = {american},
  annotation = {0 citations (Crossref) [2024-03-31]\\
TLDR: This paper synthesizes a whole buggy program by encoding a sequence of moves in a maze as a chain of function calls, which provides the exact ground truth of the synthesized benchmark.},
  file = {D:\data\Zotero\storage\VKVY5B25\Lee et al_2023_Fuzzle.pdf}
}

@inproceedings{leeLearningSeedadaptiveMutation2023,
  title = {Learning Seed-Adaptive Mutation Strategies for Greybox Fuzzing},
  booktitle = {2023 {{Ieee}}/Acm 45th {{International Conference}} on {{Software Engineering}} (Icse)},
  author = {Lee, Myungho and Cha, Sooyoung and Oh, Hakjoo},
  year = {2023},
  pages = {384--396},
  doi = {10.1109/ICSE48619.2023.00043},
  langid = {english},
  keywords = {fuzzing},
  annotation = {GSCC: 0000020 2025-02-27T04:15:11.236Z \\
9 citations (Crossref/DOI) [2025-02-27]\\
2 citations (Crossref) [2024-03-31]\\
GSCC: 0000016 \\
TLDR: SEAMFUZZ, a novel fuzzing technique that automatically captures the characteristics of individual seed inputs and applies different mutation strategies for different seed inputs, improves both the path-discovering and bug-finding abilities of state-of-the-art fuzzers on real-world programs.\\
Read\_Status: Not Reading\\
Read\_Status\_Date: 2025-02-11T13:13:28.519Z\\
remark: SEAMFUZZ实现种子自适应变种策略},
  file = {D:\data\Zotero\storage\R64ZK7HS\Lee et al_2023_Learning seed-adaptive mutation strategies for greybox fuzzing.pdf}
}

@inproceedings{leeMontageNeuralNetwork2020,
  title = {Montage: {{A}} Neural Network Language Model-Guided {{JavaScript}} Engine Fuzzer},
  booktitle = {29th {{USENIX}} Security Symposium ({{USENIX}} Security 20)},
  author = {Lee, Suyoung and Han, HyungSeok and Cha, Sang Kil and Son, Sooel},
  year = {2020},
  month = aug,
  pages = {2613--2630},
  publisher = {USENIX Association},
  isbn = {978-1-939133-17-5},
  keywords = {thesis (related work)},
  annotation = {GSCC: 0000119 2025-03-02T09:07:25.278Z},
  file = {D:\data\Zotero\storage\RSTGDWL6\Lee et al. - 2020 - Montage A neural network language model-guided JavaScript engine fuzzer.pdf}
}

@inproceedings{lemieuxFairFuzzTargetedMutation2018,
  title = {{{FairFuzz}}: A Targeted Mutation Strategy for Increasing Greybox Fuzz Testing Coverage},
  booktitle = {Proceedings of the 33rd {{ACM}}/{{IEEE}} International Conference on Automated Software Engineering},
  author = {Lemieux, Caroline and Sen, Koushik},
  year = {2018},
  series = {{{ASE}} '18},
  pages = {475--485},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/3238147.3238176},
  abstract = {In recent years, fuzz testing has proven itself to be one of the most effective techniques for finding correctness bugs and security vulnerabilities in practice. One particular fuzz testing tool, American Fuzzy Lop (AFL), has become popular thanks to its ease-of-use and bug-finding power. However, AFL remains limited in the bugs it can find since it simply does not cover large regions of code. If it does not cover parts of the code, it will not find bugs there. We propose a two-pronged approach to increase the coverage achieved by AFL. First, the approach automatically identifies branches exercised by few AFL-produced inputs (rare branches), which often guard code that is empirically hard to cover by naively mutating inputs. The second part of the approach is a novel mutation mask creation algorithm, which allows mutations to be biased towards producing inputs hitting a given rare branch. This mask is dynamically computed during fuzz testing and can be adapted to other testing targets. We implement this approach on top of AFL in a tool named FairFuzz. We conduct evaluation on real-world programs against state-of-the-art versions of AFL. We find that on these programs FairFuzz achieves high branch coverage at a faster rate that state-of-the-art versions of AFL. In addition, on programs with nested conditional structure, it achieves sustained increases in branch coverage after 24 hours (average 10.6\% increase). In qualitative analysis, we find that FairFuzz has an increased capacity to automatically discover keywords.},
  isbn = {978-1-4503-5937-5},
  langid = {english},
  keywords = {coverage-guided greybox fuzzing,fuzz testing,rare branches},
  annotation = {GSCC: 0000475 \\
CCF: A\\
TLDR: This work proposes a two-pronged approach to increase the coverage achieved by American Fuzzy Lop, including a novel mutation mask creation algorithm, which allows mutations to be biased towards producing inputs hitting a given rare branch.\\
remark: FairFuzz通过定向变异策略提升AFL的分支覆盖率。\\
Read\_Status: Read\\
Read\_Status\_Date: 2025-02-17T11:21:55.926Z},
  file = {D:\data\Zotero\storage\67NJG68F\Lemieux_Sen_2018_FairFuzz.pdf}
}

@article{liangMultipleTargetsDirected2023,
  title = {Multiple Targets Directed Greybox Fuzzing},
  author = {Liang, Hongliang and Yu, Xinglin and Cheng, Xianglin and Liu, Jie and Li, Jin},
  year = {2023},
  journal = {IEEE Transactions on Dependable and Secure Computing},
  pages = {1--15},
  doi = {10.1109/TDSC.2023.3253120},
  langid = {english},
  annotation = {5 citations (Crossref/DOI) [2025-02-27]\\
1 citations (Crossref) [2024-03-31]\\
GSCC: 0000011 \\
TLDR: This paper proposes a novel strategy to adaptively coordinate exploration and exploitation stages, and a novel energy scheduling strategy by considering more relations between seeds and target locations which aims to reach multiple programs locations in a fuzzing campaign.\\
remark: {$<$}think{$>$}嗯，我现在需要总结这篇关于多目标定向灰盒模糊测试的论文。首先，我得通读一下已经提供的摘要、引言、方法和评估部分，了解作者的主要贡献和实验结果。首先，论文的标题是``Multiple Targets Directed Greybox Fuzzing''，作者来自北京邮电大学和国家信息系统安全重点实验室。他们提出了一个名为LeoFuzz的工具，旨在解决现有定向灰盒模糊测试工具在处理多个目标时的不足。现有的工具如AFLGo、Lolly和Berry在处理多个目标时，由于静态阶段划分和粗粒度的能量调度策略，效果不佳。接下来，论文的问题陈述部分提到，现有的DGF工具在处理多个目标时存在两个主要问题：能量调度策略不够精细，无法同时兼顾全局和局部最优；探索和利用阶段的划分是静态的，不够灵活，导致资源浪费或效率低下。作者提出的解决方案是自适应协调探索和利用阶段（CEE）以及考虑种子与目标之间更多关系的能量调度策略（MES）。在方法部分，LeoFuzz结合了静态分析和动态分析。静态分析阶段生成目标序列，动态分析阶段则通过两个队列（覆盖种子队列和定向种子队列）来协调探索与利用，同时利用符号执行来解决复杂条件。能量调度策略MES考虑了目标序列的优先级、全局最大覆盖和种子的序列覆盖，从而更有效地分配能量。评估部分显示，LeoFuzz在多个真实世界的程序上进行了测试，包括崩溃重现、真阳性验证和漏洞发现。实验结果表明，LeoFuzz在效率和效果上优于现有的六个工具（QSYM、AFLGo、Lolly、Berry、Beacon和WindRanger），并且发现了23个新漏洞，其中12个获得了CVE编号。现在需要总结这些内容，确保涵盖主要贡献、方法、实验结果。需要注意术语的准确性，比如CEE和MES的具体机制，以及如何通过实验验证其有效性。可能还需要提到与现有工具的比较，特别是在处理多个目标时的优势。需要检查是否有遗漏的重要部分，比如符号执行的具体整合方式，或者目标序列生成的具体算法。此外，论文的威胁和未来工作部分也可能需要简要提及，但用户提供的文本中没有这些部分，所以可能不需要。最后，确保总结结构清晰，逻辑连贯，突出LeoFuzz的创新点和实验结果。{$<$}/think{$>$}这篇论文提出了一种针对多目标定向灰盒模糊测试（DGF）的新方法，旨在高效覆盖程序中的多个目标位置（如漏洞点），解决了现有工具在多个目标场景下的性能不足问题。作者团队开发了名为**LeoFuzz**的工具，通过自适应阶段协调和细粒度能量调度策略，显著提升了多目标场景下的测试效率，并在真实项目中验证了其有效性。---\#\#\# 主要内容总结\#\#\#\# **研究背景与问题**- **现有DGF工具的不足**：    传统定向灰盒模糊测试工具（如AFLGo、Lolly、Berry）在处理多目标时表现不佳，原因包括：  1. **静态阶段划分**：探索（增加覆盖率）与利用（逼近目标）阶段切换依赖固定时间，无法动态调整。  2. **能量调度粗粒度**：全局优化忽略局部最优（如AFLGo的调和距离法），或局部优化陷入简单目标（如Lolly的序列覆盖法）。\#\#\#\# **核心贡献**1. **自适应阶段协调（CEE）**     - **动态切换机制**：通过两个队列（覆盖种子队列CQ和定向种子队列DQ）的状态动态调整阶段。当覆盖种子占比过高时切换至利用阶段；若利用阶段长时间未生成新定向种子，则返回探索阶段。   - **动态阈值调整**：根据历史利用阶段的持续时间和生成种子数，调整阶段切换的触发条件，平衡覆盖率与定向性。2. **多目标能量调度策略（MES）**     - **目标序列生成**：结合控制流图（CFG）和调用图（CG）生成目标序列，扩展路径长度以增强指导性。   - **综合因素评估**：考虑种子与目标的三种关系：     - **优先级（Priority）**：目标序列与其他序列的相似性。     - **全局最大覆盖（gMaxCov）**：目标序列的历史最大覆盖率，反映目标难度。     - **序列覆盖（seqCov）**：种子执行路径与目标序列的重合度。   - **模拟退火算法**：结合全局优化（模拟退火）与局部优化（梯度下降），动态调整种子能量分配。3. **符号执行整合**     - 结合符号执行解决复杂约束（如魔术数检查），生成满足条件的输入，加速路径探索。\#\#\#\# **实验验证**- **测试场景**：    在7个真实项目（如binutils、libtiff、libredwg）中测试**崩溃重现**、**真阳性验证**和**漏洞发现**。- **对比工具**：QSYM、AFLGo、Lolly、Berry、Beacon、WindRanger。- **结果**：  - **崩溃重现**：LeoFuzz平均效率提升2.21-7.35倍，成功触发所有31个漏洞，而其他工具最多漏检10个。  - **真阳性验证**：在Libming项目中，LeoFuzz验证漏洞的速度是AFLGo的2.71倍。  - **漏洞发现**：发现23个新漏洞（12个获CVE编号），远超其他工具（如QSYM发现14个，Berry发现17个）。  - **多目标优势**：单实例多目标测试优于多实例并行，因目标间路径重叠可加速触发。\#\#\#\# **技术影响**- **工具开源**：LeoFuzz已公开，促进后续研究。- **实际应用**：验证了在复杂软件中高效定位多漏洞的能力，适用于补丁测试、崩溃分析等场景。---\#\#\# 创新点总结1. **动态阶段协调**：通过实时队列状态调整探索与利用，避免资源浪费。2. **多维度能量调度**：融合目标序列的全局与局部特征，优化种子选择。3. **混合执行策略**：模糊测试与符号执行互补，解决复杂路径约束。该研究为多目标定向测试提供了系统化解决方案，显著提升了漏洞挖掘效率，并在真实场景中验证了其优越性。\\
Read\_Status: Only AI-summary\\
Read\_Status\_Date: 2025-04-06T02:36:11.662Z},
  file = {D:\data\Zotero\storage\HM2XALYT\Liang et al. - 2023 - Multiple targets directed greybox fuzzing.pdf}
}

@inproceedings{liangPATAFuzzingPath2022,
  title = {{{PATA}}: Fuzzing with Path Aware Taint Analysis},
  booktitle = {43rd {{IEEE Symposium}} on {{Security}} and {{Privacy}}, {{SP}} 2022, {{San Francisco}}, {{Ca}}, {{Usa}}, {{May}} 22-26, 2022},
  author = {Liang, Jie and Wang, Mingzhe and Zhou, Chijin and Wu, Zhiyong and Jiang, Yu and Liu, Jianzhong and Liu, Zhe and Sun, Jiaguang},
  year = {2022},
  pages = {1--17},
  publisher = {IEEE},
  doi = {10.1109/SP46214.2022.9833594},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/conf/sp/LiangWZW0L0022.bib},
  langid = {english},
  keywords = {/SR,readed},
  annotation = {GSCC: 0000076 2025-02-27T04:16:19.961Z \\
37 citations (Crossref/DOI) [2025-02-27]\\
22 citations (Crossref) [2024-03-31]\\
GSCC: 0000078 \\
TLDR: PATA is proposed, a fuzzer that implements path-aware taint analysis, i.e. one that distinguishes between multiple occurrences of the same variable based on the execution path information, and found more bugs than the comparison fuzzers, including 17 unlisted ones.\\
remark: 路径感知污点分析助力模糊测试\\
Read\_Status: Read\\
Read\_Status\_Date: 2025-02-20T02:18:15.004Z\\
CCF: A},
  timestamp = {Fri, 29 Jul 2022 01:00:00 +0200},
  file = {D:\data\Zotero\storage\XFPDQBUL\Liang et al_2022_PATA.pdf}
}

@inproceedings{liangRLFDirectedFuzzing2022,
  title = {{{RLF}}: Directed Fuzzing Based on Deep Reinforcement Learning},
  booktitle = {2022 {{International Conference}} on {{Machine Learning}}, {{Control}}, and {{Robotics}} (Mlcr)},
  author = {Liang, Xinran and Xiao, Tian},
  year = {2022},
  pages = {127--133},
  doi = {10.1109/MLCR57210.2022.00032},
  langid = {english},
  annotation = {GSCC: 0000003 2025-02-27T04:20:00.716Z \\
1 citations (Crossref/DOI) [2025-02-27]\\
0 citations (Crossref) [2024-03-31]\\
GSCC: 0000003 \\
TLDR: Experimental results show that the RLF--a deep reinforcement learning-based directed fuzzing method has better efficiency than other fuzzy testing tools in terms of vulnerability reproduction and significantly improves the orientation of fuzzy tests.},
  file = {D:\data\Zotero\storage\8S4PIJWG\Liang and Xiao - 2022 - RLF Directed fuzzing based on deep reinforcement .pdf}
}

@article{liDeepLearningCoverageguided2022,
  title = {Deep Learning for Coverage-Guided Fuzzing: How Far Are We?},
  author = {Li, Siqi and Xie, Xiaofei and Lin, Yun and Li, Yuekang and Feng, Ruitao and Li, Xiaohong and Ge, Weimin and Dong, Jin Song},
  year = {2022},
  journal = {IEEE Transactions on Dependable and Secure Computing},
  pages = {1--13},
  doi = {10.1109/TDSC.2022.3200525},
  langid = {english},
  annotation = {3 citations (Crossref/DOI) [2025-02-27]\\
GSCC: 0000005 \\
2 citations (Crossref) [2024-03-31]\\
TLDR: Empirical results reveal that existing DL-based fuzzers do not perform well as expected, which is largely affected by the dependencies between branches, unbalanced sample distribution, and the limited model expressiveness.},
  file = {D:\data\Zotero\storage\M46MW2BL\Li et al. - 2022 - Deep learning for coverage-guided fuzzing How far.pdf}
}

@inproceedings{liFirstLookEffect2021,
  title = {A First Look at the Effect of Deep Learning in Coverage-Guided Fuzzing},
  booktitle = {36th {{IEEE}}/{{ACM}} International Conference on Automated Software Engineering, {{ASE}} 2021, Melbourne, Australia, November 15-19, 2021},
  author = {Li, Siqi and Lin, Yun and Xie, Xiaofei and Li, Yuekang and Li, Xiaohong and Ge, Weimin and Liu, Yang and Dong, Jin Song},
  year = {2021},
  pages = {1186--1189},
  publisher = {IEEE},
  doi = {10.1109/ASE51524.2021.9678794},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  langid = {american},
  annotation = {0 citations (Crossref/DOI) [2025-02-27]\\
GSCC: 0000000 \\
TLDR: The empirical results reveal that the deep learning models can only be effective in very limited scenarios, which is largely restrained by training data imbalance, dependant labels, model over-generalization, and the insufficient expressiveness of the state-of-the-art models.},
  timestamp = {Mon, 26 Jun 2023 20:39:46 +0200},
  file = {D:\data\Zotero\storage\UPVMHI9S\Li et al_2021_A first look at the effect of deep learning in coverage-guided fuzzing.pdf}
}

@article{liGfuzzDirectedFuzzing2024,
  title = {G-Fuzz: A Directed Fuzzing Framework for {{gVisor}}},
  author = {Li, Yuwei and Chen, Yuan and Ji, Shouling and Zhang, Xuhong and Yan, Guanglu and Liu, Alex X. and Wu, Chunming and Pan, Zulie and Lin, Peng},
  year = {2024},
  journal = {IEEE Transactions on Dependable and Secure Computing},
  volume = {21},
  number = {1},
  pages = {168--185},
  doi = {10.1109/TDSC.2023.3244825},
  langid = {english},
  keywords = {Codes,Directed fuzzing,Fuzzing,gVisor,Kernel,OS kernel,Security,Software,Switches,Testing,vulnerability detection},
  annotation = {4 citations (Crossref/DOI) [2025-02-27]\\
0 citations (Crossref) [2024-03-31]\\
GSCC: 0000007 \\
TLDR: G-Fuzz is proposed, a directed fuzzing framework for gVisor that has been deployed in industry and has detected multiple serious vulnerabilities, and outperforms Syzkaller, the state-of-the-art kernel fuzzer, significantly.},
  file = {D:\data\Zotero\storage\924IGUX8\Li et al_2024_G-fuzz.pdf}
}

@misc{lillicrapContinuousControlDeep2019,
  title = {Continuous Control with Deep Reinforcement Learning},
  author = {Lillicrap, Timothy P. and Hunt, Jonathan J. and Pritzel, Alexander and Heess, Nicolas and Erez, Tom and Tassa, Yuval and Silver, David and Wierstra, Daan},
  year = {2019},
  eprint = {1509.02971},
  primaryclass = {cs.LG},
  archiveprefix = {arXiv},
  file = {D:\data\Zotero\storage\HZ253W2I\Lillicrap et al_2019_Continuous control with deep reinforcement learning.pdf}
}

@inproceedings{linDeepGoPredictiveDirected2024,
  title = {{{DeepGo}}: {{Predictive}} Directed Greybox Fuzzing},
  booktitle = {31st Annual Network and Distributed System Security Symposium, {{NDSS}} 2024, San Diego, California, {{USA}}, February 26 - March 1, 2024},
  author = {Lin, Peihong and Wang, Pengfei and Zhou, Xu and Xie, Wei and Zhang, Gen and Lu, Kai},
  year = {2024},
  publisher = {The Internet Society},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  langid = {american},
  keywords = {thesis (related work)},
  annotation = {GSCC: 0000002 2025-03-02T11:04:52.612Z \\
Read\_Status: Corse-grained read\\
Read\_Status\_Date: 2025-04-06T06:42:55.787Z},
  timestamp = {Tue, 24 Sep 2024 17:19:50 +0200},
  file = {D:\data\Zotero\storage\2G9EP9U2\Lin et al. - 2024 - DeepGo Predictive directed greybox fuzzing.pdf}
}

@inproceedings{lippGreenFuzzingSaturationbased2023,
  title = {Green Fuzzing: {{A}} Saturation-Based Stopping Criterion Using Vulnerability Prediction},
  booktitle = {Proceedings of the 32nd {{ACM SIGSOFT}} International Symposium on Software Testing and Analysis},
  author = {Lipp, Stephan and Elsner, Daniel and Kacianka, Severin and Pretschner, Alexander and B{\"o}hme, Marcel and Banescu, Sebastian},
  year = {2023},
  series = {{{ISSTA}} 2023},
  pages = {127--139},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/3597926.3598043},
  abstract = {Fuzzing is a widely used automated testing technique that uses random inputs to provoke program crashes indicating security breaches. A difficult but important question is when to stop a fuzzing campaign. Usually, a campaign is terminated when the number of crashes and/or covered code elements has not increased over a certain period of time. To avoid premature termination when a ramp-up time is needed before vulnerabilities are reached, code coverage is often preferred over crash count to decide when to terminate a campaign. However, a campaign might only increase the coverage on non-security-critical code or repeatedly trigger the same crashes. For these reasons, both code coverage and crash count tend to overestimate the fuzzing effectiveness, unnecessarily increasing the duration and thus the cost of the testing process. The present paper explores the tradeoff between the amount of saved fuzzing time and number of missed bugs when stopping campaigns based on the saturation of covered, potentially vulnerable functions rather than triggered crashes or regular function coverage. In a large-scale empirical evaluation of 30 open-source C programs with a total of 240 security bugs and 1,280 fuzzing campaigns, we first show that binary classification models trained on software with known vulnerabilities (CVEs), using lightweight machine learning features derived from findings of static application security testing tools and proven software metrics, can reliably predict (potentially) vulnerable functions. Second, we show that our proposed stopping criterion terminates 24-hour fuzzing campaigns 6-12 hours earlier than the saturation of crashes and regular function coverage while missing (on average) fewer than 0.5 out of 12.5 contained bugs.},
  isbn = {979-8-4007-0221-1},
  langid = {american},
  keywords = {empirical study,fuzzing,stopping criterion},
  annotation = {1 citations (Crossref/DOI) [2025-02-27]\\
0 citations (Crossref) [2024-03-31]\\
GSCC: 0000002 \\
TLDR: The present paper explores the tradeoff between the amount of saved fuzzing time and number of missed bugs when stopping campaigns based on the saturation of covered, potentially vulnerable functions rather than triggered crashes or regular function coverage.},
  file = {D:\data\Zotero\storage\P7ZYAPTD\Lipp et al_2023_Green fuzzing.pdf}
}

@inproceedings{liuDSFuzzDetectingDeep2023,
  title = {{{DSFuzz}}: Detecting Deep State Bugs with Dependent State Exploration},
  booktitle = {Proceedings of the 2023 {{ACM SIGSAC}} Conference on Computer and Communications Security},
  author = {Liu, Yinxi and Meng, Wei},
  year = {2023},
  series = {{{CCS}} '23},
  pages = {1242--1256},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/3576915.3616594},
  abstract = {Traditional random mutation-based fuzzers are ineffective at reaching deep program states that require specific input values. Consequently, a large number of deep bugs remain undiscovered. To enhance the effectiveness of input mutation, previous research has utilized taint analysis to identify control-dependent critical bytes and only mutates those bytes. However, existing works do not consider indirect control dependencies, in which the critical bytes for taking one branch can only be set in a basic block that is control dependent on a series of other basic blocks. These critical bytes cannot be identified unless that series of basic blocks are visited in the execution path. Existing approaches would take an unacceptably long time and computation resources to attempt multiple paths before setting these critical bytes. In other words, the search space for identifying the critical bytes cannot be effectively explored by the current mutation strategies.In this paper, we aim to explore a new input generation strategy for satisfying a series of indirect control dependencies that can lead to deep program states. We present DSFuzz, a directed fuzzing scheme that effectively constructs inputs for exploring particular deep states. DSFuzz focuses on the deep targets reachable by only satisfying a set of indirect control dependencies. By analyzing the conditions that a deep state indirectly depends on, it can generate dependent critical bytes for taking the corresponding branches. It also rules out the control flows that are unlikely to lead to the target state. As a result, it only needs to mutate under a limited search space. DSFuzz significantly outperformed state-of-the-art directed greybox fuzzers in detecting bugs in deep program states: it detected eight new bugs that other tools failed to find.},
  isbn = {979-8-4007-0050-7},
  langid = {english},
  keywords = {fuzzing,program analysis,software testing},
  annotation = {GSCC: 0000003 \\
0 citations (Crossref) [2024-03-31]\\
GSCC: 0000003 \\
TLDR: DSFuzz significantly outperformed state-of-the-art directed greybox fuzzers in detecting bugs in deep program states: it detected eight new bugs that other tools failed to find.\\
remark: "DSFuzz：通过依赖状态探索来检测深层状态的错误。"\\
Read\_Status: Read but Ambiguous\\
Read\_Status\_Date: 2025-02-21T03:24:53.541Z},
  file = {D:\data\Zotero\storage\BV3E3ZTX\Liu_Meng_2023_DSFuzz.pdf}
}

@inproceedings{liUNIFUZZHolisticPragmatic2021,
  title = {{{UNIFUZZ}}: {{A}} Holistic and Pragmatic Metrics-Driven Platform for Evaluating Fuzzers},
  booktitle = {30th {{USENIX}} Security Symposium, {{USENIX}} Security 2021, August 11-13, 2021},
  author = {Li, Yuwei and Ji, Shouling and Chen, Yuan and Liang, Sizhuang and Lee, Wei-Han and Chen, Yueyao and Lyu, Chenyang and Wu, Chunming and Beyah, Raheem and Cheng, Peng and Lu, Kangjie and Wang, Ting},
  editor = {Bailey, Michael and Greenstadt, Rachel},
  year = {2021},
  pages = {2777--2794},
  publisher = {USENIX Association},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/conf/uss/LiJCLLCLWBCL021.bib},
  timestamp = {Wed, 15 Dec 2021 09:40:10 +0100}
}

@article{liuSelfsupervisedLearningGenerative2023,
  title = {Self-Supervised Learning: {{Generative}} or Contrastive},
  author = {Liu, Xiao and Zhang, Fanjin and Hou, Zhenyu and Mian, Li and Wang, Zhaoyu and Zhang, Jing and Tang, Jie},
  year = {2023},
  journal = {IEEE Transactions on Knowledge and Data Engineering},
  volume = {35},
  number = {1},
  pages = {857--876},
  doi = {10.1109/TKDE.2021.3090866},
  keywords = {Computational modeling,Computer architecture,Context modeling,contrastive learning,Data models,deep learning,generative model,Predictive models,Self-supervised learning,Supervised learning,Task analysis}
}

@inproceedings{liuTensileFuzzFacilitatingSeed2022,
  title = {{{TensileFuzz}}: Facilitating Seed Input Generation in Fuzzing via String Constraint Solving},
  booktitle = {Proceedings of the 31st {{ACM Sigsoft International Symposium}} on {{Software Testing}} and {{Analysis}}},
  author = {Liu, Xuwei and You, Wei and Zhang, Zhuo and Zhang, Xiangyu},
  year = {2022},
  series = {{{ISSTA}} 2022},
  pages = {391--403},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/3533767.3534403},
  abstract = {Seed inputs are critical to the performance of mutation based fuzzers. Existing techniques make use of symbolic execution and gradient descent to generate seed inputs. However, these techniques are not particular suitable for input growth (i.e., making input longer and longer), a key step in seed input generation. Symbolic execution models very low level constraints and prefer fix-sized inputs whereas gradient descent only handles cases where path conditions are arithmetic functions of inputs. We observe that growing an input requires considering a number of relations: length, offset, and count, in which a field is the length of another field, the offset of another field, and the count of some pattern in another field, respective. String solver theory is particularly suitable for addressing these relations. We hence propose a novel technique called TensileFuzz, in which we identify input fields and denote them as string variables such that a seed input is the concatenation of these string variables. Additional padding string variables are inserted in between field variables. The aforementioned relations are reverse-engineered and lead to string constraints, solving which instantiates the padding variables and hence grows the input. Our technique also integrates linear regression and gradient descent to ensure the grown inputs satisfy path constraints that lead to path exploration. Our comparison with AFL, and a number of state-of-the-art fuzzers that have similar target applications, including Qsym, Angora, and SLF, shows that TensileFuzz substantially outperforms the others, by 39\% - 98\% in terms of path coverage.},
  isbn = {978-1-4503-9379-9},
  langid = {english},
  keywords = {/UR,dynamic analysis,fuzzing,software testing},
  annotation = {GSCC: 0000007 2025-02-27T04:16:37.883Z \\
5 citations (Crossref/DOI) [2025-02-27]\\
GSCC: 0000007 \\
2 citations (Crossref) [2024-03-31]\\
GSCC: 0000007 \\
TLDR: A novel technique called TensileFuzz is proposed, in which input fields are identified and denote them as string variables such that a seed input is the concatenation of these string variables, which instantiates the padding variables and hence grows the input.\\
remark: "TensileFuzz：通过字符串约束求解来增强模糊测试中种子输入的生成。"\\
Read\_Status: Read but Ambiguous\\
Read\_Status\_Date: 2025-02-20T06:24:13.739Z\\
CCF: A},
  file = {D:\data\Zotero\storage\PRT9WGYN\Liu et al_2022_TensileFuzz.pdf}
}

@article{liuUnveilingExploitationPotential2023,
  title = {Towards Unveiling Exploitation Potential with Multiple Error Behaviors for Kernel Bugs},
  author = {Liu, Ziqin and Lin, Zhenpeng and Chen, Yueqi and Wu, Yuhang and Zou, Yalong and Mu, Dongliang and Xing, Xinyu},
  year = {2023},
  journal = {IEEE Transactions on Dependable and Secure Computing},
  pages = {1--18},
  doi = {10.1109/TDSC.2023.3246170},
  annotation = {0 citations (Crossref) [2024-03-31]},
  file = {D:\data\Zotero\storage\HTZW5JXA\Liu et al. - 2023 - Towards unveiling exploitation potential with mult.pdf}
}

@incollection{liuXRLFuzzFuzzingBinaries2024,
  title = {{{XRLFuzz}}: {{Fuzzing Binaries Guided}} by~{{Format Information Based}} on~{{Deep Reinforcement Learning}}},
  booktitle = {Lecture. {{Notes}}. {{Data Eng}}. {{Commun}}. {{Tech}}.},
  author = {Liu, R. and Cui, B. and Chen, C. and Ma, J.},
  year = {2024},
  volume = {193},
  pages = {307--317},
  publisher = {{Springer Science and Business Media Deutschland GmbH}},
  doi = {10.1007/978-3-031-53555-0_29},
  abstract = {Fuzzing is a popular and effective automatic vulnerability mining method. More and more fuzzing techniques are starting to integrate reinforcement learning. But traditional fuzzing based on reinforcement learning is blind in sample mutation due to the lack of format information and efficient mutation algorithms. As a result, it is challenging to achieve higher coverage and the number of effective fuzzing is limited, leading to low utilization. To mitigate these problems, this paper proposes a new fuzzer named XRLFuzz, a format information guided fuzzing based on deep reinforcement learning for binaries. We use dynamic instrumentation techniques to provide runtime information, And then we use these information to perform format division and extract keywords based on the invalid mutation reuse algorithm. Format information is incorporated into the action dimension of deep reinforcement learning to guide the selection of mutation strategy. The experimental results show that the format division technology and keyword extraction technology both improve the efficiency of fuzzing, and XRLFuzz achieves code coverage of 106\% to 276\% of AFL. {\copyright} The Author(s), under exclusive license to Springer Nature Switzerland AG 2024.},
  isbn = {23674512 (ISSN)},
  langid = {english},
  keywords = {Deep learning,Dynamic instrumentation,Engineering education,Information use,Instrumentation techniques,Keyword-based,Mining methods,Mutation algorithms,Mutation strategy,Reinforcement learning,Reinforcement learnings,Reuse,Run-time information,Vulnerabilities minings},
  annotation = {GSCC: 0000000},
  file = {D:\data\Zotero\storage\U3SXCXTF\Liu et al_2024_XRLFuzz.pdf}
}

@article{liVfuzzVulnerabilityPredictionassisted2022,
  title = {V-Fuzz: {{Vulnerability}} Prediction-Assisted Evolutionary Fuzzing for Binary Programs},
  author = {Li, Yuwei and Ji, Shouling and Lyu, Chenyang and Chen, Yuan and Chen, Jianhai and Gu, Qinchen and Wu, Chunming and Beyah, Raheem},
  year = {2022},
  journal = {IEEE Transactions on Cybernetics},
  volume = {52},
  number = {5},
  pages = {3745--3756},
  doi = {10.1109/TCYB.2020.3013675},
  keywords = {Computer bugs,Feature extraction,Fuzz testing,Fuzzing,graph embedding,Machine learning,Numerical models,Predictive models,Software,vulnerability prediction},
  annotation = {29 citations (Crossref/DOI) [2025-02-27]\\
18 citations (Crossref) [2024-03-31]\\
TLDR: An evolutionary fuzzing framework called V-Fuzz, which aims to find bugs efficiently and quickly in limited time for binary programs, and has discovered ten common vulnerabilities and exposures, and three of them are newly discovered.\\
remark: "V-Fuzz：利用漏洞预测助力二进制程序的演化模糊测试"},
  file = {D\:\\data\\Zotero\\storage\\IN3SHQYG\\Li et al_2022_V-fuzz.pdf;D\:\\data\\Zotero\\storage\\QIFNP3UC\\Li et al_2020_V-Fuzz.pdf;D\:\\data\\Zotero\\storage\\L2R4G2XT\\9199813.html}
}

@inproceedings{loweMultiagentActorcriticMixed2017,
  title = {Multi-Agent Actor-Critic for Mixed Cooperative-Competitive Environments},
  booktitle = {Advances in Neural Information Processing Systems 30: {{Annual}} Conference on Neural Information Processing Systems 2017, December 4-9, 2017, Long Beach, {{CA}}, {{USA}}},
  author = {Lowe, Ryan and Wu, Yi and Tamar, Aviv and Harb, Jean and Abbeel, Pieter and Mordatch, Igor},
  editor = {Guyon, Isabelle and {von Luxburg}, Ulrike and Bengio, Samy and Wallach, Hanna M. and Fergus, Rob and Vishwanathan, S. V. N. and Garnett, Roman},
  year = {2017},
  pages = {6379--6390},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/conf/nips/LoweWTHAM17.bib},
  timestamp = {Thu, 21 Jan 2021 15:15:21 +0100},
  file = {D:\data\Zotero\storage\6HX7RJQH\Lowe et al. - 2017 - Multi-agent actor-critic for mixed cooperative-com.pdf}
}

@inproceedings{luoSelectFuzzEfficientDirected2023,
  title = {{{SelectFuzz}}: Efficient Directed Fuzzing with Selective Path Exploration},
  booktitle = {2023 {{IEEE Symposium}} on {{Security}} and {{Privacy}} (Sp)},
  author = {Luo, Changhua and Meng, Wei and Li, Penghui},
  year = {2023},
  pages = {2693--2707},
  doi = {10.1109/SP46215.2023.10179296},
  langid = {english},
  keywords = {Codes,Computer crashes,Fuzzing,Instruments,Measurement,Privacy,Software},
  annotation = {GSCC: 0000035 2025-03-02T06:55:07.542Z \\
10 citations (Crossref/DOI) [2025-02-27]\\
GSCC: 0000035 2025-03-02T06:55:07.542Z \\
CCF: A\\
TLDR: This paper presents SelectFuzz, a new directed fuzzer that selectively explores relevant program paths for efficient crash reproduction and vulnerability detection and identifies two types of relevant code---path-divergent code and data-dependent code, that respectively captures the control-and data- dependency with the target code.\\
remark: 高效定向模糊测试技术\\
Read\_Status: Only AI-summary\\
Read\_Status\_Date: 2025-04-05T02:57:43.960Z},
  file = {D:\data\Zotero\storage\7S6XZU9Z\Luo et al. - 2023 - SelectFuzz Efficient directed fuzzing with selective path exploration.pdf}
}

@inproceedings{lyuEMSHistorydrivenMutation2022,
  title = {{{EMS}}: History-Driven Mutation for Coverage-Based Fuzzing},
  booktitle = {29rd {{Annual Network}} and {{Distributed System Security Symposium}}, {{Ndss}}},
  author = {Lyu, Chenyang and Ji, Shouling and Zhang, Xuhong and Liang, Hong and Zhao, Binbin and Lu, Kangjie and Beyah, Raheem},
  year = {2022},
  pages = {24--28},
  langid = {english},
  keywords = {/UR,readed,thesis (related work)},
  annotation = {GSCC: 0000039 \\
remark: 利用历史驱动的变异提升模糊测试覆盖\\
Read\_Status: Read\\
Read\_Status\_Date: 2025-02-20T07:28:12.818Z\\
CCF: A},
  file = {D:\data\Zotero\storage\XILGYMQH\Lyu et al_2022_EMS.pdf}
}

@inproceedings{lyuMOPTOptimizedMutation2019,
  title = {{{MOPT}}: Optimized Mutation Scheduling for Fuzzers},
  booktitle = {28th {{USENIX}} Security Symposium, {{USENIX}} Security 2019, Santa Clara, {{CA}}, {{USA}}, August 14-16, 2019},
  author = {Lyu, Chenyang and Ji, Shouling and Zhang, Chao and Li, Yuwei and Lee, Wei-Han and Song, Yu and Beyah, Raheem},
  editor = {Heninger, Nadia and Traynor, Patrick},
  year = {2019},
  pages = {1949--1966},
  publisher = {USENIX Association},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/conf/uss/LyuJZLLSB19.bib},
  langid = {english},
  keywords = {thesis (related work)},
  annotation = {GSCC: 0000361 \\
remark: MOpt提出了一种优化的变异调度方法，提升模糊测试效率。\\
Read\_Status: Read\\
Read\_Status\_Date: 2025-02-18T01:58:51.655Z},
  timestamp = {Mon, 01 Feb 2021 08:43:12 +0100},
  file = {D:\data\Zotero\storage\Q8J7DQM8\Lyu et al. - 2019 - MOPT Optimized mutation scheduling for fuzzers.pdf}
}

@inproceedings{lyuSLIMEProgramsensitiveEnergy2022,
  title = {{{SLIME}}: Program-Sensitive Energy Allocation for Fuzzing},
  booktitle = {Proceedings of the 31st {{ACM Sigsoft International Symposium}} on {{Software Testing}} and {{Analysis}}},
  author = {Lyu, Chenyang and Liang, Hong and Ji, Shouling and Zhang, Xuhong and Zhao, Binbin and Han, Meng and Li, Yun and Wang, Zhe and Wang, Wenhai and Beyah, Raheem},
  year = {2022},
  series = {{{ISSTA}} 2022},
  pages = {365--377},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/3533767.3534385},
  abstract = {The energy allocation strategy is one of the most popular techniques in fuzzing to improve code coverage and vulnerability discovery. The core intuition is that fuzzers should allocate more computational energy to the seed files that have high efficiency to trigger unique paths and crashes after mutation. Existing solutions usually define several properties, e.g., the execution speed, the file size, and the number of the triggered edges in the control flow graph, to serve as the key measurements in their allocation logics to estimate the potential of a seed. The efficiency of a property is usually assumed to be the same across different programs. However, we find that this assumption is not always valid. As a result, the state-of-the-art energy allocation solutions with static energy allocation logics are hard to achieve desirable performance on different programs. To address the above problem, we propose a novel program-sensitive solution, named SLIME, to enable adaptive energy allocation on the seed files with various properties for each program. Specifically, SLIME first designs multiple property-aware queues, with each queue containing the seed files with a specific property. Second, to improve the return of investment, SLIME leverages a customized Upper Confidence Bound Variance-aware (UCB-V) algorithm to statistically select a property queue with the most estimated reward, i.e., finding the most new unique execution paths and crashes. Finally, SLIME mutates the seed files in the selected property queue to perform property-adaptive fuzzing on a program. We evaluate SLIME against state-of-the-art open source fuzzers AFL, MOPT, AFL++, AFL++HIER, EcoFuzz, and TortoiseFuzz on 9 real-world programs. The results demonstrate that SLIME discovers 3.53X, 0.24X, 0.62X, 1.54X, 0.88X, and 3.81X more unique vulnerabilities compared to the above fuzzers, respectively. We will open source the prototype of SLIME to facilitate future fuzzing research.},
  isbn = {978-1-4503-9379-9},
  langid = {english},
  keywords = {Data-driven technique,fuzzing,Fuzzing,information,scheduling,thesis (related work),Vulnerability discovery},
  annotation = {GSCC: 0000023 2025-06-04T05:51:03.796Z \\
9 citations (Crossref/DOI) [2025-02-27]\\
5 citations (Crossref) [2024-03-31]\\
GSCC: 0000022 \\
TLDR: A novel program-sensitive solution, named SLIME, to enable adaptive energy allocation on the seed files with various properties for each program, and leverages a customized Upper Confidence Bound Variance-aware (UCB-V) algorithm to statistically select a property queue with the most estimated reward.\\
remark: 智能模糊测试能量分配策略},
  file = {D:\data\Zotero\storage\I4RH4SG8\Lyu et al. - 2022 - SLIME Program-sensitive energy allocation for fuz.pdf}
}

@inproceedings{mantovaniFuzzingDataDependency2022,
  title = {Fuzzing with Data Dependency Information},
  booktitle = {2022 {{IEEE}} 7th {{European Symposium}} on {{Security}} and {{Privacy}} (Euros\&p)},
  author = {Mantovani, Alessandro and Fioraldi, Andrea and Balzarotti, Davide},
  year = {2022},
  pages = {286--302},
  doi = {10.1109/EuroSP53844.2022.00026},
  langid = {english},
  keywords = {fuzzing,information,scheduling},
  annotation = {GSCC: 0000034 2025-06-04T05:51:01.951Z \\
12 citations (Crossref/DOI) [2025-02-27]\\
4 citations (Crossref) [2024-03-31]\\
GSCC: 0000030 \\
TLDR: DDFuzz is proposed, a new approach that rewards the fuzzer not only with code coverage information, but also when new edges in the data dependency graph are hit, showing that the adoption of data dependency instrumentation in coverage-guided fuzzing is a promising solution that can help to discover bugs that would otherwise remain unexplored by standard coverage approaches.\\
remark: {$<$}think{$>$}好的，我需要用不超过15个字的中文来概括这篇论文的主要内容。首先，题目是``Fuzzing with data dependency information''，也就是利用数据依赖信息进行模糊测试。摘要中提到，传统的模糊测试主要基于代码覆盖率（如边覆盖），但这种方法有时不足以发现复杂的漏洞。作者提出了一种新的方法，结合数据依赖图（DDGs）来指导模糊测试，通过关注数据流依赖关系来发现那些传统方法难以触发的漏洞。他们开发了一个名为DDFuzz的工具，在三个数据集中的38个目标程序中发现了72个不同的漏洞。接下来需要提炼关键点：数据依赖信息、提升模糊测试效果、发现更多漏洞。要确保在15个字以内，同时准确传达核心思想。可能的选项包括：``基于数据依赖的模糊测试优化''或者``数据依赖驱动的模糊测试方法''。不过可能需要更简洁。例如，``数据依赖增强模糊测试''或者``数据依赖指导的模糊测试''。最终选择最准确且简洁的表达，可能需要参考之前的类似回答结构，比如之前对于类似论文的概括，比如``基于多臂老虎机的节能模糊测试''这样的结构。因此，结合论文的核心，可以总结为``数据依赖指导的模糊测试优化''或者更简短的``数据依赖增强模糊测试''。但需要检查是否符合15字限制。``数据依赖增强模糊测试''是10个字，符合要求。或者``基于数据依赖的模糊测试优化''是13个字，也符合。不过可能更准确的是强调其方法，如``数据依赖驱动模糊测试''，共9个字。但可能不够完整。综合考虑，选择``基于数据依赖的模糊测试优化''较为准确且符合字数要求。{$<$}/think{$>$}基于数据依赖的模糊测试优化},
  file = {D:\data\Zotero\storage\WTR5Y8GZ\Mantovani et al_2022_Fuzzing with data dependency information.pdf}
}

@inproceedings{mataricRewardFunctionsAccelerated1994,
  title = {Reward Functions for Accelerated Learning},
  booktitle = {Machine Learning, Proceedings of the Eleventh International Conference, Rutgers University, New Brunswick, {{NJ}}, {{USA}}, July 10-13, 1994},
  author = {Mataric, Maja J.},
  editor = {Cohen, William W. and Hirsh, Haym},
  year = {1994},
  pages = {181--189},
  publisher = {Morgan Kaufmann},
  doi = {10.1016/B978-1-55860-335-6.50030-1},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  timestamp = {Mon, 24 Jun 2019 15:47:45 +0200}
}

@article{menendezHashingFuzzingIntroducing2022,
  title = {Hashing Fuzzing: Introducing Input Diversity to Improve Crash Detection},
  author = {Menendez, Hector D. and Clark, David},
  year = {2022},
  journal = {IEEE Transactions on Software Engineering},
  volume = {48},
  number = {9},
  pages = {3540--3553},
  doi = {10.1109/TSE.2021.3100858},
  langid = {english},
  annotation = {8 citations (Crossref/DOI) [2025-02-27]\\
3 citations (Crossref) [2024-03-31]\\
GSCC: 0000017 \\
TLDR: This work uses r-wise hash functions to create a novel, semantics preserving, testability transformation for C programs that is called HashFuzz, which improves the diversity of test sets produced by instrumentation-based fuzzers.\\
remark: HashFuzz提升崩溃检测效率},
  file = {D:\data\Zotero\storage\TSYCRQLB\Menendez_Clark_2022_Hashing fuzzing.pdf}
}

@inproceedings{mengLargeLanguageModel2024,
  title = {Large Language Model Guided Protocol Fuzzing},
  booktitle = {31st {{Annual Network}} and {{Distributed System Security Symposium}}, {{Ndss}} 2024, {{San Diego}}, {{California}}, {{Usa}}, {{February}} 26 - {{March}} 1, 2024},
  author = {Meng, Ruijie and Mirchev, Martin and B{\"o}hme, Marcel and Roychoudhury, Abhik},
  year = {2024},
  publisher = {The Internet Society},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  langid = {english},
  keywords = {thesis (related work)},
  annotation = {GSCC: 0000119 2025-02-27T04:13:06.750Z},
  timestamp = {Tue, 24 Sep 2024 17:19:50 +0200},
  file = {D:\data\Zotero\storage\8RTA4XK8\Meng et al. - 2024 - Large language model guided protocol fuzzing.pdf}
}

@inproceedings{metzmanFuzzBenchOpenFuzzer2021,
  title = {{{FuzzBench}}: {{An}} Open Fuzzer Benchmarking Platform and Service},
  booktitle = {Proceedings of the 29th {{ACM}} Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
  author = {Metzman, Jonathan and Szekeres, L{\'a}szl{\'o} and Simon, Laurent and Sprabery, Read and Arya, Abhishek},
  year = {2021},
  series = {{{ESEC}}/{{FSE}} 2021},
  pages = {1393--1403},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/3468264.3473932},
  abstract = {Fuzzing is a key tool used to reduce bugs in production software. At Google, fuzzing has uncovered tens of thousands of bugs. Fuzzing is also a popular subject of academic research. In 2020 alone, over 120 papers were published on the topic of improving, developing, and evaluating fuzzers and fuzzing techniques. Yet, proper evaluation of fuzzing techniques remains elusive. The community has struggled to converge on methodology and standard tools for fuzzer evaluation. To address this problem, we introduce FuzzBench as an open-source turnkey platform and free service for evaluating fuzzers. It aims to be easy to use, fast, reliable, and provides reproducible experiments. Since its release in March 2020, FuzzBench has been widely used both in industry and academia, carrying out more than 150 experiments for external users. It has been used by several published and in-the-work papers from academic groups, and has had real impact on the most widely used fuzzing tools in industry. The presented case studies suggest that FuzzBench is on its way to becoming a standard fuzzer benchmarking platform.},
  isbn = {978-1-4503-8562-6},
  langid = {american},
  keywords = {benchmarking,fuzz testing,fuzzing,software security,testing},
  annotation = {TLDR: FuzzBench is introduced as an open-source turnkey platform and free service for evaluating fuzzers, aims to be easy to use, fast, reliable, and provides reproducible experiments, and is tipped to become a standard fuzzer benchmarking platform.},
  file = {D:\data\Zotero\storage\5D2NZSZ5\Metzman et al_2021_FuzzBench.pdf}
}

@article{millerRelevanceClassicFuzz2022,
  title = {The Relevance of Classic Fuzz Testing: {{Have}} We Solved This One?},
  author = {Miller, Barton P. and Zhang, Mengxiao and Heymann, Elisa R.},
  year = {2022},
  journal = {IEEE Transactions on Software Engineering},
  volume = {48},
  number = {6},
  pages = {2028--2039},
  doi = {10.1109/TSE.2020.3047766},
  annotation = {9 citations (Crossref) [2024-03-31]\\
TLDR: The basic fuzz tools and testing scripts are updated and applied to a large collection of Unix utilities on Linux, FreeBSD, and MacOS and it is found that 9 crash or hang out of 74 utilities onLinux, 15 out of 78 utilities onBSD, and 12 out of 76 utilities on MacOS.},
  file = {D:\data\Zotero\storage\78WDCMQZ\Miller et al_2022_The relevance of classic fuzz testing.pdf}
}

@inproceedings{nagyFullspeedFuzzingReducing2019,
  title = {Full-Speed Fuzzing: Reducing Fuzzing Overhead through Coverage-Guided Tracing},
  booktitle = {2019 {{IEEE Symposium}} on {{Security}} and {{Privacy}} (Sp)},
  author = {Nagy, Stefan and Hicks, Matthew},
  year = {2019},
  pages = {787--802},
  doi = {10.1109/SP.2019.00069},
  langid = {english},
  annotation = {83 citations (Crossref/DOI) [2025-02-27]\\
GSCC: 0000186 \\
TLDR: An implementation based on the static binary instrumentor Dyninst called UnTracer is created and evaluated, showing the potential of coverage-guided tracing and integrating with the state-of-the-art hybrid fuzzer QSYM, which shows that in 24-hours of fuzzing, QSYm-UnTracer executes 79\% and 616\% more test cases than Q SYM-Clang and Q SYm-QEMU, respectively.\\
remark: 覆盖率指导追踪降低模糊测试开销},
  file = {D:\data\Zotero\storage\JUCRRDK5\Nagy and Hicks - 2019 - Full-speed fuzzing Reducing fuzzing overhead thro.pdf}
}

@inproceedings{nagySameCoverageLess2021,
  title = {Same Coverage, Less Bloat: Accelerating Binary-Only Fuzzing with Coverage-Preserving Coverage-Guided Tracing},
  booktitle = {{{CCS}} '21: 2021 {{ACM Sigsac Conference}} on {{Computer}} and {{Communications Security}}, {{Virtual Event}}, {{Republic}} of {{Korea}}, {{November}} 15 - 19, 2021},
  author = {Nagy, Stefan and {Nguyen-Tuong}, Anh and Hiser, Jason D. and Davidson, Jack W. and Hicks, Matthew},
  editor = {Kim, Yongdae and Kim, Jong and Vigna, Giovanni and Shi, Elaine},
  year = {2021},
  pages = {351--365},
  publisher = {ACM},
  doi = {10.1145/3460120.3484787},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/conf/ccs/NagyNHDH21.bib},
  langid = {english},
  keywords = {readed},
  annotation = {12 citations (Crossref/DOI) [2025-02-27]\\
GSCC: 0000032 \\
TLDR: A suite of enhancements are introduced and implemented that expand CGT's introspection to fuzzing's most common code coverage metrics, while maintaining its orders-of-magnitude speedup over conventional always-on coverage tracing.\\
remark: 加速二进制模糊测试的覆盖追踪},
  timestamp = {Tue, 16 Nov 2021 13:43:43 +0100},
  file = {D:\data\Zotero\storage\T7NG6NG3\Nagy et al_2021_Same coverage, less bloat.pdf}
}

@inproceedings{nguyenBeDivFuzzIntegratingBehavioral2022,
  title = {{{BeDivFuzz}}: Integrating Behavioral Diversity into Generator-Based Fuzzing},
  booktitle = {Proceedings of the 44th {{International Conference}} on {{Software Engineering}}},
  author = {Nguyen, Hoang Lam and Grunske, Lars},
  year = {2022},
  series = {{{ICSE}} '22},
  pages = {249--261},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/3510003.3510182},
  abstract = {A popular metric to evaluate the performance of fuzzers is branch coverage. However, we argue that focusing solely on covering many different branches (i.e., the richness) is not sufficient since the majority of the covered branches may have been exercised only once, which does not inspire a high confidence in the reliability of the covered code. Instead, the distribution of the executed branches (i.e., the evenness) should also be considered. That is, behavioral diversity is only given if the generated inputs not only trigger many different branches, but also trigger them evenly often with diverse inputs. We introduce BeDivFuzz, a feedback-driven fuzzing technique for generator-based fuzzers. BeDivFuzz distinguishes between structure-preserving and structure-changing mutations in the space of syntactically valid inputs, and biases its mutation strategy towards validity and behavioral diversity based on the received program feedback. We have evaluated BeDivFuzz on Ant, Maven, Rhino, Closure, Nashorn, and Tomcat. The results show that BeDivFuzz achieves better behavioral diversity than the state of the art, measured by established biodiversity metrics, namely the Hill numbers, from the field of ecology.},
  isbn = {978-1-4503-9221-1},
  langid = {english},
  keywords = {behavioral diversity,fuzzing,random testing,structure-aware fuzzing},
  annotation = {22 citations (Crossref/DOI) [2025-02-27]\\
13 citations (Crossref) [2024-03-31]\\
GSCC: 0000038 \\
TLDR: This work introduces BEDIVFUZZ, a feedback-driven fuzzing technique for generator-based fuzzers that distinguishes between structure-preserving and structure-changing mutations in the space of syntactically valid inputs, and biases its mutation strategy towards validity and behavioral diversity based on the received program feedback.\\
remark: 引入行为多样性增强模糊测试},
  file = {D:\data\Zotero\storage\FIIB325Q\Nguyen and Grunske - 2022 - BeDivFuzz Integrating behavioral diversity into g.pdf}
}

@inproceedings{nicolaeRevisitingNeuralProgram2023,
  title = {Revisiting Neural Program Smoothing for Fuzzing},
  booktitle = {Proceedings of the 31st {{ACM Joint European Software Engineering Conference}} and {{Symposium}} on the {{Foundations}} of {{Software Engineering}}},
  author = {Nicolae, Maria-Irina and Eisele, Max and Zeller, Andreas},
  year = {2023},
  series = {{{ESEC}}/{{FSE}} 2023},
  pages = {133--145},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/3611643.3616308},
  abstract = {Testing with randomly generated inputs (fuzzing) has gained significant traction due to its capacity to expose program vulnerabilities automatically. Fuzz testing campaigns generate large amounts of data, making them ideal for the application of machine learning (ML). Neural program smoothing, a specific family of ML-guided fuzzers, aims to use a neural network as a smooth approximation of the program target for new test case generation. In this paper, we conduct the most extensive evaluation of neural program smoothing (NPS) fuzzers against standard gray-box fuzzers ({\textquestiondown}11 CPU years and {\textquestiondown}5.5 GPU years), and make the following contributions: We find that the original performance claims for NPS fuzzers do not hold; a gap we relate to fundamental, implementation, and experimental limitations of prior works. We contribute the first in-depth analysis of the contribution of machine learning and gradient-based mutations in NPS. We implement Neuzz++, which shows that addressing the practical limitations of NPS fuzzers improves performance, but that standard gray-box fuzzers almost always surpass NPS-based fuzzers. As a consequence, we propose new guidelines targeted at benchmarking fuzzing based on machine learning, and present MLFuzz, a platform with GPU access for easy and reproducible evaluation of ML-based fuzzers. Neuzz++, MLFuzz, and all our data are public.},
  isbn = {979-8-4007-0327-0},
  langid = {english},
  keywords = {fuzzing,machine learning,neural networks,neural program smoothing},
  annotation = {GSCC: 0000009 2025-03-02T09:07:30.571Z \\
2 citations (Crossref/DOI) [2025-02-27]\\
0 citations (Crossref) [2024-03-31]\\
GSCC: 0000009 2025-03-02T09:07:30.571Z \\
TLDR: It is found that the original performance claims for NPS fuzzers do not hold, and new guidelines targeted at benchmarking fuzzing based on machine learning are proposed, and MLFuzz, a platform with GPU access for easy and reproducible evaluation of ML-based fuzzers are presented.},
  file = {D:\data\Zotero\storage\QC65PZMX\Nicolae et al_2023_Revisiting neural program smoothing for fuzzing.pdf}
}

@inproceedings{NIPS2017_453fadbd,
  title = {Hindsight Experience Replay},
  booktitle = {Advances in Neural Information Processing Systems},
  author = {Andrychowicz, Marcin and Wolski, Filip and Ray, Alex and Schneider, Jonas and Fong, Rachel and Welinder, Peter and McGrew, Bob and Tobin, Josh and Pieter Abbeel, OpenAI and Zaremba, Wojciech},
  editor = {Guyon, I. and Luxburg, U. Von and Bengio, S. and Wallach, H. and Fergus, R. and Vishwanathan, S. and Garnett, R.},
  year = {2017},
  volume = {30},
  publisher = {Curran Associates, Inc.},
  file = {D:\data\Zotero\storage\NV3EFCFI\Andrychowicz et al. - 2017 - Hindsight experience replay.pdf}
}

@inproceedings{niuFAIRFlowTypeaware2024,
  title = {{{FAIR}}: {{Flow}} Type-Aware Pre-Training of Compiler Intermediate Representations},
  booktitle = {Proceedings of the 46th {{IEEE}}/{{ACM}} International Conference on Software Engineering, {{ICSE}} 2024, Lisbon, Portugal, April 14-20, 2024},
  author = {Niu, Changan and Li, Chuanyi and Ng, Vincent and Lo, David and Luo, Bin},
  year = {2024},
  pages = {33:1--33:12},
  publisher = {ACM},
  doi = {10.1145/3597503.3608136},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  langid = {american},
  annotation = {1 citations (Crossref) [2024-03-31]\\
TLDR: FAIR, a Flow type-Aware pre-trained model for IR that involves employing a novel input representation of IR programs to address over-smoothing, over-squashing and long-dependencies problems, is proposed and Experimental results show that FAIR can achieve state-of-the-art results on four code-related downstream tasks.},
  timestamp = {Sat, 10 Feb 2024 18:04:52 +0100},
  file = {D:\data\Zotero\storage\VVWB7VPX\Niu et al_2023_FAIR.pdf}
}

@inproceedings{osterlundParmeSanSanitizerguidedGreybox2020,
  title = {{{ParmeSan}}: {{Sanitizer-guided}} Greybox Fuzzing},
  booktitle = {29th {{USENIX}} Security Symposium, {{USENIX}} Security 2020, August 12-14, 2020},
  author = {{\"O}sterlund, Sebastian and Razavi, Kaveh and Bos, Herbert and Giuffrida, Cristiano},
  editor = {Capkun, Srdjan and Roesner, Franziska},
  year = {2020},
  pages = {2289--2306},
  publisher = {USENIX Association},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/conf/uss/OsterlundRBG20.bib},
  keywords = {readed,thesis (related work)},
  annotation = {GSCC: 0000184 2025-03-02T06:55:26.091Z \\
CCF: A},
  timestamp = {Fri, 29 Jan 2021 22:08:58 +0100},
  file = {D:\data\Zotero\storage\MRTRYCQA\Österlund et al. - 2020 - ParmeSan Sanitizer-guided greybox fuzzing.pdf}
}

@inproceedings{paduraruRiverFuzzRLOpensourceTool2021,
  title = {{{RiverFuzzRL}} - an Open-Source Tool to Experiment with Reinforcement Learning for Fuzzing},
  booktitle = {2021 14th {{IEEE Conference}} on {{Software Testing}}, {{Verification}} and {{Validation}} (Icst)},
  author = {Paduraru, Ciprian and Paduraru, Miruna and Stefanescu, Alin},
  year = {2021},
  pages = {430--435},
  doi = {10.1109/ICST49551.2021.00055},
  langid = {english},
  annotation = {6 citations (Crossref/DOI) [2025-02-27]\\
GSCC: 0000011 \\
TLDR: A new framework for fuzzing techniques and reinforcement learning, named RiverFuzzRL, is introduced on top of the already mature frame-work for AI-guided fuzzing, River, to provide out-of-the-box implementations for users to choose from or customize for their test target.\\
remark: 开源工具结合强化学习与模糊测试},
  file = {D:\data\Zotero\storage\DVPCCBLA\Paduraru et al. - 2021 - RiverFuzzRL - an open-source tool to experiment wi.pdf}
}

@misc{patilGreyboxFuzzingContextual2018,
  title = {Greybox Fuzzing as a Contextual Bandits Problem},
  author = {Patil, Ketan and Kanade, Aditya},
  year = {2018},
  eprint = {1806.03806},
  primaryclass = {cs.AI},
  archiveprefix = {arXiv},
  langid = {english},
  annotation = {GSCC: 0000018 \\
remark: 灰盒模糊测试的上下文赌博算法},
  file = {D:\data\Zotero\storage\UH2YJ4KN\Patil and Kanade - 2018 - Greybox fuzzing as a contextual bandits problem.pdf}
}

@article{peeblesScalableDiffusionModels2022,
  title = {Scalable Diffusion Models with Transformers},
  author = {Peebles, William and Xie, Saining},
  year = {2022},
  journal = {CoRR},
  volume = {abs/2212.09748},
  eprint = {2212.09748},
  doi = {10.48550/arXiv.2212.09748},
  archiveprefix = {arXiv},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/journals/corr/abs-2212-09748.bib},
  timestamp = {Tue, 03 Jan 2023 15:59:43 +0100},
  file = {D:\data\Zotero\storage\XVQQ7FAL\Peebles and Xie - 2022 - Scalable diffusion models with transformers.pdf}
}

@inproceedings{pmlr-v119-fedus20a,
  title = {Revisiting Fundamentals of Experience Replay},
  booktitle = {Proceedings of the 37th International Conference on Machine Learning},
  author = {Fedus, William and Ramachandran, Prajit and Agarwal, Rishabh and Bengio, Yoshua and Larochelle, Hugo and Rowland, Mark and Dabney, Will},
  editor = {III, Hal Daum{\'e} and Singh, Aarti},
  year = {2020},
  month = jul,
  series = {Proceedings of Machine Learning Research},
  volume = {119},
  pages = {3061--3071},
  publisher = {PMLR},
  abstract = {Experience replay is central to off-policy algorithms in deep reinforcement learning (RL), but there remain significant gaps in our understanding. We therefore present a systematic and extensive analysis of experience replay in Q-learning methods, focusing on two fundamental properties: the replay capacity and the ratio of learning updates to experience collected (replay ratio). Our additive and ablative studies upend conventional wisdom around experience replay --- greater capacity is found to substantially increase the performance of certain algorithms, while leaving others unaffected. Counterintuitively we show that theoretically ungrounded, uncorrected n-step returns are uniquely beneficial while other techniques confer limited benefit for sifting through larger memory. Separately, by directly controlling the replay ratio we contextualize previous observations in the literature and empirically measure its importance across a variety of deep RL algorithms. Finally, we conclude by testing a set of hypotheses on the nature of these performance benefits.},
  file = {D:\data\Zotero\storage\3Q63IQDC\Fedus et al. - 2020 - Revisiting fundamentals of experience replay.pdf}
}

@inproceedings{poeplauSymbolicExecutionSymCC2020,
  title = {Symbolic Execution with {{SymCC}}: Don't Interpret, Compile!},
  booktitle = {29th {{USENIX}} Security Symposium ({{USENIX}} Security 20)},
  author = {Poeplau, Sebastian and Francillon, Aur{\'e}lien},
  year = {2020},
  month = aug,
  pages = {181--198},
  publisher = {USENIX Association},
  isbn = {978-1-939133-17-5},
  langid = {english},
  keywords = {thesis (related work)},
  annotation = {GSCC: 0000205 2025-03-02T08:14:51.580Z \\
Read\_Status: Read\\
Read\_Status\_Date: 2025-02-09T06:22:51.481Z\\
titleTranslation: 符号执行与SymCC：不要解释，编译！},
  file = {D:\data\Zotero\storage\R2AZ5GB8\Poeplau_Francillon_2020_Symbolic execution with SymCC.pdf}
}

@article{qianDiPriDistancebasedSeed2024,
  title = {{{DiPri}}: Distance-Based Seed Prioritization for Greybox Fuzzing},
  author = {Qian, Ruixiang and Zhang, Quanjun and Fang, Chunrong and Yang, Ding and Li, Shun and Li, Binyu and Chen, Zhenyu},
  year = {2024},
  month = dec,
  journal = {ACM Trans. Softw. Eng. Methodol.},
  volume = {34},
  number = {1},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  issn = {1049-331X},
  doi = {10.1145/3654440},
  abstract = {Greybox fuzzing is a powerful testing technique. Given a set of initial seeds, greybox fuzzing continuously generates new test inputs to execute the program under test and drives executions with code coverage as feedback. Seed prioritization is an important step of greybox fuzzing that helps greybox fuzzing choose promising seeds for input generation in priority. However, mainstream greybox fuzzers like AFL++ and Zest tend to neglect the importance of seed prioritization. They may pick seeds plainly according to the sequential order of the seeds being queued or an order produced with a random-based approach, which may consequently degrade their performance in exploring code and exposing bugs. In the meantime, existing state-of-the-art techniques like Alphuzz and K-Scheduler adopt complex strategies to schedule seeds. Although powerful, such strategies also inevitably incur great overhead and will reduce the scalability of the proposed technique.In this article, we propose a novel distance-based seed prioritization approach named DiPri to facilitate greybox fuzzing. Specifically, DiPri evaluates the queued seeds according to seed distances and chooses the outlier ones, which are the farthest from the others, in priority to improve the probabilities of discovering previously unexplored code regions. To make a profound evaluation of DiPri, we prototype DiPri on AFL++ and conduct large-scale experiments with four baselines and 24 C/C++ fuzz targets, where eight are from widely adopted real-world projects, eight are from the coverage-based benchmark FuzzBench, and eight are from the bug-based benchmark Magma. The results obtained through a fuzzing exceeding 50,000 CPU hours suggest that DiPri can (1) insignificantly influence the host fuzzer's capability of code coverage by slightly improving the branch coverage on the eight targets from real-world projects and slightly reducing the branch coverage on the eight targets from FuzzBench, and (2) improve the host fuzzer's capability of finding bugs by triggering five more Magma bugs. Besides the evaluation with the three C/C++ benchmarks, we integrate DiPri into the Java fuzzer Zest and conduct experiments on a Java benchmark composed of five real-world programs for more than 8,000 CPU hours to empirically study the scalability of DiPri. The results with the Java benchmark demonstrate that DiPri is pretty scalable and can help the host fuzzer find bugs more consistently.},
  articleno = {26},
  issue_date = {January 2025},
  langid = {english},
  keywords = {Greybox fuzzing,seed distance,seed prioritization},
  annotation = {1 citations (Crossref/DOI) [2025-02-27]\\
GSCC: 0000003 \\
TLDR: A novel distance-based seed prioritization approach named DiPri is proposed to facilitate greybox fuzzing and chooses the outlier ones, which are the farthest from the others, in priority to improve the probabilities of discovering previously unexplored code regions.},
  file = {D:\data\Zotero\storage\FGAGTK3S\Qian et al. - 2024 - DiPri Distance-based seed prioritization for greybox fuzzing.pdf}
}

@article{qianEffectivenessSamplingEvolutionary2018,
  title = {On the Effectiveness of Sampling for Evolutionary Optimization in Noisy Environments},
  author = {Qian, Chao and Yu, Yang and Tang, Ke and Jin, Yaochu and Yao, Xin and Zhou, Zhi-Hua},
  year = {2018},
  journal = {Evolutionary Computation},
  volume = {26},
  number = {2},
  doi = {10.1162/EVCO\_A\_00201},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  timestamp = {Fri, 30 Dec 2022 11:13:35 +0100}
}

@misc{QuicAFLTriage2025,
  title = {Quic/{{AFLTriage}}},
  year = {2025},
  month = mar,
  urldate = {2025-04-28},
  howpublished = {Qualcomm Innovation Center, Inc.},
  keywords = {/unread}
}

@inproceedings{radfordLearningTransferableVisual2021,
  title = {Learning Transferable Visual Models from Natural Language Supervision},
  booktitle = {Proceedings of the 38th International Conference on Machine Learning, {{ICML}} 2021, 18-24 July 2021, Virtual Event},
  author = {Radford, Alec and Kim, Jong Wook and Hallacy, Chris and Ramesh, Aditya and Goh, Gabriel and Agarwal, Sandhini and Sastry, Girish and Askell, Amanda and Mishkin, Pamela and Clark, Jack and Krueger, Gretchen and Sutskever, Ilya},
  editor = {Meila, Marina and Zhang, Tong},
  year = {2021},
  series = {Proceedings of Machine Learning Research},
  volume = {139},
  pages = {8748--8763},
  publisher = {PMLR},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  timestamp = {Wed, 25 Aug 2021 17:11:17 +0200}
}

@misc{ReinforcementLearningDQN,
  title = {Reinforcement {{Learning}} ({{DQN}}) {{Tutorial}} --- {{PyTorch Tutorials}} 2.0.0+cu117 Documentation},
  urldate = {2023-03-17},
  howpublished = {https://pytorch.org/tutorials/intermediate/reinforcement\_q\_learning.html},
  file = {D:\data\Zotero\storage\NEH7TAPI\reinforcement_q_learning.html}
}

@article{richardbellmanTheoryDynamicProgramming1952,
  title = {On the Theory of Dynamic Programming},
  author = {{Richard Bellman}},
  year = {1952},
  journal = {Proceedings of the National Academy of Sciences},
  volume = {38},
  number = {8},
  eprint = {https://www.pnas.org/doi/pdf/10.1073/pnas.38.8.716},
  pages = {716--719},
  doi = {10.1073/pnas.38.8.716}
}

@inproceedings{rombachHighresolutionImageSynthesis2022,
  title = {High-Resolution Image Synthesis with Latent Diffusion Models},
  booktitle = {{{IEEE}}/{{CVF}} Conference on Computer Vision and Pattern Recognition, {{CVPR}} 2022, New Orleans, {{LA}}, {{USA}}, June 18-24, 2022},
  author = {Rombach, Robin and Blattmann, Andreas and Lorenz, Dominik and Esser, Patrick and Ommer, Bj{\"o}rn},
  year = {2022},
  pages = {10674--10685},
  publisher = {IEEE},
  doi = {10.1109/CVPR52688.2022.01042},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/conf/cvpr/RombachBLEO22.bib},
  annotation = {1580 citations (Crossref) [2024-03-31]},
  timestamp = {Wed, 05 Oct 2022 16:31:19 +0200},
  file = {D:\data\Zotero\storage\XV3DUVRM\Rombach et al. - 2022 - High-resolution image synthesis with latent diffus.pdf}
}

@inproceedings{ruffDeepOneclassClassification2018,
  title = {Deep One-Class Classification},
  booktitle = {Proceedings of the 35th International Conference on Machine Learning},
  author = {Ruff, Lukas and Vandermeulen, Robert and Goernitz, Nico and Deecke, Lucas and Siddiqui, Shoaib Ahmed and Binder, Alexander and M{\"u}ller, Emmanuel and Kloft, Marius},
  editor = {Dy, Jennifer and Krause, Andreas},
  year = {2018},
  month = jul,
  series = {Proceedings of Machine Learning Research},
  volume = {80},
  pages = {4393--4402},
  publisher = {PMLR},
  abstract = {Despite the great advances made by deep learning in many machine learning problems, there is a relative dearth of deep learning approaches for anomaly detection. Those approaches which do exist involve networks trained to perform a task other than anomaly detection, namely generative models or compression, which are in turn adapted for use in anomaly detection; they are not trained on an anomaly detection based objective. In this paper we introduce a new anomaly detection method---Deep Support Vector Data Description---, which is trained on an anomaly detection based objective. The adaptation to the deep regime necessitates that our neural network and training procedure satisfy certain properties, which we demonstrate theoretically. We show the effectiveness of our method on MNIST and CIFAR-10 image benchmark datasets as well as on the detection of adversarial examples of GTSRB stop signs.},
  pdf = {http://proceedings.mlr.press/v80/ruff18a/ruff18a.pdf}
}

@book{russellArtificialIntelligenceModern2020,
  title = {Artificial Intelligence: {{A}} Modern Approach (4th Edition)},
  author = {Russell, Stuart and Norvig, Peter},
  year = {2020},
  publisher = {Pearson},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/books/aw/RN2020.bib},
  isbn = {978-0-13-461099-3},
  keywords = {/unread},
  timestamp = {Wed, 20 Apr 2022 13:29:51 +0200}
}

@inproceedings{sahaRarePathGuided2023,
  title = {Rare Path Guided Fuzzing},
  booktitle = {Proceedings of the 32nd {{ACM Sigsoft International Symposium}} on {{Software Testing}} and {{Analysis}}, {{Issta}} 2023, {{Seattle}}, {{Wa}}, {{Usa}}, {{July}} 17-21, 2023},
  author = {Saha, Seemanta and Sarker, Laboni and Shafiuzzaman, Md and Shou, Chaofan and Li, Albert and Sankaran, Ganesh and Bultan, Tevfik},
  editor = {Just, Ren{\'e} and Fraser, Gordon},
  year = {2023},
  pages = {1295--1306},
  publisher = {ACM},
  doi = {10.1145/3597926.3598136},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  langid = {english},
  keywords = {Concolic execution,Control flow analysis,Fuzz testing,Model counting,Probabilistic analysis},
  annotation = {3 citations (Crossref/DOI) [2025-02-27]\\
1 citations (Crossref) [2024-03-31]\\
GSCC: 0000012 \\
TLDR: This paper presents techniques that identify rare paths in programs using quantitative symbolic analysis, and generates inputs that can explore these rare paths using path-guided concolic execution and provides these inputs as initial seed sets to three state of the art fuzzers.\\
remark: 基于稀有路径的模糊测试方法},
  timestamp = {Mon, 17 Jul 2023 12:40:11 +0200},
  file = {D:\data\Zotero\storage\73G97ZML\Saha et al. - 2023 - Rare path guided fuzzing.pdf}
}

@inproceedings{sallsTokenlevelFuzzing2021,
  title = {Token-Level Fuzzing},
  booktitle = {30th {{Usenix Security Symposium}}, {{Usenix Security}} 2021, {{August}} 11-13, 2021},
  author = {Salls, Christopher and Jindal, Chani and Corina, Jake and Kruegel, Christopher and Vigna, Giovanni},
  editor = {Bailey, Michael and Greenstadt, Rachel},
  year = {2021},
  pages = {2795--2809},
  publisher = {USENIX Association},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/conf/uss/SallsJCKV21.bib},
  langid = {english},
  annotation = {GSCC: 0000022 \\
remark: 基于令牌的模糊测试技术},
  timestamp = {Thu, 16 Sep 2021 17:32:10 +0200},
  file = {D:\data\Zotero\storage\NDGWT2RQ\Salls et al. - 2021 - Token-level fuzzing.pdf}
}

@inproceedings{schaulPrioritizedExperienceReplay2016,
  title = {Prioritized Experience Replay},
  booktitle = {4th International Conference on Learning Representations, {{ICLR}} 2016, San Juan, Puerto Rico, May 2-4, 2016, Conference Track Proceedings},
  author = {Schaul, Tom and Quan, John and Antonoglou, Ioannis and Silver, David},
  editor = {Bengio, Yoshua and LeCun, Yann},
  year = {2016},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/journals/corr/SchaulQAS15.bib},
  timestamp = {Thu, 25 Jul 2019 14:25:38 +0200},
  file = {D:\data\Zotero\storage\GERTHE3A\Schaul et al. - 2016 - Prioritized experience replay.pdf}
}

@inproceedings{schloegelSoKPrudentEvaluation2024,
  title = {{{SoK}}: Prudent Evaluation Practices for Fuzzing},
  booktitle = {2024 {{IEEE Symposium}} on {{Security}} and {{Privacy}} (Sp)},
  author = {Schloegel, M. and Bars, N. and Schiller, N. and Bernhard, L. and Scharnowski, T. and Crump, A. and {Ale-Ebrahim}, A. and Bissantz, N. and Muench, M. and Holz, T.},
  year = {2024},
  month = may,
  pages = {140--140},
  publisher = {IEEE Computer Society},
  address = {Los Alamitos, CA, USA},
  issn = {2375-1207},
  doi = {10.1109/SP54263.2024.00137},
  abstract = {Fuzzing has proven to be a highly effective approach to uncover software bugs over the past decade. After AFL popularized the groundbreaking concept of lightweight coverage feedback, the field of fuzzing has seen a vast amount of scientific work proposing new techniques, improving methodological aspects of existing strategies, or porting existing methods to new domains. All such work must demonstrate its merit by showing its applicability to a problem, measuring its performance, and often showing its superiority over existing works in a thorough, empirical evaluation. Yet, fuzzing is highly sensitive to its target, environment, and circumstances, e.g., randomness in the testing process. After all, relying on randomness is one of the core principles of fuzzing, governing many aspects of a fuzzer\&\#x27;s behavior. Combined with the often highly difficult to control environment, the reproducibility of experiments is a crucial concern and requires a prudent evaluation setup. To address these threats to validity, several works, most notably Evaluating Fuzz Testing by Klees et al., have outlined how a carefully designed evaluation setup should be implemented, but it remains unknown to what extent their recommendations have been adopted in practice. In this work, we systematically analyze the evaluation of 150 fuzzing papers published at the top venues between 2018 and 2023. We study how existing guidelines are implemented and observe potential shortcomings and pitfalls. We find a surprising disregard of the existing guidelines regarding statistical tests and systematic errors in fuzzing evaluations. For example, when investigating reported bugs, we find that the search for vulnerabilities in real-world software leads to authors requesting and receiving CVEs of questionable quality. Extending our literature analysis to the practical domain, we attempt to reproduce claims of eight fuzzing papers. These case studies allow us to assess the practical reproducibility of fuzzing research and identify archetypal pitfalls in the evaluation design. Unfortunately, our reproduced results reveal several deficiencies in the studied papers, and we are unable to fully support and reproduce the respective claims. To help the field of fuzzing move toward a scientifically reproducible evaluation strategy, we propose updated guidelines for conducting a fuzzing evaluation that future work should follow.},
  langid = {english},
  keywords = {/UR,fuzz testing,fuzzing,reproducibility},
  annotation = {1 citations (Crossref/DOI) [2025-02-27]\\
GSCC: 0000029 \\
TLDR: This work systematically analyzes the evaluation of 150 fuzzing papers published at the top venues between 2018 and 2023 and proposes updated guidelines for conducting a fuzzing evaluation that future work should follow.\\
remark: 模糊测试评估规范研究},
  file = {D:\data\Zotero\storage\6B78W88Q\Schloegel et al_2024_SoK.pdf}
}

@article{schrittwieserMasteringAtariGo2020,
  title = {Mastering Atari, Go, Chess and Shogi by Planning with a Learned Model},
  author = {Schrittwieser, Julian and Antonoglou, Ioannis and Hubert, Thomas and Simonyan, Karen and Sifre, Laurent and Schmitt, Simon and Guez, Arthur and Lockhart, Edward and Hassabis, Demis and Graepel, Thore and Lillicrap, Timothy and Silver, David},
  year = {2020},
  month = dec,
  journal = {Nature},
  volume = {588},
  number = {7839},
  pages = {604--609},
  publisher = {{Springer Science and Business Media LLC}},
  issn = {1476-4687},
  doi = {10.1038/s41586-020-03051-4},
  annotation = {TLDR: The MuZero algorithm is presented, which, by combining a tree-based search with a learned model, achieves superhuman performance in a range of challenging and visually complex domains, without any knowledge of their underlying dynamics.},
  file = {D:\data\Zotero\storage\JIDMQXMH\Schrittwieser et al. - 2020 - Mastering atari, go, chess and shogi by planning with a learned model.pdf}
}

@misc{schulmanProximalPolicyOptimization2017,
  title = {Proximal Policy Optimization Algorithms},
  author = {Schulman, John and Wolski, Filip and Dhariwal, Prafulla and Radford, Alec and Klimov, Oleg},
  year = {2017},
  eprint = {1707.06347},
  primaryclass = {cs.LG},
  archiveprefix = {arXiv},
  file = {D:\data\Zotero\storage\S429KK2L\Schulman et al. - 2017 - Proximal policy optimization algorithms.pdf}
}

@inproceedings{serebryanyAddressSanitizerFastAddress2012,
  title = {{{AddressSanitizer}}: {{A}} Fast Address Sanity Checker},
  booktitle = {2012 {{USENIX}} Annual Technical Conference, Boston, {{MA}}, {{USA}}, June 13-15, 2012},
  author = {Serebryany, Konstantin and Bruening, Derek and Potapenko, Alexander and Vyukov, Dmitriy},
  editor = {Heiser, Gernot and Hsieh, Wilson C.},
  year = {2012},
  pages = {309--318},
  publisher = {USENIX Association},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/conf/usenix/SerebryanyBPV12.bib},
  timestamp = {Mon, 01 Feb 2021 08:43:53 +0100},
  file = {D:\data\Zotero\storage\H9GAAESN\Serebryany et al_2012_AddressSanitizer.pdf}
}

@inproceedings{shaoOptimizedMutationGreybox2023,
  title = {Optimized Mutation of Grey-Box Fuzzing: {{A}} Deep {{RL-based}} Approach},
  booktitle = {2023 {{IEEE}} 12th Data Driven Control and Learning Systems Conference ({{DDCLS}})},
  author = {Shao, Jiawei and Zhou, Yan and Liu, Guohua and Zheng, Dezhi},
  year = {2023},
  pages = {1296--1300},
  doi = {10.1109/DDCLS58216.2023.10166955},
  annotation = {1 citations (Crossref/DOI) [2025-02-27]\\
0 citations (Crossref) [2024-03-31]\\
GSCC: 0000002 \\
TLDR: Experimental results show that the proposed deep reinforcement learning-based fuzzing method outperforms the baseline random fuzzing algorithms.},
  file = {D:\data\Zotero\storage\TRR8UXCH\Shao et al_2023_Optimized mutation of grey-box fuzzing.pdf}
}

@inproceedings{sheEffectiveSeedScheduling2022,
  title = {Effective Seed Scheduling for Fuzzing with Graph Centrality Analysis},
  booktitle = {2022 {{IEEE Symposium}} on {{Security}} and {{Privacy}} (Sp)},
  author = {She, Dongdong and Shah, Abhishek and Jana, Suman},
  year = {2022},
  pages = {2194--2211},
  doi = {10.1109/SP46214.2022.9833761},
  langid = {english},
  keywords = {fuzzing,information,K-scheduler,readed,scheduling,thesis (related work)},
  annotation = {GSCC: 0000073 2025-06-04T05:50:59.831Z \\
27 citations (Crossref/DOI) [2025-02-27]\\
27 citations (Crossref/DOI) [2025-02-27]\\
27 citations (Crossref/DOI) [2025-02-27]\\
12 citations (Crossref) [2024-03-31]\\
GSCC: 0000066 \\
Read\_Status: Read\\
Read\_Status\_Date: 2025-01-29T03:17:46.917Z\\
remark: {$<$}think{$>$}好的，现在需要处理用户提供的多个论文摘要，并为每个摘要生成一个不超过15字的中文概括。用户之前已经给出了几个例子，比如``基于马尔可夫链的灰盒模糊测试优化''和``路径敏感的模糊测试优化''等等。现在需要仔细分析最后一个摘要，并按照同样的模式生成结果。首先，阅读最后一个摘要的标题：``Effective Seed Scheduling for Fuzzing with Graph Centrality Analysis''，即``基于图中心性分析的模糊测试有效种子调度''。摘要的主要观点是，通过分析控制流图（CFG）的结构，利用图中心性指标来优化种子调度，以提高模糊测试的效率和覆盖率。现有的方法基于历史变异数据，而忽略了CFG结构，而新方法通过构建边缘范围图（edge horizon graph）并计算种子节点的中心性，来估计通过变异该种子可能覆盖的新边数量，从而更有效地安排种子的变异顺序。接下来，需要将这些内容浓缩成一句话，不超过15个字。关键点包括：种子调度、图中心性分析、模糊测试优化。可能的组合方式有``基于图中心性的种子调度优化''或者``图中心性分析的模糊测试调度''。不过需要确保语言流畅且准确。用户之前的例子多用``优化''作为结尾，例如``灰盒模糊测试优化''。因此，可以考虑类似结构，比如``基于图中心性的种子调度优化''或者``图中心性分析的种子调度优化''。再检查字数，``基于图中心性的种子调度优化''共15字，符合要求。因此，最终结果应该是这个。{$<$}/think{$>$}基于图中心性的种子调度优化},
  file = {D:\data\Zotero\storage\W274SKPH\She et al_2022_Effective seed scheduling for fuzzing with graph centrality analysis.pdf}
}

@inproceedings{sheFOXCoverageguidedFuzzing2024,
  title = {{{FOX}}: Coverage-Guided Fuzzing as Online Stochastic Control},
  booktitle = {Proceedings of the 2024 on {{ACM SIGSAC}} Conference on Computer and Communications Security},
  author = {She, Dongdong and Storek, Adam and Xie, Yuchong and Kweon, Seoyoung and Srivastava, Prashast and Jana, Suman},
  year = {2024},
  series = {Ccs '24},
  pages = {765--779},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/3658644.3670362},
  abstract = {Fuzzing is an effective technique for discovering software vulnerabilities by generating random test inputs and executing them against the target program. However, fuzzing large and complex programs remains challenging due to difficulties in uncovering deeply hidden vulnerabilities. This paper addresses the limitations of existing coverage-guided fuzzers, focusing on the scheduler and mutator components. Existing schedulers suffer from information sparsity and the inability to handle fine-grained feedback metrics. The mutators are agnostic of target program branches, leading to wasted computation and slower coverage exploration.To overcome these issues, we propose an end-to-end online stochastic control formulation for coverage-guided fuzzing. Our approach incorporates a novel scheduler and custom mutator that can adapt to branch logic, maximizing aggregate edge coverage achieved over multiple stages. The scheduler utilizes fine-grained branch distance measures to identify frontier branches, where new coverage is likely to be achieved. The mutator leverages branch distance information to perform efficient and targeted seed mutations, leading to robust progress with minimal overhead.We present FOX, a proof-of-concept implementation of our control-theoretic approach, and compare it to industry-standard coverage-guided fuzzers. 6 CPU-years of extensive evaluations on the FuzzBench dataset and complex real-world programs (a total of 38 test programs) demonstrate that FOX outperforms existing state-of-the-art fuzzers, achieving average coverage improvements up to 26.45\% in real-world standalone programs and 6.59\% in FuzzBench programs over the state-of-the-art AFL++. In addition, it uncovers 20 unique bugs in popular real-world applications, including eight that are previously unknown, showcasing real-world security impact.},
  isbn = {979-8-4007-0636-3},
  langid = {english},
  keywords = {coverage-guided fuzzing,fuzzing,online stochastic control,software testing},
  annotation = {0 citations (Crossref/DOI) [2025-02-27]\\
GSCC: 0000001 \\
remark: "FOX：通过在线随机控制提升代码覆盖率的模糊测试技术。"\\
Read\_Status: Corse-grained read\\
Read\_Status\_Date: 2025-02-23T12:33:04.472Z\\
TLDR: 6 CPU-years of extensive evaluations on the FuzzBench dataset and complex real-world programs demonstrate that FOX outperforms existing state-of-the-art fuzzers, achieving average coverage improvements up to 26.45\% in real-world standalone programs and 6.59\% in FuzzBench programs over the state-of-the-art AFL++.},
  file = {D:\data\Zotero\storage\VL3P9N6R\She et al_2024_FOX.pdf}
}

@inproceedings{sheMTFuzzFuzzingMultitask2020,
  title = {{{MTFuzz}}: Fuzzing with a Multi-Task Neural Network},
  booktitle = {Proceedings of the 28th {{ACM Joint Meeting}} on {{European Software Engineering Conference}} and {{Symposium}} on the {{Foundations}} of {{Software Engineering}}},
  author = {She, Dongdong and Krishna, Rahul and Yan, Lu and Jana, Suman and Ray, Baishakhi},
  year = {2020},
  series = {{{ESEC}}/{{FSE}} 2020},
  pages = {737--749},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/3368089.3409723},
  abstract = {Fuzzing is a widely used technique for detecting software bugs and vulnerabilities. Most popular fuzzers generate new inputs using an evolutionary search to maximize code coverage. Essentially, these fuzzers start with a set of seed inputs, mutate them to generate new inputs, and identify the promising inputs using an evolutionary fitness function for further mutation.Despite their success, evolutionary fuzzers tend to get stuck in long sequences of unproductive mutations. In recent years, machine learning (ML) based mutation strategies have reported promising results. However, the existing ML-based fuzzers are limited by the lack of quality and diversity of the training data. As the input space of the target programs is high dimensional and sparse, it is prohibitively expensive to collect many diverse samples demonstrating successful and unsuccessful mutations to train the model.In this paper, we address these issues by using a Multi-Task Neural Network that can learn a compact embedding of the input space based on diverse training samples for multiple related tasks (i.e.,predicting for different types of coverage). The compact embedding can guide the mutation process by focusing most of the mutations on the parts of the embedding where the gradient is high. MTFuzz uncovers 11 previously unseen bugs and achieves an average of 2{\texttimes} more edge coverage compared with 5 state-of-the-art fuzzer on 10 real-world programs},
  isbn = {978-1-4503-7043-1},
  langid = {english},
  keywords = {Fuzzing,Machine learning,Multi-task learning},
  annotation = {30 citations (Crossref/DOI) [2025-02-27]\\
GSCC: 0000079 \\
TLDR: A Multi-Task Neural Network is used that can learn a compact embedding of the input space based on diverse training samples for multiple related tasks that can guide the mutation process by focusing most of the mutations on the parts of the embedding where the gradient is high.\\
remark: 多任务神经网络改进模糊测试},
  file = {D:\data\Zotero\storage\C4BUZZTZ\She et al. - 2020 - MTFuzz Fuzzing with a multi-task neural network.pdf}
}

@inproceedings{sheNEUZZEfficientFuzzing2019,
  title = {{{NEUZZ}}: Efficient Fuzzing with Neural Program Smoothing},
  booktitle = {2019 {{IEEE Symposium}} on {{Security}} and {{Privacy}} (Sp)},
  author = {She, Dongdong and Pei, Kexin and Epstein, Dave and Yang, Junfeng and Ray, Baishakhi and Jana, Suman},
  year = {2019},
  pages = {803--817},
  doi = {10.1109/SP.2019.00052},
  langid = {english},
  keywords = {/UR,thesis (related work)},
  annotation = {GSCC: 0000304 2025-03-02T09:07:18.701Z \\
103 citations (Crossref/DOI) [2025-02-27]\\
GSCC: 0000304 2025-03-02T09:07:18.701Z \\
TLDR: A novel program smoothing technique using surrogate neural network models that can incrementally learn smooth approximations of a complex, real-world program's branching behaviors is proposed and used together with gradient-guided input generation schemes to significantly increase the efficiency of the fuzzing process.\\
remark: NEUZZ：基于神经网络的模糊测试优化\\
Read\_Status: Read\\
Read\_Status\_Date: 2025-02-18T06:44:23.134Z\\
CCF: A},
  file = {D:\data\Zotero\storage\FCF33XVB\She et al. - 2019 - NEUZZ Efficient fuzzing with neural program smoot.pdf}
}

@inproceedings{shenTimeseriesAnomalyDetection2020,
  title = {Timeseries Anomaly Detection Using Temporal Hierarchical One-Class Network},
  booktitle = {Advances in Neural Information Processing Systems},
  author = {Shen, Lifeng and Li, Zhuocong and Kwok, James},
  editor = {Larochelle, H. and Ranzato, M. and Hadsell, R. and Balcan, M.F. and Lin, H.},
  year = {2020},
  volume = {33},
  pages = {13016--13026},
  publisher = {Curran Associates, Inc.},
  file = {D:\data\Zotero\storage\YU3ZVXY3\Shen et al. - 2020 - Timeseries anomaly detection using temporal hierar.pdf}
}

@inproceedings{shiAIFORESmartFuzzing2023,
  title = {\{\vphantom\}{{AIFORE}}\vphantom\{\}: Smart Fuzzing Based on Automatic Input Format Reverse Engineering},
  booktitle = {32nd {{Usenix Security Symposium}} (Usenix {{Security}} 23)},
  author = {Shi, Ji and Wang, Zhun and Feng, Zhiyao and Lan, Yang and Qin, Shisong and You, Wei and Zou, Wei and Payer, Mathias and Zhang, Chao},
  year = {2023},
  pages = {4967--4984},
  langid = {english},
  annotation = {GSCC: 0000013 \\
remark: 智能模糊测试基于输入格式逆向工程},
  file = {D:\data\Zotero\storage\B485HU5D\Shi et al_2023_ AIFORE .pdf}
}

@misc{silverMasteringChessShogi2017,
  title = {Mastering Chess and Shogi by Self-Play with a General Reinforcement Learning Algorithm},
  author = {Silver, David and Hubert, Thomas and Schrittwieser, Julian and Antonoglou, Ioannis and Lai, Matthew and Guez, Arthur and Lanctot, Marc and Sifre, Laurent and Kumaran, Dharshan and Graepel, Thore and Lillicrap, Timothy and Simonyan, Karen and Hassabis, Demis},
  year = {2017},
  eprint = {1712.01815},
  primaryclass = {cs.AI},
  archiveprefix = {arXiv},
  langid = {english},
  keywords = {/unread}
}

@article{silverMasteringGameGo2016,
  title = {Mastering the Game of {{Go}} with Deep Neural Networks and Tree Search},
  author = {Silver, David and Huang, Aja and Maddison, Chris J. and Guez, Arthur and Sifre, Laurent and {van den Driessche}, George and Schrittwieser, Julian and Antonoglou, Ioannis and Panneershelvam, Vedavyas and Lanctot, Marc and Dieleman, Sander and Grewe, Dominik and Nham, John and Kalchbrenner, Nal and Sutskever, Ilya and Lillicrap, Timothy P. and Leach, Madeleine and Kavukcuoglu, Koray and Graepel, Thore and Hassabis, Demis},
  year = {2016},
  journal = {Nat.},
  volume = {529},
  number = {7587},
  pages = {484--489},
  doi = {10.1038/nature16961},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/journals/nature/SilverHMGSDSAPL16.bib},
  annotation = {TLDR: Using this search algorithm, the program AlphaGo achieved a 99.8\% winning rate against other Go programs, and defeated the human European Go champion by 5 games to 0.5, the first time that a computer program has defeated a human professional player in the full-sized game of Go.},
  timestamp = {Mon, 27 Sep 2021 17:38:59 +0200},
  file = {D:\data\Zotero\storage\XZNKP8AM\Silver et al. - 2016 - Mastering the game of Go with deep neural networks.pdf}
}

@article{silverMasteringGameGo2017,
  title = {Mastering the Game of {{Go}} without Human Knowledge},
  author = {Silver, David and Schrittwieser, Julian and Simonyan, Karen and Antonoglou, Ioannis and Huang, Aja and Guez, Arthur and Hubert, Thomas and Baker, Lucas and Lai, Matthew and Bolton, Adrian and Chen, Yutian and Lillicrap, Timothy P. and Hui, Fan and Sifre, Laurent and {van den Driessche}, George and Graepel, Thore and Hassabis, Demis},
  year = {2017},
  journal = {Nat.},
  volume = {550},
  number = {7676},
  pages = {354--359},
  doi = {10.1038/nature24270},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/journals/nature/SilverSSAHGHBLB17.bib},
  timestamp = {Mon, 27 Sep 2021 17:38:55 +0200},
  file = {D:\data\Zotero\storage\WZI939FV\Silver et al. - 2017 - Mastering the game of Go without human knowledge.pdf}
}

@article{songGreyBoxFuzzingBased2023,
  title = {Grey-Box Fuzzing Based on Reinforcement Learning for {{XSS}} Vulnerabilities},
  author = {Song, X. and Zhang, R. and Dong, Q. and Cui, B.},
  year = {2023},
  journal = {Applied Sciences (Switzerland)},
  volume = {13},
  number = {4},
  publisher = {MDPI},
  issn = {20763417 (ISSN)},
  doi = {10.3390/app13042482},
  abstract = {Cross-site scripting (XSS) vulnerabilities are significant threats to web applications. The number of XSS vulnerabilities reported has increased annually for the past three years, posing a considerable challenge to web application maintainers. Black-box scanners are mainstream tools for security engineers to perform penetration testing and detect XSS vulnerabilities. Unfortunately, black-box scanners rely on crawlers to find input points of web applications and cannot guarantee all input points are tested. To this end, we propose a grey-box fuzzing method based on reinforcement learning, which can detect reflected and stored XSS vulnerabilities for Java web applications. We first use static analysis to identify potential input points from components (i.e., Java code, configuration files, and HTML files) of the Java web application. Then, an XSS vulnerability payload generation method is proposed, which is used together with the reinforcement learning model. We define the state, action, and reward functions of three reinforcement learning models for XSS vulnerability detection scenarios so that the fuzz loop can be performed automatically. To demonstrate the effectiveness of the proposed method, we compare it against four state-of-the-art web scanners. Experimental results show that our method finds all XSS vulnerabilities and has no false positives. {\copyright} 2023 by the authors.},
  langid = {english},
  keywords = {fuzzing testing,reinforcement learning,web security,XSS vulnerability},
  annotation = {2 citations (Crossref/DOI) [2025-02-27]\\
1 citations (Crossref) [2024-03-31]\\
GSCC: 0000007 \\
TLDR: A grey-box fuzzing method based on reinforcement learning, which can detect reflected and stored XSS vulnerabilities for Java web applications and has no false positives is proposed.},
  file = {D:\data\Zotero\storage\DVIP7IBA\Song et al_2023_Grey-Box Fuzzing Based on Reinforcement Learning for XSS Vulnerabilities.pdf}
}

@inproceedings{srivastavaOneFuzzDoesnt2022,
  title = {One Fuzz Doesn't Fit All: Optimizing Directed Fuzzing via Target-Tailored Program State Restriction},
  booktitle = {Proceedings of the 38th {{Annual Computer Security Applications Conference}}},
  author = {Srivastava, Prashast and Nagy, Stefan and Hicks, Matthew and Bianchi, Antonio and Payer, Mathias},
  year = {2022},
  series = {{{ACSAC}} '22},
  pages = {388--399},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/3564625.3564643},
  abstract = {Fuzzing is the de-facto default technique to discover software flaws, randomly testing programs to discover crashing test cases. Yet, a particular scenario may only care about specific code regions (for, e.g., bug reproduction, patch or regression testing)---spurring the adoption of directed fuzzing. Given a set of pre-determined target locations, directed fuzzers drive exploration toward them through distance minimization strategies that (1) isolate the closest-reaching test cases and (2) mutate them stochastically. However, these strategies are applied onto every explored test case---irrespective of whether they ever reach the targets---stalling progress on the paths where targets are unreachable. Accelerating directed fuzzing requires prioritizing target-reachable paths. To overcome the bottleneck of wasteful exploration in directed fuzzing, we introduce tripwiring: a lightweight technique to preempt and terminate the fuzzing of paths that will never reach target locations. By constraining exploration to only the set of target-reachable program paths, tripwiring curtails directed fuzzers' search noise---while unshackling them from the high-overhead instrumentation and bookkeeping of distance minimization---enabling directed fuzzers to obtain up to 99 {\texttimes} higher test case throughput. We\&nbsp;implement tripwiring-directed fuzzing as a prototype, SieveFuzz, and evaluate it alongside the state-of-the-art directed fuzzers AFLGo, BEACON and the leading undirected fuzzer AFL++. Overall, across nine benchmarks, SieveFuzz's tripwiring enables it to trigger bugs on an average 47\% more consistently and 117\% faster than AFLGo, BEACON and AFL++.},
  isbn = {978-1-4503-9759-9},
  langid = {english},
  keywords = {directed fuzzing,hybrid analysis,state space restriction,tripwiring},
  annotation = {GSCC: 0000019 2025-02-27T04:19:48.899Z \\
5 citations (Crossref/DOI) [2025-02-27]\\
1 citations (Crossref) [2024-03-31]\\
GSCC: 0000019 \\
TLDR: This work implements tripwiring-directed fuzzing as a prototype, SieveFuzz, and evaluates it alongside the state-of-the-art directed fuzzers AFLGo, BEACON and the leading undirected fuzzer AFL++.\\
remark: 定向模糊优化技术\\
Read\_Status: Only AI-summary\\
Read\_Status\_Date: 2025-04-05T03:19:31.475Z},
  file = {D:\data\Zotero\storage\3EDGTHU2\Srivastava et al_2022_One fuzz doesn’t fit all.pdf}
}

@misc{sujit2023prioritizing,
  title = {Prioritizing Samples in Reinforcement Learning with Reducible Loss},
  author = {Sujit, Shivakanth and Nath, Somjit and Braga, Pedro H. M. and Kahou, Samira Ebrahimi},
  year = {2023},
  eprint = {2208.10483},
  primaryclass = {cs.LG},
  archiveprefix = {arXiv}
}

@book{suttonReinforcementLearningSecond2018,
  title = {Reinforcement Learning, Second Edition: An Introduction},
  author = {Sutton, R.S. and Barto, A.G.},
  year = {2018},
  series = {Adaptive Computation and Machine Learning Series},
  publisher = {MIT Press},
  isbn = {978-0-262-03924-6},
  langid = {english},
  lccn = {2018023826},
  keywords = {/unread},
  file = {D:\data\Zotero\storage\JUA8STW4\Sutton and Barto - 2018 - Reinforcement learning, second edition an introduction.pdf}
}

@inproceedings{tangDeepReinforcementLearning2025,
  title = {Deep Reinforcement Learning for Robotics: A Survey of Real-World Successes},
  booktitle = {{{AAAI-25}}, {{Sponsored}} by the {{Association}} for the {{Advancement}} of {{Artificial Intelligence}}, {{February}} 25 - {{March}} 4, 2025, {{Philadelphia}}, {{PA}}, {{USA}}},
  author = {Tang, Chen and Abbatematteo, Ben and Hu, Jiaheng and Chandra, Rohan and {Mart{\'{\i}}n-Mart{\'{\i}}n}, Roberto and Stone, Peter},
  editor = {Walsh, Toby and Shah, Julie and Kolter, Zico},
  year = {2025},
  pages = {28698--28699},
  publisher = {AAAI Press},
  doi = {10.1609/AAAI.V39I27.35095},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  langid = {english},
  keywords = {/unread},
  timestamp = {Fri, 27 Jun 2025 11:14:11 +0200}
}

@inproceedings{tapplerSearchbasedTestingReinforcement2022,
  title = {Search-Based Testing of Reinforcement Learning},
  booktitle = {Proceedings of the Thirty-First International Joint Conference on Artificial Intelligence, {{IJCAI}} 2022, Vienna, Austria, 23-29 July 2022},
  author = {Tappler, Martin and C{\'o}rdoba, Filip Cano and Aichernig, Bernhard K. and K{\"o}nighofer, Bettina},
  editor = {Raedt, Luc De},
  year = {2022},
  pages = {503--510},
  publisher = {ijcai.org},
  doi = {10.24963/ijcai.2022/72},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/conf/ijcai/TapplerCAK22.bib},
  annotation = {9 citations (Crossref) [2024-03-31]},
  timestamp = {Wed, 27 Jul 2022 16:43:00 +0200},
  file = {D:\data\Zotero\storage\BSRGF52J\Tappler et al. - 2022 - Search-based testing of reinforcement learning.pdf}
}

@article{towersGymnasiumStandardInterface2024,
  title = {Gymnasium: A Standard Interface for Reinforcement Learning Environments},
  author = {Towers, Mark and Kwiatkowski, Ariel and Terry, Jordan and Balis, John U and De Cola, Gianluca and Deleu, Tristan and Goul{\~a}o, Manuel and Kallinteris, Andreas and Krimmel, Markus and Kg, Arjun and {Others}},
  year = {2024},
  journal = {Arxiv Preprint Arxiv:2407.17032},
  eprint = {2407.17032},
  archiveprefix = {arXiv},
  langid = {english},
  keywords = {/unread,No DOI found}
}

@article{venkatakeerthyIR2VecLLVMIR2020,
  title = {{{IR2Vec}}: {{LLVM IR}} Based Scalable Program Embeddings},
  author = {VenkataKeerthy, S. and Aggarwal, Rohit and Jain, Shalini and Desarkar, Maunendra Sankar and Upadrasta, Ramakrishna and Srikant, Y. N.},
  year = {2020},
  month = dec,
  journal = {ACM Trans. Archit. Code Optim.},
  volume = {17},
  number = {4},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  issn = {1544-3566},
  doi = {10.1145/3418463},
  articleno = {32},
  issue_date = {December 2020},
  keywords = {compiler optimizations,heterogeneous systems,intermediate representations,LLVM,representation learning},
  file = {D:\data\Zotero\storage\CFW874RZ\VenkataKeerthy et al. - 2020 - IR2VEC LLVM IR based scalable program embeddings.pdf}
}

@misc{wangBoostingSoftActorcritic2019,
  title = {Boosting Soft Actor-Critic: {{Emphasizing}} Recent Experience without Forgetting the Past},
  author = {Wang, Che and Ross, Keith},
  year = {2019},
  eprint = {1906.04009},
  primaryclass = {cs.LG},
  archiveprefix = {arXiv},
  file = {D:\data\Zotero\storage\ERD99VNL\Wang and Ross - 2019 - Boosting soft actor-critic Emphasizing recent exp.pdf}
}

@article{wangCMFuzzContextawareAdaptive2021,
  title = {{{CMFuzz}}: Context-Aware Adaptive Mutation for Fuzzers},
  author = {Wang, Xiajing and Hu, Changzhen and Ma, Rui and Tian, Donghai and He, Jinyuan},
  year = {2021},
  journal = {Empirical Software Engineering},
  volume = {26},
  number = {1},
  pages = {10},
  doi = {10.1007/S10664-020-09927-3},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  langid = {english},
  annotation = {GSCC: 0000013 2025-02-27T04:15:08.046Z \\
5 citations (Crossref) [2024-03-31]\\
GSCC: 0000013 2025-02-27T04:15:08.046Z \\
TLDR: CMFuzz, a novel context-aware adaptive mutation scheme, is proposed, which utilizes a contextual bandit algorithm LinUCB to effectively choose optimal mutation operators for various seed files and achieves higher code coverage and find more crashes at a faster rate than their counterparts on most cases.\\
Read\_Status: Not Reading\\
Read\_Status\_Date: 2025-02-11T13:13:28.521Z\\
remark: "CMFuzz：一种基于上下文的自适应模糊测试方法。"},
  timestamp = {Tue, 26 Jan 2021 14:40:11 +0100},
  file = {D:\data\Zotero\storage\ZJZPVSM9\Wang et al_2021_CMFuzz.pdf}
}

@inproceedings{wangNotAllCoverage2020,
  title = {Not All Coverage Measurements Are Equal: Fuzzing by Coverage Accounting for Input Prioritization},
  booktitle = {27th {{Annual Network}} and {{Distributed System Security Symposium}}, {{Ndss}} 2020, {{San Diego}}, {{California}}, {{Usa}}, {{February}} 23-26, 2020},
  author = {Wang, Yanhao and Jia, Xiangkun and Liu, Yuwei and Zeng, Kyle and Bao, Tiffany and Wu, Dinghao and Su, Purui},
  year = {2020},
  publisher = {The Internet Society},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  langid = {english},
  keywords = {fuzzing,information,readed,scheduling,TortoiseFuzz},
  annotation = {GSCC: 0000156 2025-06-04T05:51:20.725Z \\
CCF: A\\
remark: {$<$}think{$>$}嗯，用户让我用不超过15个字的中文来概括这篇论文的主要内容。首先，我需要快速阅读摘要，找出核心观点。这篇论文的标题是``Not All Coverage Measurements Are Equal: Fuzzing by Coverage Accounting for Input Prioritization''，摘要里提到现有的模糊测试工具平等对待所有覆盖的代码，导致效率低下。他们提出了一种叫做``覆盖度计量''的新方法，根据安全影响来评估覆盖，并开发了TortoiseFuzz工具。接下来，我需要确定关键词。现有的方法平等对待覆盖，而新方法根据安全影响区分不同的覆盖。重点在于覆盖度计量和输入优先级。用户给的例子，比如之前的``基于马尔可夫链的灰盒模糊测试优化''和``路径敏感的模糊测试优化''，都是突出方法的核心改进。要确保在15字以内，可能需要用``覆盖度计量的模糊测试优化''或者``基于安全影响的覆盖优化模糊测试''。不过用户强调要简短，可能需要更精炼。比如``覆盖度计量优先的模糊测试''或者``覆盖安全影响的模糊测试优化''。但可能需要更准确。再仔细看一下摘要，作者提出coverage accounting，通过三个指标来评估覆盖，并优先处理那些对安全影响更大的部分。所以核心是覆盖度计量和输入优先级调整。可能总结为``基于安全影响的覆盖度计量模糊测试优化''，但超过15字。需要简化，比如``覆盖度计量的模糊测试优化''或者``覆盖安全优先的模糊测试''。或者更简洁，``覆盖度计量优化模糊测试''。但可能用户希望突出输入优先级，所以``输入优先的覆盖度计量模糊测试''可能更准确，但字数可能不够。或者``覆盖度计量的输入优先模糊测试''，正好15字。或者更简洁，``覆盖度计量优化输入优先级''。不过需要更直接点出论文贡献。最后决定，用``覆盖度计量的模糊测试输入优化''或者``基于覆盖度计量的输入优先''。或者``覆盖安全优先的模糊测试优化''。可能用户给的例子中，之前有用``路径敏感''、``节能''等，所以这里的关键是覆盖度计量（Coverage Accounting）和输入优先级。最终，选择``覆盖度计量的输入优先模糊测试''可能刚好15字。不过需要检查字数，每个字算一个，标点不算。``覆盖度计量优化输入优先''是13字。或者``基于覆盖度计量的输入优先''14字。或者``覆盖度计量的输入优先级优化''15字。或者更自然一点：``覆盖度量优化输入优先级''14字。但可能用户需要更准确。或者参考原文的标题：``Not All Coverage Measurements Are Equal: Fuzzing by Coverage Accounting for Input Prioritization''，可以翻译为``覆盖度量不均等的模糊测试输入优先''，但可能不够明确。可能最佳的是``覆盖度计量的输入优先模糊测试''15字。或者``覆盖度计量优化输入优先''13字，但不够完整。可能需要调整。最终，确定使用``覆盖度计量的输入优先模糊测试''正好15个字，准确概括了论文的核心：通过覆盖度计量来优化输入优先级，提升模糊测试效率。{$<$}/think{$>$}覆盖度计量的输入优先模糊测试},
  timestamp = {Mon, 01 Feb 2021 08:42:19 +0100},
  file = {D:\data\Zotero\storage\NIC8CFIS\Wang et al_2020_Not all coverage measurements are equal.pdf}
}

@inproceedings{wangReinforcementLearningbasedHierarchical2021,
  title = {Reinforcement Learning-Based Hierarchical Seed Scheduling for Greybox Fuzzing},
  booktitle = {28th {{Annual Network}} and {{Distributed System Security Symposium}}, {{Ndss}} 2021, {{Virtually}}, {{February}} 21-25, 2021},
  author = {Wang, Jinghan and Song, Chengyu and Yin, Heng},
  year = {2021},
  publisher = {The Internet Society},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/conf/ndss/WangSY21.bib},
  langid = {english},
  keywords = {AFL-Hier,fuzzing,optimization,scheduling,thesis (related work)},
  annotation = {GSCC: 0000095 2025-06-04T05:51:10.527Z \\
remark: {$<$}think{$>$}好的，我需要帮用户用不超过15字的中文概括一篇论文的摘要。这篇论文的题目是``基于强化学习的层次化种子调度用于灰盒模糊测试''。让我仔细看一下摘要内容。首先，论文提到现有的灰盒模糊测试工具在处理细粒度覆盖指标时，会遇到种子爆炸问题，导致调度效率低下。作者提出了使用多层次覆盖度量和基于强化学习的层次化调度器来解决这个问题。他们开发的原型在DARPA CGC和FuzzBench上都表现出色，比AFL等工具检测到更多漏洞，覆盖更高，速度更快。现在我要用简短的中文来概括这些内容。核心是介绍该研究的创新点和成果。关键词可能包括``强化学习''、``层次化调度''、``灰盒模糊测试''等。由于字数限制，需要精简。可能的表述：``强化学习的灰盒模糊测试种子调度'' 或者更具体一点：``基于强化学习的灰盒模糊测试优化''但根据论文重点，层次化调度是特色，应该体现出这一点。结合层次化调度和强化学习：层次化种子调度是核心，而强化学习是实现方法。比如：``灰盒模糊测试的强化学习层次调度''或者更简洁：``基于强化学习的层次化种子调度''这样既点出了方法（强化学习）和结构（层次化调度），也符合字数限制。用户之前的要求是``直接输出结果''，不需要解释，所以需要直接给出最准确的概括。检查字数，确保不超过15字。比如，``基于强化学习的层次化种子调度灰盒模糊测试''，可能有16字。需要调整。比如：``强化学习的灰盒模糊测试层次调度''共15字。确认这个短语是否准确传达了论文的主要内容。论文的主要贡献是使用强化学习进行层次化的种子调度，以提升测试效果。因此这样的表述应该是合适的。{$<$}/think{$>$}强化学习的灰盒模糊测试层次调度},
  timestamp = {Sat, 17 Dec 2022 01:15:30 +0100},
  file = {D:\data\Zotero\storage\Y9GYJRCS\Wang et al. - 2021 - Reinforcement learning-based hierarchical seed sch.pdf}
}

@inproceedings{wangSkyfireDatadrivenSeed2017,
  title = {Skyfire: Data-Driven Seed Generation for Fuzzing},
  booktitle = {2017 {{IEEE Symposium}} on {{Security}} and {{Privacy}} (Sp)},
  author = {Wang, Junjie and Chen, Bihuan and Wei, Lei and Liu, Yang},
  year = {2017},
  pages = {579--594},
  doi = {10.1109/SP.2017.23},
  langid = {english},
  annotation = {174 citations (Crossref/DOI) [2025-02-27]\\
GSCC: 0000440 \\
TLDR: A novel data-driven seed generation approach, named Skyfire, which leverages the knowledge in the vast amount of existing samples to generate well-distributed seed inputs for fuzzing programs that process highly-structured inputs and significantly improve the code coverage and the bug-finding capability of fuzzers.\\
remark: Skyfire 生成种子提升模糊测试效率。\\
Read\_Status: Read\\
Read\_Status\_Date: 2025-02-17T02:14:46.594Z},
  file = {D:\data\Zotero\storage\IJ96UNX7\Wang et al. - 2017 - Skyfire Data-driven seed generation for fuzzing.pdf}
}

@inproceedings{wangSyzVegasBeatingKernel2021,
  title = {{{SyzVegas}}: Beating Kernel Fuzzing Odds with Reinforcement Learning},
  booktitle = {30th {{Usenix Security Symposium}} (Usenix {{Security}} 21)},
  author = {Wang, Daimeng and Zhang, Zheng and Zhang, Hang and Qian, Zhiyun and Krishnamurthy, Srikanth V. and {Abu-Ghazaleh}, Nael},
  year = {2021},
  month = aug,
  pages = {2741--2758},
  publisher = {USENIX Association},
  isbn = {978-1-939133-24-3},
  langid = {english},
  annotation = {GSCC: 0000066 \\
remark: 强化学习提升内核模糊测试效率},
  file = {D:\data\Zotero\storage\EQJLGIMZ\Wang et al_2021_SyzVegas.pdf}
}

@article{wangUnleashingCoveragedbasedFuzzing2022,
  title = {Unleashing Coveraged-Based Fuzzing through Comprehensive, Efficient, and Faithful Exploitable-Bug Exposing},
  author = {Wang, Bowen and Lu, Kangjie and Wu, Qiushi and Pakki, Aditya},
  year = {2022},
  journal = {IEEE Transactions on Dependable and Secure Computing},
  volume = {19},
  number = {5},
  pages = {2998--3010},
  doi = {10.1109/TDSC.2021.3079857},
  langid = {english},
  annotation = {4 citations (Crossref/DOI) [2025-02-27]\\
GSCC: 0000004 \\
2 citations (Crossref) [2024-03-31]},
  file = {D:\data\Zotero\storage\8AJUBCG2\Wang et al_2022_Unleashing coveraged-based fuzzing through comprehensive, efficient, and.pdf}
}

@inproceedings{wuEvaluatingImprovingNeural2022,
  title = {Evaluating and Improving Neural Program-Smoothing-Based Fuzzing},
  booktitle = {Proceedings of the 44th {{International Conference}} on {{Software Engineering}}},
  author = {Wu, Mingyuan and Jiang, Ling and Xiang, Jiahong and Zhang, Yuqun and Yang, Guowei and Ma, Huixin and Nie, Sen and Wu, Shi and Cui, Heming and Zhang, Lingming},
  year = {2022},
  series = {{{ICSE}} '22},
  pages = {847--858},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/3510003.3510089},
  abstract = {Fuzzing nowadays has been commonly modeled as an optimization problem, e.g., maximizing code coverage under a given time budget via typical search-based solutions such as evolutionary algorithms. However, such solutions are widely argued to cause inefficient computing resource usage, i.e., inefficient mutations. To address this issue, two neural program-smoothing-based fuzzers, Neuzz and MTFuzz, have been recently proposed to approximate program branching behaviors via neural network models, which input byte sequences of a seed and output vectors representing program branching behaviors. Moreover, assuming that mutating the bytes with larger gradients can better explore branching behaviors, they develop strategies to mutate such bytes for generating new seeds as test cases. Meanwhile, although they have been shown to be effective in the original papers, they were only evaluated upon a limited dataset. In addition, it is still unclear how their key technical components and whether other factors can impact fuzzing performance. To further investigate neural program-smoothing-based fuzzing, we first construct a large-scale benchmark suite with a total of 28 popular open-source projects. Then, we extensively evaluate Neuzz and MTFuzz on such benchmarks. The evaluation results suggest that their edge coverage performance can be unstable. Moreover, neither neural network models nor mutation strategies can be consistently effective, and the power of their gradient-guidance mechanisms have been compromised. Inspired by such findings, we propose a simplistic technique, PreFuzz, which improves neural program-smoothing-based fuzzers with a resource-efficient edge selection mechanism to enhance their gradient guidance and a probabilistic byte selection mechanism to further boost mutation effectiveness. Our evaluation results indicate that PreFuzz can significantly increase the edge coverage of Neuzz/MTFuzz, and also reveal multiple practical guidelines to advance future research on neural program-smoothing-based fuzzing.},
  isbn = {978-1-4503-9221-1},
  langid = {english},
  keywords = {fuzzing},
  annotation = {GSCC: 0000033 2025-03-02T09:07:26.950Z \\
16 citations (Crossref/DOI) [2025-02-27]\\
12 citations (Crossref) [2024-03-31]\\
GSCC: 0000033 2025-03-02T09:07:26.950Z \\
TLDR: A simplistic technique is proposed, PreFuzz, which improves neural program-smoothing-based fuzzers with a resource-efficient edge selection mechanism to enhance their gradient guidance and a probabilistic byte selection mechanismTo further boost mutation effectiveness, and can significantly increase the edge coverage of Neuzz/MTFuzz.\\
remark: 提升模糊测试效率的神经网络方法},
  file = {D:\data\Zotero\storage\CJVBGZ57\Wu et al_2022_Evaluating and improving neural program-smoothing-based fuzzing.pdf}
}

@article{wuFinegrainedCoveragebasedFuzzing2024,
  title = {Fine-Grained Coverage-Based Fuzzing},
  author = {Wu, Wei-Cheng and Nongpoh, Bernard and Nour, Marwan and Marcozzi, Micha{\"e}l and Bardin, S{\'e}bastien and Hauser, Christophe},
  year = {2024},
  month = jun,
  journal = {ACM Trans. Softw. Eng. Methodol.},
  volume = {33},
  number = {5},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  issn = {1049-331X},
  doi = {10.1145/3587158},
  abstract = {Fuzzing is a popular software testing method that discovers bugs by massively feeding target applications with automatically generated inputs. Many state-of-the-art fuzzers use branch coverage as a feedback metric to guide the fuzzing process. The fuzzer retains inputs for further mutation only if branch coverage is increased. However, branch coverage only provides a shallow sampling of program behaviors and hence may discard interesting inputs to mutate. This work aims to take advantage of the large body of research in defining finer-grained code coverage metrics (such as control-flow, data-flow, or mutation coverage) and to evaluate how fuzzing performance is impacted when using these metrics to select interesting inputs for mutation. We propose to make branch coverage-based fuzzers support most fine-grained coverage metrics out of the box (i.e., without changing fuzzer internals). We achieve this by making the test objectives defined by these metrics (such as conditions to activate or mutants to kill) explicit as new branches in the target program. Fuzzing such a modified target is then equivalent to fuzzing the original target, but the fuzzer will also retain inputs covering the additional metric objectives for mutation. In addition, all the fuzzer mechanisms to penetrate hard-to-cover branches will help in covering the additional metric objectives. We use this approach to evaluate the impact of supporting two fine-grained coverage metrics (multiple condition coverage and weak mutation) over the performance of two state-of-the-art fuzzers (AFL++ and QSYM) with the standard LAVA-M and MAGMA benchmarks. This evaluation suggests that our mechanism for runtime fuzzer guidance, where the fuzzed code is instrumented with additional branches, is effective and could be leveraged to encode guidance from human users or static analyzers. Our results also show that the impact of fine-grained metrics over fuzzing performance is hard to predict before fuzzing and most of the time either neutral or negative. As a consequence, we do not recommend using them to guide fuzzers, except maybe in some possibly favorable circumstances yet to be investigated, like for limited parts of the code or to complement classical fuzzing campaigns.},
  articleno = {138},
  issue_date = {June 2024},
  langid = {english},
  keywords = {code coverage criteria,fuzzing,Fuzzing,mutation testing},
  annotation = {5 citations (Crossref/DOI) [2025-02-27]\\
GSCC: 0000009 \\
TLDR: The mechanism for runtime fuzzer guidance, where the fuzzed code is instrumented with additional branches, is effective and could be leveraged to encode guidance from human users or static analyzers.},
  file = {D\:\\data\\Zotero\\storage\\AKGK4YSJ\\Wu et al. - 2023 - Fine-grained coverage-based fuzzing.pdf;D\:\\data\\Zotero\\storage\\KDH46WKP\\Wu et al. - 2024 - Fine-grained coverage-based fuzzing.pdf}
}

@inproceedings{wuOneFuzzingStrategy2022,
  title = {One Fuzzing Strategy to Rule Them All},
  booktitle = {Proceedings of the 44th {{International Conference}} on {{Software Engineering}}},
  author = {Wu, Mingyuan and Jiang, Ling and Xiang, Jiahong and Huang, Yanwei and Cui, Heming and Zhang, Lingming and Zhang, Yuqun},
  year = {2022},
  series = {{{ICSE}} '22},
  pages = {1634--1645},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/3510003.3510174},
  abstract = {Coverage-guided fuzzing has become mainstream in fuzzing to automatically expose program vulnerabilities. Recently, a group of fuzzers are proposed to adopt a random search mechanism namely Havoc, explicitly or implicitly, to augment their edge exploration. However, they only tend to adopt the default setup of Havoc as an implementation option while none of them attempts to explore its power under diverse setups or inspect its rationale for potential improvement. In this paper, to address such issues, we conduct the first empirical study on Havoc to enhance the understanding of its characteristics. Specifically, we first find that applying the default setup of Havoc to fuzzers can significantly improve their edge coverage performance. Interestingly, we further observe that even simply executing Havoc itself without appending it to any fuzzer can lead to strong edge coverage performance and outperform most of our studied fuzzers. Moreover, we also extend the execution time of Havoc and find that most fuzzers can not only achieve significantly higher edge coverage, but also tend to perform similarly (i.e., their performance gaps get largely bridged). Inspired by the findings, we further propose HavocMAB, which models the Havoc mutation strategy as a multi-armed bandit problem to be solved by dynamically adjusting the mutation strategy. The evaluation result presents that HavocMAB can significantly increase the edge coverage by 11.1\% on average for all the benchmark projects compared with Havoc and even slightly outperform state-of-the-art QSYM which augments its computing resource by adopting three parallel threads. We further execute HavocMAB with three parallel threads and result in 9\% higher average edge coverage over QSYM upon all the benchmark projects.},
  isbn = {978-1-4503-9221-1},
  langid = {english},
  keywords = {fuzzing,thesis (related work)},
  annotation = {GSCC: 0000083 2025-02-27T04:15:13.777Z \\
45 citations (Crossref/DOI) [2025-02-27]\\
23 citations (Crossref) [2024-03-31]\\
GSCC: 0000082 \\
TLDR: HavocMAB is proposed, which models the Havoc mutation strategy as a multi-armed bandit problem to be solved by dynamically adjusting the mutation strategy and can significantly increase the edge coverage by 11.1\% on average for all the benchmark projects compared with Havoc.\\
Read\_Status: Not Reading\\
Read\_Status\_Date: 2025-02-11T13:13:28.520Z\\
remark: HavocMAB提升模糊测试边缘覆盖率},
  file = {D:\data\Zotero\storage\7DIG4B6C\Wu et al. - 2022 - One fuzzing strategy to rule them all.pdf}
}

@inproceedings{xiaFuzz4AllUniversalFuzzing2024,
  title = {{{Fuzz4All}}: Universal Fuzzing with Large Language Models},
  booktitle = {Proceedings of the {{Ieee}}/Acm 46th {{International Conference}} on {{Software Engineering}}},
  author = {Xia, Chunqiu Steven and Paltenghi, Matteo and Le Tian, Jia and Pradel, Michael and Zhang, Lingming},
  year = {2024},
  series = {Icse '24},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/3597503.3639121},
  abstract = {Fuzzing has achieved tremendous success in discovering bugs and vulnerabilities in various software systems. Systems under test (SUTs) that take in programming or formal language as inputs, e.g., compilers, runtime engines, constraint solvers, and software libraries with accessible APIs, are especially important as they are fundamental building blocks of software development. However, existing fuzzers for such systems often target a specific language, and thus cannot be easily applied to other languages or even other versions of the same language. Moreover, the inputs generated by existing fuzzers are often limited to specific features of the input language, and thus can hardly reveal bugs related to other or new features. This paper presents Fuzz4All, the first fuzzer that is universal in the sense that it can target many different input languages and many different features of these languages. The key idea behind Fuzz4All is to leverage large language models (LLMs) as an input generation and mutation engine, which enables the approach to produce diverse and realistic inputs for any practically relevant language. To realize this potential, we present a novel autoprompting technique, which creates LLM prompts that are well-suited for fuzzing, and a novel LLM-powered fuzzing loop, which iteratively updates the prompt to create new fuzzing inputs. We evaluate Fuzz4All on nine systems under test that take in six different languages (C, C++, Go, SMT2, Java, and Python) as inputs. The evaluation shows, across all six languages, that universal fuzzing achieves higher coverage than existing, language-specific fuzzers. Furthermore, Fuzz4All has identified 98 bugs in widely used systems, such as GCC, Clang, Z3, CVC5, OpenJDK, and the Qiskit quantum computing platform, with 64 bugs already confirmed by developers as previously unknown.},
  articleno = {126},
  isbn = {979-8-4007-0217-4},
  langid = {english},
  keywords = {fuzzing,thesis (related work)},
  annotation = {GSCC: 0000116 2025-02-27T04:13:10.226Z \\
27 citations (Crossref/DOI) [2025-02-27]\\
GSCC: 0000116 \\
TLDR: The evaluation shows that universal fuzzing achieves higher coverage than existing, language-specific fuzzers, and Fuzz4ALL is presented, the first fuzzer that is universal in the sense that it can target many different input languages and many different features of these languages.},
  file = {D:\data\Zotero\storage\XZIKUYEF\Xia et al. - 2024 - Fuzz4All Universal fuzzing with large language models.pdf}
}

@article{xuGraphuzzDatadrivenSeed2024,
  title = {Graphuzz: Data-Driven Seed Scheduling for Coverage-Guided Greybox Fuzzing},
  author = {Xu, Hang and Chen, Liheng and Gan, Shuitao and Zhang, Chao and Li, Zheming and Ji, Jiangan and Chen, Baojian and Hu, Fan},
  year = {2024},
  month = sep,
  journal = {ACM Transactions on Software Engineering and Methodology},
  volume = {33},
  number = {7},
  pages = {1--36},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  issn = {1049-331X, 1557-7392},
  doi = {10.1145/3664603},
  abstract = {Seed scheduling is a critical step of greybox fuzzing, which assigns different weights to seed test cases during seed selection, and significantly impacts the efficiency of fuzzing. Existing seed scheduling strategies rely on manually designed models to estimate the               potentials               of seeds and determine their weights, which fails to capture the rich information of a seed and its execution and thus the estimation of seeds' potentials is not optimal. In this article, we introduce a new seed scheduling solution, Graphuzz, for coverage-guided greybox fuzzing, which utilizes deep learning models to estimate the potentials of seeds and works in a data-driven way. Specifically, we propose an extended control flow graph called e-CFG to represent the control-flow and data-flow features of a seed's execution, which is suitable for graph neural networks (GNN) to process and estimate seeds' potential. We evaluate each seed's code coverage increment and use it as the label to train the GNN model. Further, we propose a self-attention mechanism to enhance the GNN model so that it can capture overlooked features. We have implemented a prototype of Graphuzz based on the baseline fuzzer AFLplusplus. The evaluation results show that our model can estimate the potential of seeds and has the robust capability to generalize to different targets. Furthermore, the evaluation using 12 benchmarks from FuzzBench shows that Graphuzz outperforms AFLplusplus and the state-of-the-art seed scheduling solution K-Scheduler and other coverage-guided fuzzers in terms of code coverage, and the evaluation using 8 benchmarks from Magma shows that Graphuzz outperforms the baseline fuzzer AFLplusplus and SOTA solutions in terms of bug detection.},
  articleno = {185},
  issue_date = {September 2024},
  langid = {english},
  keywords = {/UR,fuzzing,Fuzzing,graph neural network,information,NN based fuzzing,scheduling,seed scheduling},
  annotation = {GSCC: 0000002 2025-06-04T05:50:29.828Z \\
0 citations (Crossref/DOI) [2025-02-27]\\
GSCC: 0000001 2025-04-25T02:35:18.078Z \\
TLDR: A new seed scheduling solution, Graphuzz, for coverage-guided greybox fuzzing, which utilizes deep learning models to estimate the potentials of seeds and works in a data-driven way and has the robust capability to generalize to different targets.\\
remark: 基于深度学习的种子调度技术},
  file = {D:\data\Zotero\storage\9I6IW9IP\Xu et al. - 2024 - Graphuzz Data-driven seed scheduling for coverage-guided greybox fuzzing.pdf}
}

@article{yinKextFuzzPracticalFuzzer2023,
  title = {{{KextFuzz}}: {{A}} Practical Fuzzer for {{macOS}} Kernel {{EXTensions}} on Apple Silicon},
  author = {Yin, Tingting and Gao, Zicong and Xiao, Zhenghang and Ma, Zheyu and Zheng, Min and Zhang, Chao},
  year = {2023},
  journal = {IEEE Transactions on Dependable and Secure Computing},
  pages = {1--15},
  doi = {10.1109/TDSC.2023.3330852},
  keywords = {Codes,Computer bugs,Fuzzing,Hardware,Kernel,kernel extension,macOS,Silicon,Virtualization,vulerability detection},
  annotation = {0 citations (Crossref) [2024-03-31]},
  file = {D:\data\Zotero\storage\T7CMX2RS\Yin et al_2023_KextFuzz.pdf}
}

@inproceedings{yueEcoFuzzAdaptiveEnergysaving2020,
  title = {{{EcoFuzz}}: Adaptive Energy-Saving Greybox Fuzzing as a Variant of the Adversarial Multi-Armed Bandit},
  booktitle = {29th {{Usenix Security Symposium}}, {{Usenix Security}} 2020, {{August}} 12-14, 2020},
  author = {Yue, Tai and Wang, Pengfei and Tang, Yong and Wang, Enze and Yu, Bo and Lu, Kai and Zhou, Xu},
  editor = {Capkun, Srdjan and Roesner, Franziska},
  year = {2020},
  pages = {2307--2324},
  publisher = {USENIX Association},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/conf/uss/YueWTWYLZ20.bib},
  langid = {english},
  keywords = {fuzzing,optimization,scheduling,thesis (related work)},
  annotation = {GSCC: 0000188 2025-06-04T05:51:16.978Z \\
remark: {$<$}think{$>$}好的，我需要用不超过15个中文汉字来概括论文``EcoFuzz: adaptive energy-saving greybox fuzzing as a variant of the adversarial multi-armed bandit''的主要内容。首先，看标题，EcoFuzz是一种自适应节能的灰盒模糊测试方法，作为对抗性多臂老虎机的变体。论文的关键点在于结合了节能（energy-saving）和自适应（adaptive），并且应用了多臂老虎机模型。灰盒模糊测试通常关注代码覆盖率和漏洞发现效率，而这里引入了节能的概念，可能是在资源分配或测试策略上优化，减少能耗。对抗性多臂老虎机可能用于处理动态变化的环境或不确定因素，帮助选择最优的测试策略。可能的概括方向包括：节能的模糊测试方法、基于多臂老虎机的自适应测试、节能自适应灰盒测试等。需要确保不超过15字，同时准确反映核心内容。考虑到``自适应节能''和``对抗性多臂老虎机''是核心，但``对抗性多臂老虎机''较长，可能需要简化。例如，可以简化为``多臂老虎机模型''或``自适应多臂策略''。最终可能需要将重点放在节能和自适应的灰盒测试上，结合多臂老虎机的方法。可能的概括是：基于多臂老虎机的自适应节能模糊测试。或者更简洁的：自适应节能灰盒模糊测试。但需要确保涵盖关键点，同时符合字数限制。再检查标题中的``variant of the adversarial multi-armed bandit''，这里``adversarial''指对抗性环境，可能是指测试过程中遇到的动态挑战，所以可能需要保留对抗性的概念，但中文中可能需要简化。例如，可以翻译为``对抗多臂老虎机变体''，但字数可能过多。可能更合适的概括是结合自适应节能和多臂模型，比如``自适应节能的灰盒模糊测试方法''或者``基于对抗多臂老虎机的节能模糊测试''。考虑到15字限制，``自适应节能灰盒模糊测试''已经用了11字，还可以加入``多臂''或``对抗''的元素，但可能需要简略。例如，``节能自适应灰盒测试''加上``多臂''可能超过，所以可能需要更精炼的表达。最终，可能需要选择最核心的要素：节能、自适应、灰盒测试、多臂老虎机。其中，EcoFuzz的主要贡献是节能和自适应策略，基于多臂老虎机模型。因此，概括为``基于多臂老虎机的节能自适应模糊测试''可能更准确，但检查字数是否在15字以内。``基于多臂老虎机的节能自适应模糊测试''共17字，超了。需要缩短，比如``多臂老虎机节能自适应模糊测试''15字，或者``节能自适应的多臂模糊测试''13字。不过后者可能不够明确。另一种方式，可能将重点放在节能和自适应，而多臂老虎机作为方法，但可能无法在15字内全部体现。例如，``节能自适应灰盒模糊测试''12字，但缺少了多臂老虎机的部分。不过，原论文的标题已经将多臂老虎机作为变体，可能在内容中是多臂策略的应用，但概括时可以强调节能和自适应。因此，可能最优的是``自适应节能灰盒模糊测试''13字，或者``基于多臂的节能模糊测试''13字，但后者可能不够准确。再考虑论文摘要可能提到的内容，如自适应能量节省、作为对抗性多臂老虎机的变体，可能更准确的概括是结合这两个方面。因此，可能选择``基于对抗多臂的节能模糊测试''15字，或者``对抗多臂节能自适应模糊测试''15字，不过``对抗''可能可以省略，因为多臂老虎机本身可能包含对抗性。所以最终可能定为``多臂老虎机节能自适应模糊测试''15字。或者更简洁的``节能自适应的多臂模糊测试''13字。但需要确认是否准确。根据标题，EcoFuzz是作为对抗性多臂老虎机的变体，所以可能必须提到对抗性或多臂。可能最佳选择是``基于多臂老虎机的节能模糊测试''15字，刚好15字，涵盖了关键要素：多臂老虎机作为方法，节能作为目标，模糊测试为类型。因此，最终决定使用这个概括。{$<$}/think{$>$}基于多臂老虎机的节能模糊测试},
  timestamp = {Sun, 30 Apr 2023 12:18:07 +0200},
  file = {D:\data\Zotero\storage\3LUWWEQ9\Yue et al. - 2020 - EcoFuzz Adaptive energy-saving greybox fuzzing as.pdf}
}

@inproceedings{yunQSYMPracticalConcolic2018,
  title = {{{QSYM}} : A Practical Concolic Execution Engine Tailored for Hybrid Fuzzing},
  booktitle = {27th {{Usenix Security Symposium}} (Usenix {{Security}} 18)},
  author = {Yun, Insu and Lee, Sangho and Xu, Meng and Jang, Yeongjin and Kim, Taesoo},
  year = {2018},
  month = aug,
  pages = {745--761},
  publisher = {USENIX Association},
  address = {Baltimore, MD},
  isbn = {978-1-939133-04-5},
  langid = {english},
  keywords = {thesis (related work)},
  annotation = {GSCC: 0000612 2025-03-02T08:14:40.542Z \\
CCF: A\\
Read\_Status: Read\\
Read\_Status\_Date: 2025-02-06T13:45:22.526Z\\
remark: 优化混合模糊测试的符号执行引擎\\
titleTranslation: QSYM：面向混合模糊测试定制的实用共轭执行引擎},
  file = {D:\data\Zotero\storage\ZAZ5KF9D\Yun et al. - 2018 - QSYM  A practical concolic execution engine tailo.pdf}
}

@inproceedings{zhangFIXREVERTERRealisticBug2022,
  title = {{{FIXREVERTER}}: {{A}} Realistic Bug Injection Methodology for Benchmarking Fuzz Testing},
  booktitle = {31st {{USENIX}} Security Symposium ({{USENIX}} Security 22)},
  author = {Zhang, Zenong and Patterson, Zach and Hicks, Michael and Wei, Shiyi},
  year = {2022},
  month = aug,
  pages = {3699--3715},
  publisher = {USENIX Association},
  address = {Boston, MA},
  isbn = {978-1-939133-31-1},
  file = {D:\data\Zotero\storage\GU7IM29D\Zhang et al. - 2022 - FIXREVERTER A realistic bug injection methodology.pdf}
}

@inproceedings{zhangMobFuzzAdaptiveMultiobjective2022,
  title = {{{MobFuzz}}: Adaptive Multi-Objective Optimization in Gray-Box Fuzzing},
  shorttitle = {{{MobFuzz}}},
  booktitle = {Proceedings 2022 {{Network}} and {{Distributed System Security Symposium}}},
  author = {Zhang, Gen and Wang, Pengfei and Yue, Tai and Kong, Xiangdong and Huang, Shan and Zhou, Xu and Lu, Kai},
  year = {2022},
  publisher = {Internet Society},
  address = {San Diego, CA, USA},
  doi = {10.14722/ndss.2022.24314},
  urldate = {2022-06-05},
  abstract = {Coverage-guided gray-box fuzzing (CGF) is an efficient software testing technique. There are usually multiple objectives to optimize in CGF. However, existing CGF methods cannot successfully find the optimal values for multiple objectives simultaneously. In this paper, we propose a gray-box fuzzer for multi-objective optimization (MOO) called MobFuzz. We model the multi-objective optimization process as a multiplayer multi-armed bandit (MPMAB). First, it adaptively selects the objective combination that contains the most appropriate objectives for the current situation. Second, our model deals with the power schedule, which adaptively allocates energy to the seeds under the chosen objective combination. In MobFuzz, we propose an evolutionary algorithm called NIC to optimize our chosen objectives simultaneously without incurring additional performance overhead. To prove the effectiveness of MobFuzz, we conduct experiments on 12 real-world programs and the MAGMA data set. Experiment results show that multi-objective optimization in MobFuzz outperforms single-objective fuzzing in the baseline fuzzers. In contrast to them, MobFuzz can select the optimal objective combination and increase the values of multiple objectives up to 107\%, with at most a 55\% reduction in the energy consumption. Moreover, MobFuzz has up to 6\% more program coverage and finds 3x more unique bugs than the baseline fuzzers. The NIC algorithm has at least a 2x improvement with a performance overhead of approximately 3\%.},
  isbn = {978-1-891562-74-7},
  langid = {english},
  keywords = {readed},
  annotation = {13 citations (Crossref/DOI) [2025-02-27]\\
7 citations (Crossref) [2024-03-31]\\
GSCC: 0000031 \\
shortConferenceName: NDSS\\
TLDR: A gray-box fuzzer for multi-objective optimization (MOO) called MobFuzz, which model the multi-objective optimization process as a multi-player multi-armed bandit (MPMAB) and proposes an evolutionary algorithm called NIC to optimize the authors' chosen objectives simultaneously without incurring additional performance overhead.\\
remark: 多目标灰盒模糊测试优化方法},
  file = {D:\data\Zotero\storage\X68BZSUD\Zhang et al_2022_MobFuzz.pdf}
}

@inproceedings{zhangPathTransitionsTell2022,
  title = {Path Transitions Tell More: Optimizing Fuzzing Schedules via Runtime Program States},
  booktitle = {Proceedings of the 44th {{International Conference}} on {{Software Engineering}}},
  author = {Zhang, Kunpeng and Xiao, Xi and Zhu, Xiaogang and Sun, Ruoxi and Xue, Minhui and Wen, Sheng},
  year = {2022},
  series = {{{ICSE}} '22},
  pages = {1658--1668},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/3510003.3510063},
  abstract = {Coverage-guided Greybox Fuzzing (CGF) is one of the most successful and widely-used techniques for bug hunting. Two major approaches are adopted to optimize CGF: (i) to reduce search space of inputs by inferring relationships between input bytes and path constraints; (ii) to formulate fuzzing processes (e.g., path transitions) and build up probability distributions to optimize power schedules, i.e., the number of inputs generated per seed. However, the former is subjective to the inference results which may include extra bytes for a path constraint, thereby limiting the efficiency of path constraints resolution, code coverage discovery, and bugs exposure; the latter formalization, concentrating on power schedules for seeds alone, is inattentive to the schedule for bytes in a seed.In this paper, we propose a lightweight fuzzing approach, Truzz, to optimize existing Coverage-guided Greybox Fuzzers (CGFs). To address two aforementioned challenges, Truzz identifies the bytes related to the validation checks (i.e., the checks guarding error-handling code), and protects those bytes from being frequently mutated, making most generated inputs examine the functionalities of programs, in lieu of being rejected by validation checks. The byte-wise relationship determination mitigates the problem of loading extra bytes when fuzzers infer the byte-constraint relation. Furthermore, the proposed path transition within Truzz can efficiently prioritize the seed as the new path, harvesting many new edges, and the new path likely belongs to a code region with many undiscovered code lines. To evaluate our approach, we implemented 6 state-of-the-art fuzzers, AFL, AFLFast, NEUZZ, MOPT, FuzzFactory and GreyOne, in Truzz. The experimental results show that on average, Truzz can generate 16.14\% more inputs flowing into functional code, in addition to 24.75\% more new edges than the vanilla fuzzers. Finally, our approach exposes 13 bugs in 8 target programs, and 6 of them have not been identified by the vanilla fuzzers.},
  isbn = {978-1-4503-9221-1},
  langid = {english},
  keywords = {/UR,fuzzing,mutation,path transition,software security,thesis (related work)},
  annotation = {GSCC: 0000029 2025-02-27T04:16:21.782Z \\
15 citations (Crossref/DOI) [2025-02-27]\\
10 citations (Crossref) [2024-03-31]\\
GSCC: 0000032 \\
TLDR: Truzz identifies the bytes related to the validation checks, and protects those bytes from being frequently mutated, making most generated inputs examine the functionalities of programs, in lieu of being rejected by validation checks.\\
remark: 优化模糊测试的字节和路径转换策略\\
Read\_Status: Read\\
Read\_Status\_Date: 2025-02-20T12:11:47.237Z},
  file = {D:\data\Zotero\storage\8SIF55JZ\Zhang et al_2022_Path transitions tell more.pdf}
}

@inproceedings{zhangReinforcementLearningbasedFuzzing2021,
  title = {Reinforcement Learning-Based Fuzzing Technology},
  booktitle = {Adv. {{Intell}}. {{Sys}}. {{Comput}}.},
  author = {Zhang, Z. and Cui, B. and Chen, C.},
  editor = {{Barolli L.} and {Poniszewska-Maranda A.} and {Park H.}},
  year = {2021},
  volume = {1195 AISC},
  pages = {244--253},
  publisher = {Springer},
  doi = {10.1007/978-3-030-50399-4_24},
  abstract = {Fuzzing is a common vulnerability detection method in the modern software testing, which triggers potential vulnerabilities in the target program by generating variable input. However, traditional methods have the disadvantage of low code coverage due to the blind mutation of samples. To mitigate the problem, we model the process of traditional fuzzing as the Markov decision process and take use of the reinforcement learning algorithm to guide the direction of each step in the process of mutation to improve the quality of samples and the efficiency of fuzzing. In this paper, we implemented a general fuzzing system called RLFUZZ based on the reinforcement learning, taking the edge coverage as reward and using DDPG algorithm to maximize it. Experimental results show that DDPG-based RLFUZZ achieves greater edge coverage than baseline random mutation on LAVA-M dataset. {\copyright} Springer Nature Switzerland AG 2021.},
  isbn = {21945357 (ISSN); 978-303050398-7 (ISBN)},
  langid = {english},
  keywords = {Code coverage,Edge coverages,Fuzzing technologies,Learning algorithms,Learning systems,Markov Decision Processes,Markov processes,Random mutation,Reinforcement learning,Software testing,Ubiquitous computing,Vulnerability detection,Web services},
  annotation = {7 citations (Crossref/DOI) [2025-02-27]\\
GSCC: 0000017 \\
TLDR: This paper implemented a general fuzzing system called RLFUZZ based on the reinforcement learning, taking the edge coverage as reward and using DDPG algorithm to maximize it, and experimental results show that D DPG-based RLFUzz achieves greater edge coverage than baseline random mutation on LAVA-M dataset.\\
remark: 强化学习优化模糊测试技术},
  file = {D:\data\Zotero\storage\L3Q4ACNA\Zhang et al_2021_Reinforcement learning-based fuzzing technology.pdf}
}

@inproceedings{zhangShapFuzzEfficientFuzzing2024,
  title = {{{ShapFuzz}}: Efficient Fuzzing via Shapley-Guided Byte Selection},
  booktitle = {Proceedings 2024 Network and Distributed System Security Symposium},
  author = {Zhang, Kunpeng and Zhu, Xiaogang and Xiao, Xi and Xue, Minhui and Zhang, Chao and Wen, Sheng},
  year = {2024},
  series = {Ndss 2024},
  publisher = {Internet Society},
  doi = {10.14722/ndss.2024.23134},
  langid = {english},
  keywords = {/UR,thesis (related work)},
  annotation = {GSCC: 0000003 2025-02-27T04:16:29.501Z \\
0 citations (Crossref/DOI) [2025-02-27]\\
GSCC: 0000002 \\
TLDR: It is found that some byte positions contribute more than others and this property often holds across seeds in fuzzing performance, and a novel fuzzing solution, ShapFuzz, is proposed to guide byte selection and mutation.\\
remark: "SHAPFUZZ：通过Shapley分析引导选择和突变字节提升模糊测试效率。"\\
CCF: A\\
Read\_Status: Read but Ambiguous\\
Read\_Status\_Date: 2025-02-24T02:39:23.173Z},
  file = {D:\data\Zotero\storage\NZ8WH3LJ\Zhang et al. - 2023 - SHAPFUZZ Efficient fuzzing via shapley-guided byt.pdf}
}

@inproceedings{zhaoAlphuzzMonteCarlo2022,
  title = {Alphuzz: Monte Carlo Search on Seed-Mutation Tree for Coverage-Guided Fuzzing},
  booktitle = {Proceedings of the 38th {{Annual Computer Security Applications Conference}}},
  author = {Zhao, Yiru and Wang, Xiaoke and Zhao, Lei and Cheng, Yueqiang and Yin, Heng},
  year = {2022},
  series = {{{ACSAC}} '22},
  pages = {534--547},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/3564625.3564660},
  abstract = {Coverage-based greybox fuzzing (CGF) has been approved to be effective in finding security vulnerabilities. Seed scheduling, the process of selecting an input as the seed from the seed pool for the next fuzzing iteration, plays a central role in CGF. Although numerous seed scheduling strategies have been proposed, most of them treat these seeds independently and do not explicitly consider the relationships among seeds. In this study, we make a key observation that the relationships among seeds are valuable for seed scheduling. We design and propose a ``seed mutation tree'' by investigating and leveraging the mutation relationships among seeds. With the ``seed mutation tree'', we further model the seed scheduling problem as a Monte-Carlo Tree Search (MCTS) problem. That is, we select the next seed for fuzzing by walking this ``seed mutation tree'' through an optimal path, based on the estimation of MCTS. We implement two prototypes, Alphuzz on top of AFL and Alphuzz++ on top of AFL++. The evaluation results on three datasets (the UniFuzz dataset, the CGC binaries, and 12 real-world binaries) show that Alphuzz and Alphuzz++ outperform state-of-the-art fuzzers with higher code coverage and more discovered vulnerabilities. In particular, Alphuzz discovers 3 new vulnerabilities with CVEs.},
  isbn = {978-1-4503-9759-9},
  langid = {english},
  keywords = {fuzzing,Fuzzing,optimization,scheduling,Seed scheduling strategy,thesis (related work),Vulnerability detection},
  annotation = {GSCC: 0000012 2025-06-04T05:50:55.846Z \\
6 citations (Crossref/DOI) [2025-02-27]\\
2 citations (Crossref) [2024-03-31]\\
GSCC: 0000011 \\
TLDR: This study design and propose a ``seed mutation tree'' by investigating and leveraging the mutation relationships among seeds, and model the seed scheduling problem as a Monte-Carlo Tree Search (MCTS) problem.\\
remark: {$<$}think{$>$}嗯，我现在需要帮用户用中文概括一篇论文的摘要，而且要求不超过15个字。这篇论文的题目是``Alphuzz: monte carlo search on seed-mutation tree for coverage-guided fuzzing''。摘要里提到，作者设计了一个``seed mutation tree''，利用蒙特卡洛树搜索（MCTS）来进行种子调度，以提高代码覆盖率和发现更多漏洞。Alphuzz和Alphuzz++在多个数据集上表现优于现有工具，发现了新的CVE漏洞。首先，我需要抓住论文的核心创新点。这里的关键点是使用蒙特卡洛树搜索在种子变异树上的应用。用户之前给出的例子都是关于模糊测试的不同优化方法，比如基于马尔可夫链、路径敏感、节能、覆盖度计量、强化学习调度等。所以这里的重点应该是蒙特卡洛方法在种子调度中的应用。接下来要注意不超过15个字，并且用中文。可能需要用``基于''或``利用''这样的词开头。例如，``基于蒙特卡洛的种子调度优化''或者``蒙特卡洛树搜索的模糊测试优化''。但需要更具体一点，因为论文中的核心是seed-mutation tree和MCTS的结合。另外，用户之前的例子中，有的用了``优化''，有的用了``改进''，但都保持了简洁。比如``基于多臂老虎机的节能模糊测试''用了``节能''来突出特点。这里Alphuzz的特点是利用MCTS在seed-mutation tree上进行搜索，所以可能需要突出蒙特卡洛搜索或者MCTS。综合考虑，可能的概括是：``基于蒙特卡洛树搜索的种子调度优化''或者``蒙特卡洛种子变异树的模糊测试''。但需要检查是否符合15字限制。前者是13个字，后者是12个字。不过用户之前的例子有时会用更简短的词汇，比如``覆盖度计量的输入优先模糊测试''是15个字。因此，可能需要更准确的关键词组合。再想一下，摘要中提到``seed mutation tree''和MCTS，所以可能的概括是：``基于蒙特卡洛的种子树模糊测试优化''或``蒙特卡洛搜索种子变异树的模糊测试''。但可能不够简练。另一个角度，Alphuzz的主要贡献是将种子调度建模为MCTS问题，所以可以简化为``蒙特卡洛搜索的种子调度优化''或者``种子调度的蒙特卡洛优化方法''。但可能不够明确。最终，考虑到用户之前的例子，比如``基于马尔可夫链的灰盒模糊测试优化''，这里的结构类似，所以可能使用``基于蒙特卡洛树搜索的模糊测试优化''或``蒙特卡洛树搜索的种子调度优化''。但需要检查字数。``基于蒙特卡洛树搜索的模糊测试优化''是15个字，刚好符合。而原论文题目中的``seed-mutation tree''可能可以简化为``种子树''，但可能不必要，因为用户可能更关注方法（蒙特卡洛）而不是结构。所以最佳答案可能是``基于蒙特卡洛树搜索的模糊测试优化''或者更准确一点，比如``基于MCTS的种子调度优化''，但MCTS可能需要翻译成中文，所以还是用全称。因此，最终答案应该是：``基于蒙特卡洛树搜索的种子调度优化''或者``蒙特卡洛树搜索的模糊测试优化''。检查字数，前者是14字，后者是13字，都符合要求。但原论文重点在种子调度，所以前者更准确。不过用户可能需要更简短的表达，比如``蒙特卡洛种子调度优化''共10字，但可能不够明确。可能折中为``蒙特卡洛搜索的种子调度优化''共13字。但根据用户提供的例子，比如``基于多臂老虎机的节能模糊测试''是15字，这里可以调整为``基于蒙特卡洛树搜索的种子调度优化''共15字。这样既准确又符合字数限制。{$<$}/think{$>$}基于蒙特卡洛的种子调度优化},
  file = {D:\data\Zotero\storage\6RRHVFPQ\Zhao et al_2022_Alphuzz.pdf}
}

@article{zhaoProbabilisticPathPrioritization2022,
  title = {Probabilistic Path Prioritization for Hybrid Fuzzing},
  author = {Zhao, Lei and Cao, Pengcheng and Duan, Yue and Yin, Heng and Xuan, Jifeng},
  year = {2022},
  journal = {IEEE Transactions on Dependable and Secure Computing},
  volume = {19},
  number = {3},
  pages = {1955--1973},
  doi = {10.1109/TDSC.2020.3042259},
  langid = {english},
  annotation = {5 citations (Crossref/DOI) [2025-02-27]\\
3 citations (Crossref) [2024-03-31]\\
GSCC: 0000009},
  file = {D:\data\Zotero\storage\TUJZBTP9\Zhao et al_2022_Probabilistic path prioritization for hybrid fuzzing.pdf}
}

@article{zhaoSurveyRecentAdvancements2024,
  title = {A Survey on Recent Advancements in Autonomous Driving Using Deep Reinforcement Learning: {{Applications}}, Challenges, and Solutions},
  author = {Zhao, Rui and Li, Yun and Fan, Yuze and Gao, Fei and Tsukada, Manabu and Gao, Zhenhai},
  year = {2024},
  journal = {IEEE Transactions on Intelligent Transportation Systems},
  volume = {25},
  number = {12},
  pages = {19365--19398},
  doi = {10.1109/TITS.2024.3452480},
  keywords = {/unread,autonomous driving,Autonomous driving,Autonomous vehicles,continuous learning,Decision making,Deep reinforcement learning,imitation learning,Motion control,Planning,review,Surveys,Vehicle dynamics},
  annotation = {TLDR: This paper analyzes the multi-level AD task characteristics and delves deeply into the current DRL methodologies primarily employed in AD, identifying six modes of DRL model integration into an AD architecture that span the entire spectrum of AD policy processes.}
}

@article{zhaoTightlycoupledHybridFuzzing2024,
  title = {Towards Tightly-Coupled Hybrid Fuzzing via Excavating Input Specifications},
  author = {Zhao, Yiru and Gao, Long and Wei, Qiang and Zhao, Lei},
  year = {2024},
  journal = {IEEE Transactions on Dependable and Secure Computing},
  pages = {1--14},
  doi = {10.1109/TDSC.2024.3361008},
  langid = {american},
  keywords = {Codes,Computer bugs,Concolic execution,Excavation,fuzzing,Fuzzing,hybrid fuzzing,Hybrid power systems,Prototypes,Semantics,software security},
  annotation = {1 citations (Crossref/DOI) [2025-02-27]\\
0 citations (Crossref) [2024-03-31]\\
GSCC: 0000002 \\
TLDR: Experimental results show that Gear-Driller, Gear-DigFuzz and Gear-QSYM outperform Driller, DigFuzz and QSYM with larger code coverage, more discovered vulnerabilities, and higher efficiency in finding vulnerabilities.},
  file = {D:\data\Zotero\storage\Z72F3PS3\Zhao et al_2024_Towards tightly-coupled hybrid fuzzing via excavating input specifications.pdf}
}

@inproceedings{zhengFISHFUZZCatchDeeper2023,
  title = {{{FISHFUZZ}}: {{Catch}} Deeper Bugs by Throwing Larger Nets},
  booktitle = {32nd {{USENIX}} Security Symposium ({{USENIX}} Security 23)},
  author = {Zheng, Han and Zhang, Jiayuan and Huang, Yuhang and Ren, Zezhong and Wang, He and Cao, Chunjie and Zhang, Yuqing and Toffalini, Flavio and Payer, Mathias},
  year = {2023},
  month = aug,
  pages = {1343--1360},
  publisher = {USENIX Association},
  address = {Anaheim, CA},
  isbn = {978-1-939133-37-3},
  langid = {american},
  annotation = {GSCC: 0000027 2025-03-02T06:55:16.400Z \\
CCF: A\\
Read\_Status: To Read\\
Read\_Status\_Date: 2025-04-05T03:04:43.952Z},
  file = {D:\data\Zotero\storage\NYSLQPP6\Zheng et al_2023_FISHFUZZ.pdf}
}

@article{zhouUltraFuzzResourcesavingDistributed2023,
  title = {{{UltraFuzz}}: Towards Resource-Saving in Distributed Fuzzing},
  author = {Zhou, Xu and Wang, Pengfei and Liu, Chenyifan and Yue, Tai and Liu, Yingying and Song, Congxi and Lu, Kai and Yin, Qidi and Han, Xu},
  year = {2023},
  journal = {IEEE Transactions on Software Engineering},
  volume = {49},
  number = {4},
  pages = {2394--2412},
  doi = {10.1109/TSE.2022.3219520},
  langid = {english},
  annotation = {4 citations (Crossref/DOI) [2025-02-27]\\
2 citations (Crossref) [2024-03-31]\\
GSCC: 0000009 \\
TLDR: This paper designs UltraFuzz, a fuzzer for resource-saving in distributed fuzzing based on centralized dynamic scheduling, which outperforms state-of-the-art tools and reveals certain results that seem counter-intuitive, namely that parallel fuzzing can achieve ``super-linear acceleration'' when compared with single-core fuzzing.},
  file = {D:\data\Zotero\storage\FVNRC3DE\Zhou et al_2023_UltraFuzz.pdf}
}

@article{zhuBetterPayAttention2023,
  title = {Better Pay Attention Whilst Fuzzing},
  author = {Zhu, Shunkai and Wang, Jingyi and Sun, Jun and Yang, Jie and Lin, Xingwei and Wang, Tianyi and Zhang, Liyi and Cheng, Peng},
  year = {2023},
  journal = {IEEE Transactions on Software Engineering},
  pages = {1--18},
  doi = {10.1109/TSE.2023.3338129},
  annotation = {1 citations (Crossref/DOI) [2025-02-27]\\
GSCC: 0000002 \\
0 citations (Crossref) [2024-03-31]\\
TLDR: ATTuzz is a deep learning model equipped with an attention mechanism which is learned and updated periodically whilst fuzzing and significantly outperforms 5 state-of-the-art grey-box fuzzers on 6 popular real-world programs and MAGMA data sets at achieving higher edge coverage and finding new bugs.\\
remark: "ATTUZZ：通过深度学习和程序分析实现高效的模糊测试。"},
  file = {D:\data\Zotero\storage\C48MIRXH\Zhu et al_2023_Better pay attention whilst fuzzing.pdf}
}

@article{zhuCSIFuzzFullspeedEdge2022,
  title = {{{CSI-Fuzz}}: {{Full-speed}} Edge Tracing Using Coverage Sensitive Instrumentation},
  author = {Zhu, Xiaogang and Feng, Xiaotao and Meng, Xiaozhu and Wen, Sheng and Camtepe, Seyit and Xiang, Yang and Ren, Kui},
  year = {2022},
  journal = {IEEE Transactions on Dependable and Secure Computing},
  volume = {19},
  number = {2},
  pages = {912--923},
  doi = {10.1109/TDSC.2020.3008826},
  langid = {american},
  annotation = {6 citations (Crossref) [2024-03-31]\\
TLDR: The proposed CSI-Fuzz, a fuzzer utilizing coverage sensitive instrumentation to address the problems of existing full-speed fuzzing, discovers more edges than AFL, AFLFast, and UnTracer and exposes more bugs than the other fuzzers.},
  file = {D:\data\Zotero\storage\KRN2AIQ3\Zhu et al_2022_CSI-Fuzz.pdf}
}

@article{zhuFuzzingSurveyRoadmap2022,
  title = {Fuzzing: A Survey for Roadmap},
  author = {Zhu, Xiaogang and Wen, Sheng and Camtepe, Seyit and Xiang, Yang},
  year = {2022},
  month = jan,
  journal = {ACM Computing Surveys},
  volume = {54},
  number = {11s},
  pages = {1--36},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  issn = {0360-0300, 1557-7341},
  doi = {10.1145/3512345},
  abstract = {Fuzz testing (fuzzing) has witnessed its prosperity in detecting security flaws recently. It generates a large number of test cases and monitors the executions for defects. Fuzzing has detected thousands of bugs and vulnerabilities in various applications. Although effective, there lacks systematic analysis of gaps faced by fuzzing. As a technique of defect detection, fuzzing is required to narrow down the gaps between the entire input space and the defect space. Without limitation on the generated inputs, the input space is infinite. However, defects are sparse in an application, which indicates that the defect space is much smaller than the entire input space. Besides, because fuzzing generates numerous test cases to repeatedly examine targets, it requires fuzzing to perform in an automatic manner. Due to the complexity of applications and defects, it is challenging to automatize the execution of diverse applications. In this article, we systematically review and analyze the gaps as well as their solutions, considering both breadth and depth. This survey can be a roadmap for both beginners and advanced developers to better understand fuzzing.},
  articleno = {230},
  issue_date = {January 2022},
  langid = {english},
  keywords = {automation,Fuzz testing,fuzzing theory,input space,security},
  annotation = {144 citations (Crossref/DOI) [2025-02-27]\\
63 citations (Crossref) [2024-03-31]\\
GSCC: 0000257 \\
TLDR: This article systematically review and analyze the gaps faced by fuzzing as well as their solutions, considering both breadth and depth, to better understand fuzzing.\\
remark: 模糊测试的差距与解决方案综述},
  file = {D:\data\Zotero\storage\U3H8W65H\Zhu et al. - 2022 - Fuzzing A survey for roadmap.pdf}
}

@inproceedings{zhuRegressionGreyboxFuzzing2021,
  title = {Regression Greybox Fuzzing},
  booktitle = {{{CCS}} '21: 2021 {{ACM Sigsac Conference}} on {{Computer}} and {{Communications Security}}, {{Virtual Event}}, {{Republic}} of {{Korea}}, {{November}} 15 - 19, 2021},
  author = {Zhu, Xiaogang and B{\"o}hme, Marcel},
  editor = {Kim, Yongdae and Kim, Jong and Vigna, Giovanni and Shi, Elaine},
  year = {2021},
  pages = {2169--2182},
  publisher = {ACM},
  doi = {10.1145/3460120.3484596},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/conf/ccs/ZhuB21.bib},
  langid = {english},
  keywords = {fuzzing,information,scheduling},
  annotation = {GSCC: 0000101 2025-06-04T05:51:07.779Z \\
47 citations (Crossref/DOI) [2025-02-27]\\
GSCC: 0000088 2025-02-27T04:08:30.499Z \\
remark: {$<$}think{$>$}好的，我现在要帮用户用一句话概括这篇论文的主要内容，而且不能超过15个字，用中文。首先，我需要仔细看一下用户提供的摘要。这篇论文的题目是``Regression Greybox Fuzzing''，看起来是关于回归测试的灰盒模糊测试。摘要里提到，他们在OSSFuzz中发现77\%的bug是回归问题，也就是由最近的代码变更引入的。作者提出了回归灰盒模糊测试（RGF），专注于最近或更频繁改变的代码。他们通过调整种子字节的能量分配，并引入蚁群优化算法来优先处理可能生成更有趣输入的字节。实验部分涉及大量CPU年的模糊测试和20个真实漏洞的发现。用户之前给出的例子都是各种模糊测试的优化方法，比如基于马尔可夫链、路径敏感、节能、覆盖度计量、强化学习调度等。所以这篇的核心应该是针对回归问题的灰盒模糊测试优化。关键点在于``回归测试''和``灰盒模糊测试''。需要把这两个点浓缩成一句话。可能的选项有：``回归导向的灰盒模糊测试''或者``针对回归漏洞的灰盒模糊测试优化''。但用户要求不超过15字，所以需要更简练。``回归灰盒模糊测试优化''这样可能刚好，或者``针对回归的灰盒模糊测试''。不过可能需要更准确一些，因为论文提出的是专门处理回归问题的方法。另外，论文中提到使用蚁群优化和能量调度，但用户可能更关注核心贡献，即回归测试的优化。所以最终概括应该是：``回归导向的灰盒模糊测试''或者``回归灰盒模糊测试优化''。检查字数，前者是11字，后者是12字，都符合要求。根据论文标题和内容，可能选前者，但摘要中更强调对回归问题的处理，所以可能用``回归灰盒模糊测试优化''更准确。{$<$}/think{$>$}回归灰盒模糊测试优化\\
Read\_Status: Only AI-summary\\
Read\_Status\_Date: 2025-04-05T02:33:40.667Z},
  timestamp = {Mon, 03 Jan 2022 22:18:49 +0100},
  file = {D:\data\Zotero\storage\7HP7TL27\Zhu and Böhme - 2021 - Regression greybox fuzzing.pdf}
}

@inproceedings{zongFuzzGuardFilteringOut2020,
  title = {{{FuzzGuard}}: Filtering out Unreachable Inputs in Directed Grey-Box Fuzzing through Deep Learning},
  booktitle = {29th {{Usenix Security Symposium}}, {{Usenix Security}} 2020, {{August}} 12-14, 2020},
  author = {Zong, Peiyuan and Lv, Tao and Wang, Dawei and Deng, Zizhuang and Liang, Ruigang and Chen, Kai},
  editor = {Capkun, Srdjan and Roesner, Franziska},
  year = {2020},
  pages = {2255--2269},
  publisher = {USENIX Association},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/conf/uss/ZongLWDL020.bib},
  langid = {english},
  keywords = {thesis (related work)},
  annotation = {GSCC: 0000157 2025-03-02T09:07:22.029Z \\
remark: 深度学习优化模糊测试输入筛选},
  timestamp = {Fri, 29 Jan 2021 22:08:56 +0100},
  file = {D:\data\Zotero\storage\YKGBBMXS\Zong et al. - 2020 - FuzzGuard Filtering out unreachable inputs in dir.pdf}
}

@inproceedings{zouSyzScopeRevealingHighrisk2022,
  title = {{{SyzScope}}: {{Revealing}} High-Risk Security Impacts of Fuzzer-Exposed Bugs in Linux Kernel},
  booktitle = {31st {{USENIX}} Security Symposium, {{USENIX}} Security 2022, Boston, {{MA}}, {{USA}}, August 10-12, 2022},
  author = {Zou, Xiaochen and Li, Guoren and Chen, Weiteng and Zhang, Hang and Qian, Zhiyun},
  editor = {Butler, Kevin R. B. and Thomas, Kurt},
  year = {2022},
  pages = {3201--3217},
  publisher = {USENIX Association},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/conf/uss/ZouLCZQ22.bib},
  langid = {american},
  annotation = {Read\_Status: Read\\
Read\_Status\_Date: 2025-08-25T05:24:10.809Z},
  timestamp = {Tue, 03 Jan 2023 13:35:47 +0100},
  file = {D:\data\Zotero\storage\ZSH3VGIX\Zou et al. - 2022 - SyzScope Revealing high-risk security impacts of .pdf}
}
